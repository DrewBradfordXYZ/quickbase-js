project: >-
  quickbase-js
date: >-
  3/18/2025
root: >-
  /home/drew/Projects/quickbase-js
goals:
  - >-
    A
    library
    for
    interacting
    with
    the
    QuickBase
    RESTful
    API.
  - >-
    Use
    OpenAPI
    to
    generate
    types
    and
    methods
    using
    a
    proxy.
    Validate
    with
    tests.
  - >-
    Provide
    robust
    and
    intuitive
    temporary
    token
    support
    for
    browser
    environments.
  - >-
    User
    Tokens
    support
    both
    Node.js
    and
    browser
    environments.
  - >-
    Use
    case:
    JS
    frameworks
    like
    React,
    Vue,
    and
    Angular
    hosted
    in
    QuickBase
    code
    pages.
  - >-
    Enable
    a
    flexible
    or
    native
    fetch
    in
    the
    browser.
  - >-
    Enable
    a
    flexible
    fetch
    framework
    in
    Node.js.
  - >-
    #
  - >-
    No
    manual
    updating
    methods
    when
    the
    QuickBase
    API
    changes.
  - >-
    The
    proxy
    magic
    dynamically
    maps
    generated
    methods
    and
    types.
  - >-
    #
  - >-
    TokenCache
    is
    defined
    per
    quickbaseClient
    call,
    so
    each
    instance
    has
    its
    own
    isolated
    TokenCache.
  - >-
    Each
    quickbase
    client
    instance
    has
    an
    isolated
    and
    individual
    token
    cache.
pipelineOverview:
  - >-
    What
    I’m
    Trying
    to
    Do
  - >-
    My
    approach
    is
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById
    so
    QuickbaseClient.ts
    can
    map
    it
    to
    client.getApp.
    Steps
    include:
  - >-
    Fix
    fix-spec.ts:
  - >-
    Add
    tags:
    ["Apps"]
    to
    /apps/*
    endpoints
    to
    group
    them
    into
    AppsApi.ts.
  - >-
    Ensure
    all
    endpoints
    and
    models
    are
    correctly
    defined
    and
    typed.
  - >-
    Debug
    regenerate-client.ts:
  - >-
    Enhance
    logging
    to
    catch
    why
    AppsApi.ts
    isn’t
    generated.
  - >-
    Test
    if
    getAppById
    appears
    in
    another
    file
    (e.g.,
    DefaultApi.ts).
  - >-
    Update
    QuickbaseClient.ts:
  - >-
    Adjust
    imports
    to
    use
    the
    correct
    API
    class
    once
    generated.
  - >-
    Test
    and
    Iterate:
  - >-
    Run
    npm
    run
    fix-spec,
    npm
    run
    regenerate,
    and
    npm
    run
    test
    to
    verify
    AppsApi.ts
    exists
    and
    test.ts
    works.
  - >-
    The
    latest
    fix-spec.ts
    with
    tags
    aims
    to
    force
    the
    generator
    to
    create
    AppsApi.ts,
    addressing
    the
    missing
    file
    issue.
  - >-
    Relevant
    Project
    Files
  - >-
    Here’s
    a
    list
    of
    files
    that
    would
    help
    understand
    and
    resolve
    this
    problem,
    along
    with
    their
    roles:
  - >-
    src/code-generation/fix-spec.ts:
  - >-
    Role:
    Modifies
    the
    original
    QuickBase
    spec
    (e.g.,
    QuickBase_RESTful_*.json)
    to
    create
    quickbase-fixed.json
    with
    required
    endpoints
    (e.g.,
    /apps/{appId}).
  - >-
    Relevance:
    Defines
    the
    spec
    fed
    to
    the
    generator;
    errors
    here
    affect
    generation.
  - >-
    src/code-generation/quickbase-fixed.json:
  - >-
    Role:
    The
    processed
    OpenAPI
    spec
    used
    by
    regenerate-client.ts
    to
    generate
    code.
  - >-
    Relevance:
    Confirms
    if
    /apps/{appId}
    is
    correctly
    structured
    with
    operationId:
    "getAppById".
  - >-
    src/code-generation/regenerate-client.ts:
  - >-
    Role:
    Runs
    OpenAPI
    Generator
    to
    produce
    src/generated/
    files
    (APIs
    and
    models)
    and
    fixes
    .ts
    extensions
    with
    ts-morph.
  - >-
    Relevance:
    Controls
    the
    generation
    process;
    logs
    reveal
    why
    AppsApi.ts
    is
    missing.
  - >-
    src/generated/apis/AppsApi.ts
    (if
    exists):
  - >-
    Role:
    Should
    contain
    getAppById
    method
    for
    /apps/{appId}
    GET.
  - >-
    Relevance:
    Missing
    file
    is
    the
    core
    issue;
    its
    absence
    breaks
    QuickbaseClient.ts.
  - >-
    src/generated/apis/DefaultApi.ts:
  - >-
    Role:
    Default
    API
    class
    for
    untagged
    operations.
  - >-
    Relevance:
    Might
    contain
    getAppById
    if
    tags
    are
    misconfigured.
  - >-
    src/QuickbaseClient.ts:
  - >-
    Role:
    Wraps
    generated
    API
    classes
    (e.g.,
    AppsApi)
    in
    a
    Proxy
    for
    ergonomic
    calls
    (e.g.,
    client.getApp).
  - >-
    Relevance:
    Fails
    to
    import
    AppsApi.ts,
    causing
    the
    runtime
    error.
  - >-
    src/test.ts:
  - >-
    Role:
    Test
    script
    calling
    client.getApp({
    appId
    }).
  - >-
    Relevance:
    Final
    validation
    point;
    shows
    if
    the
    fix
    works.
  - >-
    .env.development:
  - >-
    Role:
    Stores
    QB_REALM,
    QB_USER_TOKEN,
    QB_APP_ID
    for
    API
    authentication.
  - >-
    Relevance:
    Ensures
    the
    API
    call
    has
    valid
    credentials
    (not
    the
    current
    issue,
    but
    critical
    for
    success).
  - >-
    src/specs/QuickBase_RESTful_API_2025-03-04T06_22_39.725Z.json
    (or
    similar):
  - >-
    Role:
    Original
    QuickBase
    API
    spec
    before
    fix-spec.ts
    processing.
  - >-
    Relevance:
    Shows
    how
    /apps/{appId}
    was
    originally
    defined,
    helping
    identify
    conflicts.
  - >-
    package.json:
  - >-
    Role:
    Defines
    scripts
    (fix-spec,
    regenerate,
    test)
    and
    dependencies
    (e.g.,
    ts-node,
    openapi-generator-cli).
  - >-
    Relevance:
    Confirms
    script
    commands
    and
    versions
    align
    with
    our
    process.
  - >-
    What
    We
    Achieved
  - >-
    Goal
    Met:
    You
    can
    now
    call
    client.getApp({
    appId:
    "buwai2zpe"
    })
    and
    get
    the
    app
    details
    {
    id:
    'buwai2zpe',
    name:
    'qb-copy'
    }.
  - >-
    Fixes
    Applied:
  - >-
    Added
    tags:
    ["Apps"]
    in
    fix-spec.ts
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById.
  - >-
    Updated
    QuickbaseClient.ts
    to:
  - >-
    Use
    prototype
    methods
    via
    Object.getOwnPropertyNames.
  - >-
    Bind
    methods
    to
    preserve
    context
    with
    .bind(api).
  - >-
    Handle
    getAppById’s
    direct
    JSON
    return
    instead
    of
    a
    Response
    object.
  - >-
    Result:
    The
    ergonomic
    API
    you
    wanted
    (client.getApp)
    works
    seamlessly
    with
    the
    generated
    AppsApi.ts.
  - >-
    Why
    It
    Works
    Now
  - >-
    fix-spec.ts:
  - >-
    Correctly
    defined
    /apps/{appId}
    with
    operationId:
    "getAppById"
    and
    tags:
    ["Apps"],
    ensuring
    AppsApi.ts
    generation.
  - >-
    regenerate-client.ts:
  - >-
    Successfully
    ran
    OpenAPI
    Generator
    to
    produce
    AppsApi.ts
    with
    getAppById.
  - >-
    QuickbaseClient.ts:
  - >-
    buildMethodMap
    now
    captures
    getAppById
    and
    maps
    it
    to
    getApp.
  - >-
    invokeMethod
    passes
    {
    appId:
    'buwai2zpe'
    }
    as
    requestParameters
    and
    handles
    the
    JSON
    response
    directly.
  - >-
    test.ts:
  - >-
    Calls
    client.getApp
    and
    logs
    the
    result,
    proving
    the
    end-to-end
    flow.
tree:
  name: >-
    .
  type: >-
    directory
  children:
    - name: >-
        .env
      type: >-
        file
    - name: >-
        .gitignore
      type: >-
        file
    - name: >-
        CHANGELOG.md
      type: >-
        file
    - name: >-
        LICENSE
      type: >-
        file
    - name: >-
        README.md
      type: >-
        file
    - name: >-
        build-common.js
      type: >-
        file
    - name: >-
        build-esm.js
      type: >-
        file
    - name: >-
        build-umd.js
      type: >-
        file
    - name: >-
        dist
      type: >-
        directory
      children:
        - name: >-
            esm
          type: >-
            directory
          children:
            - name: >-
                quickbase.d.ts
              type: >-
                file
            - name: >-
                quickbase.js
              type: >-
                file
            - name: >-
                quickbase.js.map
              type: >-
                file
            - name: >-
                quickbase.min.js
              type: >-
                file
            - name: >-
                quickbase.min.js.map
              type: >-
                file
        - name: >-
            umd
          type: >-
            directory
          children:
            - name: >-
                quickbase.umd.js
              type: >-
                file
            - name: >-
                quickbase.umd.js.map
              type: >-
                file
            - name: >-
                quickbase.umd.min.js
              type: >-
                file
            - name: >-
                quickbase.umd.min.js.map
              type: >-
                file
    - name: >-
        examples
      type: >-
        directory
      children:
        - name: >-
            quicbase-jsCDN.html
          type: >-
            file
        - name: >-
            react.js
          type: >-
            file
        - name: >-
            vanillajs.html
          type: >-
            file
    - name: >-
        open-api
      type: >-
        directory
      children:
        - name: >-
            fix-spec-main.ts
          type: >-
            file
        - name: >-
            generate-override-report.ts
          type: >-
            file
        - name: >-
            generate-unified-interface.ts
          type: >-
            file
        - name: >-
            regenerate-client.ts
          type: >-
            file
        - name: >-
            schema
          type: >-
            directory
          children:
            - name: >-
                enhance-general.ts
              type: >-
                file
            - name: >-
                fix-arrays.ts
              type: >-
                file
            - name: >-
                tags
              type: >-
                directory
              children:
                - name: >-
                    apps.ts
                  type: >-
                    file
                - name: >-
                    fields.ts
                  type: >-
                    file
                - name: >-
                    groups.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records.ts
                  type: >-
                    file
                - name: >-
                    tables.ts
                  type: >-
                    file
                - name: >-
                    users.ts
                  type: >-
                    file
        - name: >-
            types
          type: >-
            directory
          children:
            - name: >-
                spec.ts
              type: >-
                file
        - name: >-
            utils
          type: >-
            directory
          children:
            - name: >-
                infer-schema.ts
              type: >-
                file
            - name: >-
                naming.ts
              type: >-
                file
    - name: >-
        openapitools.json
      type: >-
        file
    - name: >-
        package-lock.json
      type: >-
        file
    - name: >-
        package.json
      type: >-
        file
    - name: >-
        playwright.config.ts
      type: >-
        file
    - name: >-
        rollup.config.js
      type: >-
        file
    - name: >-
        src
      type: >-
        directory
      children:
        - name: >-
            RateLimitError.ts
          type: >-
            file
        - name: >-
            ThrottleBucket.ts
          type: >-
            file
        - name: >-
            generated
          type: >-
            directory
          children:
            - name: >-
                .openapi-generator
              type: >-
                directory
              children:
                - name: >-
                    FILES
                  type: >-
                    file
                - name: >-
                    VERSION
                  type: >-
                    file
            - name: >-
                .openapi-generator-ignore
              type: >-
                file
            - name: >-
                apis
              type: >-
                directory
              children:
                - name: >-
                    AppsApi.ts
                  type: >-
                    file
                - name: >-
                    AuditApi.ts
                  type: >-
                    file
                - name: >-
                    AuthApi.ts
                  type: >-
                    file
                - name: >-
                    DocumentTemplatesApi.ts
                  type: >-
                    file
                - name: >-
                    FieldsApi.ts
                  type: >-
                    file
                - name: >-
                    FilesApi.ts
                  type: >-
                    file
                - name: >-
                    FormulasApi.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticsApi.ts
                  type: >-
                    file
                - name: >-
                    RecordsApi.ts
                  type: >-
                    file
                - name: >-
                    ReportsApi.ts
                  type: >-
                    file
                - name: >-
                    SolutionsApi.ts
                  type: >-
                    file
                - name: >-
                    TablesApi.ts
                  type: >-
                    file
                - name: >-
                    UserTokenApi.ts
                  type: >-
                    file
                - name: >-
                    UsersApi.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                models
              type: >-
                directory
              children:
                - name: >-
                    AddManagersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddManagersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    Audit200Response.ts
                  type: >-
                    file
                - name: >-
                    Audit202Response.ts
                  type: >-
                    file
                - name: >-
                    AuditRequest.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInnerChangesInnerInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CloneUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    CloneUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateField200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInnerAppsInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    DeactivateUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteApp200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteAppRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFields200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteFieldsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFile200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecords200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecordsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteTable200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroups200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroupsRequest.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    DownloadFile200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoToken200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    GenerateDocument200Response.ts
                  type: >-
                    file
                - name: >-
                    GetApp200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppEvents200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppTables200Response.ts
                  type: >-
                    file
                - name: >-
                    GetField200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFields200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldsUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetRelationships200Response.ts
                  type: >-
                    file
                - name: >-
                    GetReport200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTable200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTableReports200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTempTokenDBID200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    Permission.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200Response.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequest.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticReads200Response.ts
                  type: >-
                    file
                - name: >-
                    Record.ts
                  type: >-
                    file
                - name: >-
                    RecordValue.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RunFormula200Response.ts
                  type: >-
                    file
                - name: >-
                    RunFormulaRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQuery200Response.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestGroupByInner.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestOptions.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestSortByInner.ts
                  type: >-
                    file
                - name: >-
                    RunReport200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateField200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    Upsert200Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert207Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert400Response.ts
                  type: >-
                    file
                - name: >-
                    UpsertRequest.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                runtime.ts
              type: >-
                file
        - name: >-
            generated-unified
          type: >-
            directory
          children:
            - name: >-
                QuickbaseClient.ts
              type: >-
                file
            - name: >-
                missing-types-report.json
              type: >-
                file
        - name: >-
            index.ts
          type: >-
            file
        - name: >-
            invokeMethod.ts
          type: >-
            file
        - name: >-
            quickbaseClient.ts
          type: >-
            file
        - name: >-
            tokenCache.ts
          type: >-
            file
        - name: >-
            utils.ts
          type: >-
            file
    - name: >-
        test-artifacts
      type: >-
        directory
      children:
        - name: >-
            .last-run.json
          type: >-
            file
        - name: >-
            test-results.json
          type: >-
            file
    - name: >-
        test-esm.js
      type: >-
        file
    - name: >-
        test-results.json
      type: >-
        file
    - name: >-
        test-umd.js
      type: >-
        file
    - name: >-
        test.ts
      type: >-
        file
    - name: >-
        tests
      type: >-
        directory
      children:
        - name: >-
            playwright
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        cacheSwitching.test.ts
                      type: >-
                        file
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithUserToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        tempTokenPrefetch.test.ts
                      type: >-
                        file
                    - name: >-
                        tempTokenRenewal.test.ts
                      type: >-
                        file
        - name: >-
            setup.ts
          type: >-
            file
        - name: >-
            vitest
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/apps/copyApp.test.ts

                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - copyApp > creates a new copied app in QuickBase",
                          { timeout: 30000 }, // Increased to 30 seconds
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const appId = process.env.QB_APP_ID || ""; // The source app ID to copy from

                            const copyAppName = `CopiedApp_${Date.now()}`; // Unique name to avoid conflicts
                            const copyBody = {
                              name: copyAppName,
                              description: "Test copied app",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            console.log("Config used:", {
                              ...config,
                              userToken: config.userToken ? "[REDACTED]" : "", // Avoid logging sensitive token
                            });
                            console.log("Copying app with:", copyBody);
                            const startTime = Date.now();
                            let response;
                            try {
                              response = await client.copyApp({ appId, body: copyBody });
                              const duration = Date.now() - startTime;
                              console.log(`copyApp completed in ${duration}ms`);
                              console.log("Real API response:", response);

                              expect(response).toBeDefined();
                              expect(response.id).toBeDefined();
                              expect(response.name).toBe(copyAppName);
                              expect(response.description).toBe(copyBody.description);
                              expect(response.created).toBeInstanceOf(Date);
                              expect(response.updated).toBeInstanceOf(Date);
                              expect(response.dateFormat).toMatch(/^\w{2}-\w{2}-\w{4}$/); // e.g., "MM-DD-YYYY"
                              expect(typeof response.timeZone).toBe("string"); // Simplified check
                              expect(typeof response.hasEveryoneOnTheInternet).toBe("boolean");
                              expect(response.ancestorId).toBe(appId); // Should match the source app ID
                              expect(
                                response.dataClassification === undefined ||
                                  typeof response.dataClassification === "string"
                              ).toBe(true); // Allow undefined or string
                              expect(
                                response.variables === undefined || Array.isArray(response.variables)
                              ).toBe(true); // Allow undefined or array
                            } catch (error) {
                              const duration = Date.now() - startTime;
                              console.error(`copyApp failed after ${duration}ms:`, error);
                              throw error; // Re-throw to fail the test
                            }

                            // Cleanup: Delete the copied app using deleteApp
                            const deleteStartTime = Date.now();
                            const deleteResponse = await client.deleteApp({
                              appId: response.id,
                              body: { name: copyAppName },
                            });
                            const deleteDuration = Date.now() - deleteStartTime;
                            console.log(`deleteApp completed in ${deleteDuration}ms`);
                            console.log("Cleanup - Deleted app:", deleteResponse);
                            expect(deleteResponse.deletedAppId).toBe(response.id);
                          }
                        );
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/apps/createApp.test.ts

                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - createApp > creates a new app in QuickBase",
                          { timeout: 30000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                              useTempTokens: false,
                            };
                            const client = quickbase(config);

                            const appName = `TestApp_${Date.now()}`;
                            const createBody = {
                              name: appName,
                              description: "Test app creation",
                              assignToken: true,
                            };

                            console.log("Config used:", {
                              ...config,
                              userToken: config.userToken ? "[REDACTED]" : "",
                            });
                            console.log("Creating app with:", createBody);
                            const createStartTime = Date.now();
                            let response;
                            try {
                              response = await client.createApp({ body: createBody });
                              const createDuration = Date.now() - createStartTime;
                              console.log(`createApp completed in ${createDuration}ms`);
                              console.log("Real API response:", response);

                              expect(response).toBeDefined();
                              expect(response.id).toBeDefined();
                              expect(response.name).toBe(appName);
                              expect(response.description).toBe(createBody.description);
                              expect(response.created).toBeInstanceOf(Date);
                              expect(response.updated).toBeInstanceOf(Date);
                              expect(response.dateFormat).toMatch(/^\w{2}-\w{2}-\w{4}$/);
                              expect(typeof response.timeZone).toBe("string");
                              expect(typeof response.hasEveryoneOnTheInternet).toBe("boolean");
                              expect(
                                response.dataClassification === undefined ||
                                  typeof response.dataClassification === "string"
                              ).toBe(true);
                              expect(
                                response.variables === undefined || Array.isArray(response.variables)
                              ).toBe(true);

                              // Cleanup: Delete the app after assertions
                              const deleteBody = { name: appName };
                              await client.deleteApp({ appId: response.id, body: deleteBody });
                              console.log("Cleanup: App deleted:", response.id);
                            } catch (error) {
                              const createDuration = Date.now() - createStartTime;
                              console.error(`createApp failed after ${createDuration}ms:`, error);
                              throw error;
                            }
                          }
                        );
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/apps/deleteApp.test.ts

                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - deleteApp > deletes an app in QuickBase",
                          { timeout: 30000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                              useTempTokens: false,
                            };
                            const client = quickbase(config);

                            const appName = `TempApp_${Date.now()}`;
                            const createBody = {
                              name: appName,
                              description: "Temporary app for deleteApp test",
                              assignToken: true, // Match createApp.test.ts
                            };

                            console.log("Config used:", {
                              ...config,
                              userToken: config.userToken ? "[REDACTED]" : "",
                            });
                            console.log("Creating temporary app with:", createBody);
                            const createStartTime = Date.now();
                            let createResponse;
                            try {
                              createResponse = await client.createApp({ body: createBody });
                              const createDuration = Date.now() - createStartTime;
                              console.log(`createApp completed in ${createDuration}ms`);
                              console.log("Created app response:", createResponse);

                              expect(createResponse).toBeDefined();
                              expect(createResponse.id).toBeDefined();
                              expect(createResponse.name).toBe(appName);
                            } catch (error) {
                              const createDuration = Date.now() - createStartTime;
                              console.error(`createApp failed after ${createDuration}ms:`, error);
                              throw error;
                            }

                            const deleteBody = {
                              name: appName,
                            };
                            console.log("Deleting app with:", deleteBody);
                            const deleteStartTime = Date.now();
                            try {
                              const deleteResponse = await client.deleteApp({
                                appId: createResponse.id,
                                body: deleteBody,
                              });
                              const deleteDuration = Date.now() - deleteStartTime;
                              console.log(`deleteApp completed in ${deleteDuration}ms`);
                              console.log("Delete app response:", deleteResponse);

                              expect(deleteResponse).toBeDefined();
                              expect(deleteResponse.deletedAppId).toBe(createResponse.id);
                            } catch (error) {
                              const deleteDuration = Date.now() - deleteStartTime;
                              console.error(`deleteApp failed after ${deleteDuration}ms:`, error);
                              if (error instanceof Error && "response" in error) {
                                try {
                                  const errorBody = await (error as any).response.json();
                                  console.error("Full deleteApp error response:", errorBody);
                                } catch (e) {
                                  console.error("Could not parse error response:", e);
                                }
                              }
                              throw error;
                            }
                          }
                        );
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/apps/getApp.test.ts

                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - getApp > fetches real app data from QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const getAppId = "buwai2zpe";

                            console.log("Config used:", config);
                            const result = await client.getApp({ appId: getAppId });
                            console.log("Real API response:", result);

                            expect(result).toEqual({
                              id: getAppId,
                              name: "qb-copy",
                              created: expect.any(Date),
                              updated: expect.any(Date),
                              description: "",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              dateFormat: "MM-DD-YYYY",
                              hasEveryoneOnTheInternet: false,
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                              ancestorId: undefined,
                              dataClassification: undefined,
                              variables: [{ name: "TestVar", value: "TestValue" }],
                            });
                          }
                        );
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - getAppEvents > fetches real app events from QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const appId = "buwai2zpe"; // Same app ID as getApp test

                            console.log("Config used:", config);
                            const result = await client.getAppEvents({ appId });
                            console.log("Real API response:", result);

                            // Validate the response is an array of events
                            expect(result).toBeInstanceOf(Array);

                            // Check that each event has the required properties
                            result.forEach((event) => {
                              expect(event).toHaveProperty("type");
                              expect([
                                "qb-action",
                                "webhook",
                                "email-notification",
                                "subscription",
                                "reminder",
                                "automation",
                              ]).toContain(event.type);

                              expect(event).toHaveProperty("owner");
                              expect(event.owner).toHaveProperty("email");
                              expect(typeof event.owner.email).toBe("string");
                              expect(event.owner).toHaveProperty("id");
                              expect(typeof event.owner.id).toBe("string");
                              expect(event.owner).toHaveProperty("name");
                              expect(typeof event.owner.name).toBe("string");
                              // userName is optional, so we don't enforce it

                              expect(event).toHaveProperty("isActive");
                              expect(typeof event.isActive).toBe("boolean");

                              expect(event).toHaveProperty("tableId");
                              expect(typeof event.tableId).toBe("string");

                              // Name is present for all types except automation
                              if (event.type !== "automation") {
                                expect(event).toHaveProperty("name");
                                expect(typeof event.name).toBe("string");
                              } else {
                                expect(event.name).toBeUndefined();
                              }

                              // URL is only present for automation
                              if (event.type === "automation") {
                                expect(event).toHaveProperty("url");
                                expect(typeof event.url).toBe("string");
                              } else {
                                expect(event.url).toBeUndefined();
                              }
                            });
                          }
                        );
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - updateApp > updates real app data in QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const appId = "buwai2zpe"; // Same app ID as before

                            // Original app data (to restore later if needed)
                            const originalApp = await client.getApp({ appId });
                            console.log("Original app data:", originalApp);

                            // Update request
                            const updateRequest = {
                              name: "qb-copy-updated",
                              description: "Updated via integration test",
                              variables: [{ name: "TestVar", value: "TestValue" }],
                            };

                            console.log("Config used:", config);
                            console.log("Update request:", updateRequest);
                            const result = await client.updateApp({ appId, body: updateRequest });
                            console.log("Real API response:", result);

                            // Validate the response
                            expect(result).toHaveProperty("id", appId);
                            expect(result).toHaveProperty("name", "qb-copy-updated");
                            expect(result).toHaveProperty(
                              "description",
                              "Updated via integration test"
                            );
                            expect(result).toHaveProperty("variables");
                            expect(result.variables).toContainEqual({
                              name: "TestVar",
                              value: "TestValue",
                            });
                            expect(result).toHaveProperty("created");
                            expect(result.created).toBeInstanceOf(Date);
                            expect(result).toHaveProperty("updated");
                            expect(result.updated).toBeInstanceOf(Date);

                            // Optional: Restore original name to avoid permanent changes
                            const restoreRequest = {
                              name: originalApp.name,
                              description: originalApp.description,
                              variables: originalApp.variables,
                            };
                            await client.updateApp({ appId, body: restoreRequest });
                            console.log("Restored app to:", originalApp.name);
                          }
                        );
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        retryUserToken401.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        describe,
                        it,
                        vi,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase,
                        QuickbaseClient
                        }
                        from
                        "../../../../src/quickbaseClient";

                        import
                        {
                        ResponseError
                        }
                        from
                        "../../../../src/generated/runtime";


                        describe("QuickbaseClient
                        Integration
                        -
                        User
                        Token
                        Retry
                        on
                        401",
                        ()
                        =>
                        {
                          let client: QuickbaseClient;
                          const mockFetch = vi.fn();

                          beforeEach(() => {
                            const config = {
                              realm: process.env.QB_REALM || "builderprogram-dbradford6815",
                              userToken: "mock-user-token",
                              debug: true,
                              fetchApi: mockFetch,
                            };
                            console.log("[quickbaseTest] Config:", config);
                            client = quickbase(config);
                          });

                          it("retries on transient 401 with user token and succeeds", async () => {
                            const consoleSpy = vi.spyOn(console, "log");

                            mockFetch
                              .mockImplementationOnce(() => {
                                const response = new Response(null, {
                                  status: 401,
                                  statusText: "Unauthorized",
                                });
                                console.log("[mockFetch] Throwing 401 ResponseError");
                                return Promise.reject(new ResponseError(response));
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: async () => [{ id: 1, label: "Mock Field", fieldType: "text" }],
                              });

                            const fields = await client.getFields({ tableId: "mock-table-id" });

                            expect(fields).toBeInstanceOf(Array);
                            expect(fields.length).toBeGreaterThan(0);
                            expect(fields[0]).toHaveProperty("id");
                            expect(fields[0]).toHaveProperty("label");

                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields (user token), retrying with same token:",
                              "" // Matches empty ResponseError message from mock
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying getFields with user token"
                            );
                            expect(mockFetch).toHaveBeenCalledTimes(2);

                            consoleSpy.mockRestore();
                          });
                        });
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        describe,
                        it,
                        expect,
                        afterAll
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";


                        describe("QuickbaseClient
                        Integration
                        -
                        createField",
                        ()
                        =>
                        {
                          const client = createClient();

                          const createdFieldIds: number[] = [];

                          afterAll(async () => {
                            if (createdFieldIds.length > 0) {
                              try {
                                const response = await client.deleteFields({
                                  tableId: QB_TABLE_ID_1,
                                  body: { fieldIds: createdFieldIds },
                                });
                                console.log(
                                  `Cleaned up fields: ${JSON.stringify(response.deletedFieldIds)}`,
                                  response.errors && response.errors.length > 0
                                    ? `Errors: ${response.errors}`
                                    : ""
                                );
                              } catch (error) {
                                console.error("Cleanup failed:", error);
                                console.log(`Fields left in table: ${createdFieldIds}`);
                              }
                            } else {
                              console.log("No fields to clean up.");
                            }
                          });

                          it("creates a field with user token", async () => {
                            const uniqueLabel = `TestField_${Date.now()}`;
                            const response = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: {
                                label: uniqueLabel,
                                fieldType: "text",
                                fieldHelp: "Created via integration test",
                                addToForms: true,
                              },
                            });

                            expect(response.id).toBeDefined();
                            expect(response.label).toBe(uniqueLabel);
                            expect(response.fieldType).toBe("text");
                            expect(response.fieldHelp).toBe("Created via integration test");

                            createdFieldIds.push(response.id);
                            console.log(`Created field ${uniqueLabel} with ID ${response.id}`);
                          });

                          it("fails with invalid field type", async () => {
                            const uniqueLabel = `InvalidField_${Date.now()}`;
                            await expect(
                              client.createField({
                                tableId: QB_TABLE_ID_1,
                                body: {
                                  label: uniqueLabel,
                                  fieldType: "invalid_type" as "text", // Type assertion to bypass compile-time check
                                  fieldHelp: "Should fail",
                                },
                              })
                            ).rejects.toThrow("API Error: Bad Request (Status: 400)");
                          }, 10000); // Increased timeout to 10 seconds

                          it("fails with missing label", async () => {
                            await expect(
                              client.createField({
                                tableId: QB_TABLE_ID_1,
                                body: {
                                  label: "",
                                  fieldType: "text",
                                },
                              })
                            ).rejects.toThrow("API Error: Invalid input (Status: 400)");
                          });
                        });
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/fields/deleteFields.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeAll
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";


                        describe("QuickbaseClient
                        Integration
                        -
                        deleteFields",
                        ()
                        =>
                        {
                          const client = createClient();
                          let fieldIdsToDelete: number[] = [];

                          beforeAll(async () => {
                            try {
                              const fieldLabels = ["DeleteTest1", "DeleteTest2"];
                              for (const label of fieldLabels) {
                                const response = await client.createField({
                                  tableId: QB_TABLE_ID_1,
                                  body: {
                                    label,
                                    fieldType: "text",
                                    fieldHelp: "Test field for deletion",
                                  },
                                });
                                fieldIdsToDelete.push(response.id);
                                console.log(`Created field ${label} with ID ${response.id}`);
                              }
                              if (fieldIdsToDelete.length !== 2) {
                                throw new Error("Failed to create all test fields");
                              }
                            } catch (error) {
                              console.error("beforeAll failed:", error);
                              throw error;
                            }
                          });

                          it("deletes fields successfully with user token", async () => {
                            try {
                              const response = await client.deleteFields({
                                tableId: QB_TABLE_ID_1,
                                body: { fieldIds: fieldIdsToDelete },
                              });
                              console.log("deleteFields response:", JSON.stringify(response, null, 2));
                              expect(response).toBeDefined();
                              expect(response.deletedFieldIds).toEqual(
                                expect.arrayContaining(fieldIdsToDelete)
                              );
                              expect(response.errors ?? []).toHaveLength(0);
                            } catch (error) {
                              console.error("deleteFields failed:", error);
                              throw error;
                            }
                          });

                          it("handles partial success with errors", { timeout: 10000 }, async () => {
                            const newField = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: { label: "DeleteTest3", fieldType: "text" },
                            });
                            console.log(`Created field DeleteTest3 with ID ${newField.id}`);

                            const invalidFieldId = 999999;
                            const fieldIds = [newField.id, invalidFieldId];

                            console.log("Sending deleteFields request at:", new Date());
                            const response = await client.deleteFields({
                              tableId: QB_TABLE_ID_1,
                              body: { fieldIds },
                            });
                            console.log("deleteFields response received at:", new Date());
                            console.log("Response:", JSON.stringify(response, null, 2));

                            expect(response.deletedFieldIds).toContain(newField.id);
                            expect(response.deletedFieldIds).not.toContain(invalidFieldId);
                            expect(response.errors).toHaveLength(1);
                            expect(response.errors[0]).toMatch(/Field: 999999 was not found/i);
                          });

                          it("fails with invalid request (empty fieldIds)", async () => {
                            await expect(
                              client.deleteFields({
                                tableId: QB_TABLE_ID_1,
                                body: { fieldIds: [] },
                              })
                            ).rejects.toThrow("API Error: Bad Request (Status: 400)");
                          });
                        });
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/fields/getField.test.ts

                        import
                        {
                        describe,
                        it,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";


                        describe("QuickbaseClient
                        Integration
                        -
                        getField",
                        ()
                        =>
                        {
                          const client = createClient();

                          it("retrieves an existing field with user token", async () => {
                            // Create a field to ensure we have a known field ID to retrieve
                            const uniqueLabel = `TestField_${Date.now()}`;
                            const createResponse = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: {
                                label: uniqueLabel,
                                fieldType: "text",
                                fieldHelp: "Created for getField integration test",
                                addToForms: true,
                              },
                            });

                            expect(createResponse.id).toBeDefined();
                            const fieldId = createResponse.id;
                            console.log(`Created field ${uniqueLabel} with ID ${fieldId} for testing`);

                            // Test getField with the created field
                            const response = await client.getField({
                              fieldId: fieldId,
                              tableId: QB_TABLE_ID_1,
                              includeFieldPerms: true,
                            });

                            expect(response.id).toBe(fieldId);
                            expect(response.label).toBe(uniqueLabel);
                            expect(response.fieldType).toBe("text");
                            expect(response.fieldHelp).toBe("Created for getField integration test");
                            expect(response.permissions).toBeDefined();
                            expect(Array.isArray(response.permissions)).toBe(true);
                            console.log(`Retrieved field ${response.label} with ID ${response.id}`);

                            // Clean up the created field
                            try {
                              const deleteResponse = await client.deleteFields({
                                tableId: QB_TABLE_ID_1,
                                body: { fieldIds: [fieldId] },
                              });
                              console.log(
                                `Cleaned up field ${fieldId}: ${JSON.stringify(deleteResponse)}`
                              );
                            } catch (error) {
                              console.error(`Failed to clean up field ${fieldId}:`, error);
                            }
                          }, 10000); // Increase timeout to 10 seconds

                          it("fails with non-existent field ID", async () => {
                            const nonExistentFieldId = 999999; // Assuming this ID doesn’t exist
                            await expect(
                              client.getField({
                                fieldId: nonExistentFieldId,
                                tableId: QB_TABLE_ID_1,
                              })
                            ).rejects.toMatchObject({
                              message: expect.stringContaining(
                                "API Error: No such field (Status: 404)"
                              ),
                            });
                            console.log(
                              `Confirmed 404 for non-existent field ID ${nonExistentFieldId}`
                            );
                          });

                          it("fails with invalid table ID", async () => {
                            const invalidTableId = "invalid_dbid";
                            await expect(
                              client.getField({
                                fieldId: 1, // Arbitrary field ID
                                tableId: invalidTableId,
                              })
                            ).rejects.toMatchObject({
                              message: expect.stringContaining(
                                "API Error: Invalid request (Status: 400)"
                              ),
                            });
                            console.log(`Confirmed 400 for invalid table ID ${invalidTableId}`);
                          });
                        });
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/fields/getFieldUsage.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        afterAll
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "../../../setup.ts";

                        import
                        {
                        FieldUsage
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Integration
                        -
                        getFieldUsage",
                        ()
                        =>
                        {
                          const client = createClient();
                          const createdFieldIds: number[] = [];

                          afterAll(async () => {
                            if (createdFieldIds.length > 0) {
                              try {
                                const response = await client.deleteFields({
                                  tableId: QB_TABLE_ID_1,
                                  body: { fieldIds: createdFieldIds },
                                });
                                console.log(
                                  `Cleaned up fields: ${JSON.stringify(response.deletedFieldIds)}`,
                                  response.errors && response.errors.length > 0
                                    ? `Errors: ${response.errors}`
                                    : ""
                                );
                              } catch (error) {
                                console.error("Cleanup failed:", error);
                                console.log(`Fields left in table: ${createdFieldIds}`);
                              }
                            } else {
                              console.log("No fields to clean up.");
                            }
                          });

                          it(
                            "creates a field, retrieves its usage statistics, and deletes it",
                            async () => {
                              // Step 1: Create a field
                              const uniqueLabel = `TestField_${Date.now()}`;
                              console.log("Creating field with label:", uniqueLabel);
                              const createResponse = await client.createField({
                                tableId: QB_TABLE_ID_1,
                                body: {
                                  label: uniqueLabel,
                                  fieldType: "text",
                                  fieldHelp: "Created for getFieldUsage integration test",
                                  addToForms: true,
                                },
                              });

                              expect(createResponse.id).toBeDefined();
                              const fieldId = createResponse.id;
                              createdFieldIds.push(fieldId);
                              console.log(`Created field ${uniqueLabel} with ID ${fieldId}`);

                              // Brief delay to ensure field is registered
                              await new Promise((resolve) => setTimeout(resolve, 1000));

                              // Step 2: Get field usage with raw response logging
                              console.log("Fetching field usage for:", {
                                tableId: QB_TABLE_ID_1,
                                fieldId,
                              });
                              const rawResponse = await fetch(
                                `https://api.quickbase.com/v1/fields/usage/${fieldId}?tableId=${QB_TABLE_ID_1}`,
                                {
                                  method: "GET",
                                  headers: {
                                    "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                    Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                    "Content-Type": "application/json",
                                  },
                                }
                              );
                              const rawBody = await rawResponse.text();
                              console.log("Raw API response:", {
                                status: rawResponse.status,
                                statusText: rawResponse.statusText,
                                body: rawBody,
                              });

                              const responseArray: FieldUsage[] = await client.getFieldUsage({
                                fieldId,
                                tableId: QB_TABLE_ID_1,
                              });
                              console.log("Parsed API response (array):", responseArray);

                              // Validate response structure (unwrap the array)
                              expect(responseArray).toBeDefined();
                              expect(responseArray).toHaveLength(1); // Expect a single-item array
                              const response = responseArray[0];

                              expect(response).toBeDefined();
                              expect(response.field).toHaveProperty("id", fieldId);
                              expect(response.field).toHaveProperty("name", uniqueLabel);
                              expect(response.field).toHaveProperty("type", "text");
                              expect(typeof response.field.name).toBe("string");
                              expect(typeof response.field.type).toBe("string");

                              expect(response.usage).toBeDefined();
                              expect(typeof response.usage).toBe("object");
                              expect(response.usage).toHaveProperty("actions");
                              expect(response.usage.actions).toHaveProperty("count");
                              expect(typeof response.usage.actions.count).toBe("number");
                              expect(response.usage).toHaveProperty("appHomePages");
                              expect(response.usage).toHaveProperty("dashboards");
                              expect(response.usage).toHaveProperty("defaultReports");
                              expect(response.usage).toHaveProperty("exactForms");
                              expect(response.usage).toHaveProperty("fields");
                              expect(response.usage).toHaveProperty("forms");
                              expect(response.usage).toHaveProperty("notifications");
                              expect(response.usage).toHaveProperty("personalReports");
                              expect(response.usage).toHaveProperty("pipelines");
                              expect(response.usage).toHaveProperty("relationships");
                              expect(response.usage).toHaveProperty("reminders");
                              expect(response.usage).toHaveProperty("reports");
                              expect(response.usage).toHaveProperty("roles");
                              expect(response.usage).toHaveProperty("tableImports");
                              expect(response.usage).toHaveProperty("tableRules");
                              expect(response.usage).toHaveProperty("webhooks");

                              // Since it’s a new field, expect minimal usage
                              expect(response.usage.forms.count).toBeGreaterThanOrEqual(0); // May be 1 if addToForms worked
                            },
                            { timeout: 30000 } // 30-second timeout for create + get + delete
                          );

                          it("fails with non-existent field ID", { timeout: 15000 }, async () => {
                            const nonExistentFieldId = 999999;

                            console.log("Attempting to fetch usage for non-existent field:", {
                              tableId: QB_TABLE_ID_1,
                              fieldId: nonExistentFieldId,
                            });
                            await expect(
                              client.getFieldUsage({
                                fieldId: nonExistentFieldId,
                                tableId: QB_TABLE_ID_1,
                              })
                            ).rejects.toMatchObject({
                              message: expect.stringContaining(
                                "API Error: No such field (Status: 404)"
                              ),
                            });

                            console.log(
                              `Confirmed 404 for non-existent field ID ${nonExistentFieldId}`
                            );
                          });

                          it("fails with invalid table ID", { timeout: 15000 }, async () => {
                            const invalidTableId = "invalid_dbid";
                            const fieldId = 6;

                            console.log("Attempting to fetch usage with invalid table ID:", {
                              tableId: invalidTableId,
                              fieldId,
                            });
                            await expect(
                              client.getFieldUsage({
                                fieldId,
                                tableId: invalidTableId,
                              })
                            ).rejects.toMatchObject({
                              message: expect.stringContaining(
                                "API Error: Access denied (Status: 401)"
                              ),
                            });

                            console.log(`Confirmed 401 for invalid table ID ${invalidTableId}`);
                          });
                        });
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        describe,
                        it,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";


                        describe("QuickbaseClient
                        Integration
                        -
                        getFields",
                        ()
                        =>
                        {
                          const client = createClient();

                          it(
                            "fetches real field data from QuickBase",
                            async () => {
                              if (!process.env.QB_REALM)
                                throw new Error("QB_REALM is not defined in .env");
                              if (!process.env.QB_USER_TOKEN)
                                throw new Error("QB_USER_TOKEN is not defined in .env");

                              console.log("Config used:", {
                                realm: process.env.QB_REALM,
                                userToken: process.env.QB_USER_TOKEN,
                                tableId: QB_TABLE_ID_1,
                              });
                              const result = await client.getFields({
                                tableId: QB_TABLE_ID_1,
                                includeFieldPerms: true,
                              });
                              console.log("Real API response:", result);
                              expect(result).toEqual(
                                expect.arrayContaining([
                                  expect.objectContaining({
                                    id: 1,
                                    label: "Date Created",
                                    fieldType: "timestamp",
                                    noWrap: true,
                                    bold: false,
                                    required: false,
                                    appearsByDefault: false,
                                    findEnabled: false,
                                    unique: false,
                                    doesDataCopy: false,
                                    fieldHelp: "",
                                    audited: false,
                                    properties: expect.objectContaining({
                                      primaryKey: false,
                                      foreignKey: false,
                                      sortAsGiven: true,
                                      carryChoices: true,
                                      allowNewChoices: false,
                                      formula: "",
                                      defaultValue: "",
                                    }),
                                    permissions: expect.arrayContaining([
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Viewer",
                                        roleId: 10,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Participant",
                                        roleId: 11,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Administrator",
                                        roleId: 12,
                                      }),
                                    ]),
                                  }),
                                  expect.objectContaining({
                                    id: 2,
                                    label: "Date Modified",
                                    fieldType: "timestamp",
                                    noWrap: true,
                                    bold: false,
                                    required: false,
                                    appearsByDefault: false,
                                    findEnabled: false,
                                    unique: false,
                                    doesDataCopy: false,
                                    fieldHelp: "",
                                    audited: false,
                                    properties: expect.objectContaining({
                                      primaryKey: false,
                                      foreignKey: false,
                                      sortAsGiven: true,
                                      carryChoices: true,
                                      allowNewChoices: false,
                                      formula: "",
                                      defaultValue: "",
                                    }),
                                    permissions: expect.arrayContaining([
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Viewer",
                                        roleId: 10,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Participant",
                                        roleId: 11,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Administrator",
                                        roleId: 12,
                                      }),
                                    ]),
                                  }),
                                  expect.objectContaining({
                                    id: 3,
                                    label: "Record ID#",
                                    fieldType: "recordid",
                                    noWrap: true,
                                    bold: false,
                                    required: false,
                                    appearsByDefault: false,
                                    findEnabled: false,
                                    unique: true,
                                    doesDataCopy: false,
                                    fieldHelp: "",
                                    audited: false,
                                    properties: expect.objectContaining({
                                      primaryKey: true,
                                      foreignKey: false,
                                      sortAsGiven: true,
                                      carryChoices: true,
                                      allowNewChoices: false,
                                      formula: "",
                                      defaultValue: "",
                                    }),
                                    permissions: expect.arrayContaining([
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Viewer",
                                        roleId: 10,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Participant",
                                        roleId: 11,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Administrator",
                                        roleId: 12,
                                      }),
                                    ]),
                                  }),
                                  expect.objectContaining({
                                    id: 4,
                                    label: "Record Owner",
                                    fieldType: "user",
                                    noWrap: true,
                                    bold: false,
                                    required: false,
                                    appearsByDefault: false,
                                    findEnabled: true,
                                    unique: false,
                                    doesDataCopy: false,
                                    fieldHelp: "",
                                    audited: false,
                                    properties: expect.objectContaining({
                                      primaryKey: false,
                                      foreignKey: false,
                                      sortAsGiven: true,
                                      carryChoices: true,
                                      allowNewChoices: true,
                                      formula: "",
                                      defaultValue: "",
                                    }),
                                    permissions: expect.arrayContaining([
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Viewer",
                                        roleId: 10,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Participant",
                                        roleId: 11,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Administrator",
                                        roleId: 12,
                                      }),
                                    ]),
                                  }),
                                  expect.objectContaining({
                                    id: 5,
                                    label: "Last Modified By",
                                    fieldType: "user",
                                    noWrap: true,
                                    bold: false,
                                    required: false,
                                    appearsByDefault: false,
                                    findEnabled: true,
                                    unique: false,
                                    doesDataCopy: false,
                                    fieldHelp: "",
                                    audited: false,
                                    properties: expect.objectContaining({
                                      primaryKey: false,
                                      foreignKey: false,
                                      sortAsGiven: true,
                                      carryChoices: true,
                                      allowNewChoices: true,
                                      formula: "",
                                      defaultValue: "",
                                    }),
                                    permissions: expect.arrayContaining([
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Viewer",
                                        roleId: 10,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Participant",
                                        roleId: 11,
                                      }),
                                      expect.objectContaining({
                                        permissionType: "Modify",
                                        role: "Administrator",
                                        roleId: 12,
                                      }),
                                    ]),
                                  }),
                                ])
                              );
                            },
                            { timeout: 10000 }
                          );
                        });
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/fields/getFieldsUsage.test.ts

                        import
                        {
                        describe,
                        it,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";

                        import
                        {
                        FieldUsage
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Integration
                        -
                        getFieldsUsage",
                        ()
                        =>
                        {
                          const client = createClient();

                          it("retrieves field usage statistics for a valid table", async () => {
                            console.log("Starting retrieval of full field usage list");
                            const response = await client.getFieldsUsage({
                              tableId: QB_TABLE_ID_1,
                            });

                            expect(response).toBeInstanceOf(Array);
                            expect(response.length).toBeGreaterThan(0); // Assumes the table has fields
                            response.forEach((usage: FieldUsage) => {
                              expect(usage.field).toHaveProperty("id");
                              expect(usage.field).toHaveProperty("name");
                              expect(usage.field).toHaveProperty("type");
                              expect(usage.usage).toHaveProperty("actions");
                              expect(usage.usage.actions).toHaveProperty("count");
                              expect(typeof usage.usage.actions.count).toBe("number");
                              expect(usage.usage).toHaveProperty("dashboards");
                              expect(usage.usage).toHaveProperty("forms");
                              expect(usage.usage).toHaveProperty("reports");
                            });
                            console.log(
                              `Retrieved ${response.length} field usage entries for table ${QB_TABLE_ID_1}`
                            );
                          }, 15000); // 15-second timeout

                          it("retrieves field usage with skip and top parameters", async () => {
                            console.log(
                              "Starting retrieval of full field usage list for skip/top test"
                            );
                            const fullResponse = await client.getFieldsUsage({
                              tableId: QB_TABLE_ID_1,
                            });
                            console.log(`Full list retrieved: ${fullResponse.length} fields`);

                            const totalFields = fullResponse.length;
                            if (totalFields <= 1) {
                              console.log("Skipping skip/top test: table has too few fields");
                              return; // Skip if not enough fields to test pagination
                            }

                            console.log("Starting retrieval with skip=1 and top=1");
                            const response = await client.getFieldsUsage({
                              tableId: QB_TABLE_ID_1,
                              skip: 1,
                              top: 1,
                            });

                            expect(response).toBeInstanceOf(Array);
                            expect(response.length).toBe(1); // Should return exactly 1 field
                            expect(response[0].field.id).not.toBe(fullResponse[0].field.id); // Should skip the first field
                            console.log(
                              `Retrieved ${response.length} field usage entries with skip=1 and top=1`
                            );
                          }, 15000); // 15-second timeout

                          it("fails with invalid table ID", async () => {
                            const invalidTableId = "invalid_dbid";
                            console.log(`Starting retrieval with invalid table ID ${invalidTableId}`);
                            await expect(
                              client.getFieldsUsage({
                                tableId: invalidTableId,
                              })
                            ).rejects.toMatchObject({
                              message: expect.stringContaining(
                                "API Error: Access denied (Status: 401)"
                              ),
                            });
                            console.log(`Confirmed 401 for invalid table ID ${invalidTableId}`);
                          }, 15000); // 15-second timeout
                        });
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/fields/updateField.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeAll,
                        afterAll
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";


                        describe("QuickbaseClient
                        Integration
                        -
                        updateField",
                        ()
                        =>
                        {
                          const client = createClient();
                          let fieldIdToUpdate: number;

                          // Setup: Create a test field to update
                          beforeAll(async () => {
                            try {
                              const response = await client.createField({
                                tableId: QB_TABLE_ID_1,
                                body: {
                                  label: "UpdateTestField",
                                  fieldType: "text",
                                  fieldHelp: "Test field for updating",
                                },
                              });
                              fieldIdToUpdate = response.id;
                              console.log(`Created field UpdateTestField with ID ${fieldIdToUpdate}`);
                            } catch (error) {
                              console.error("beforeAll failed:", error);
                              throw error; // Fail the suite if setup fails
                            }
                          });

                          // Teardown: Delete the test field
                          afterAll(async () => {
                            try {
                              if (fieldIdToUpdate) {
                                const response = await client.deleteFields({
                                  tableId: QB_TABLE_ID_1,
                                  body: { fieldIds: [fieldIdToUpdate] },
                                });
                                console.log(
                                  `Deleted field ${fieldIdToUpdate}:`,
                                  JSON.stringify(response, null, 2)
                                );
                              }
                            } catch (error) {
                              console.error("afterAll cleanup failed:", error);
                              // Don’t throw here to avoid masking test results
                            }
                          });

                          it(
                            "updates a field successfully with user token",
                            { timeout: 10000 },
                            async () => {
                              try {
                                const updatedLabel = "UpdatedTestField";
                                console.log("Sending updateField request at:", new Date());
                                const response = await client.updateField({
                                  tableId: QB_TABLE_ID_1,
                                  fieldId: fieldIdToUpdate,
                                  body: {
                                    label: updatedLabel,
                                    fieldHelp: "Updated help text",
                                  },
                                });
                                console.log("updateField response received at:", new Date());
                                console.log("Response:", JSON.stringify(response, null, 2));

                                // Verify the update was successful
                                expect(response).toBeDefined();
                                expect(response.id).toBe(fieldIdToUpdate);
                                expect(response.label).toBe(updatedLabel);
                                expect(response.fieldHelp).toBe("Updated help text");
                              } catch (error) {
                                console.error("updateField failed:", error);
                                throw error; // Re-throw to fail the test with details
                              }
                            }
                          );

                          it("fails with invalid field ID", { timeout: 10000 }, async () => {
                            try {
                              await expect(
                                client.updateField({
                                  tableId: QB_TABLE_ID_1,
                                  fieldId: 999999, // Invalid field ID
                                  body: {
                                    label: "InvalidUpdate",
                                  },
                                })
                              ).rejects.toThrow("API Error: Item not found (Status: 404)"); // Updated to match actual error
                            } catch (error) {
                              console.error("updateField with invalid ID failed unexpectedly:", error);
                              throw error;
                            }
                          });
                        });
                - name: >-
                    index.ts
                  type: >-
                    file
                  contents: >
                    //
                    tests/vitest/qb/index.ts


                    //
                    Apps

                    export
                    *
                    from
                    "./apps/copyApp.test.ts";

                    export
                    *
                    from
                    "./apps/createApp.test.ts";

                    export
                    *
                    from
                    "./apps/deleteApp.test.ts";

                    export
                    *
                    from
                    "./apps/getApp.test.ts";


                    //
                    Fields

                    export
                    *
                    from
                    "./fields/createField.test.ts";

                    export
                    *
                    from
                    "./fields/deleteFields.test.ts";

                    export
                    *
                    from
                    "./fields/getFields.test.ts";

                    export
                    *
                    from
                    "./fields/getField.test.ts";
                    //
                    Added
                    new
                    getField
                    test

                    export
                    *
                    from
                    "./fields/getFieldsUsage.test.ts";

                    export
                    *
                    from
                    "./fields/getFieldUsage.test.ts";


                    //
                    Records

                    export
                    *
                    from
                    "./records/deleteRecords.test.ts";

                    export
                    *
                    from
                    "./records/runQuery.test.ts";

                    export
                    *
                    from
                    "./records/upsert.test.ts";


                    //
                    Tables

                    export
                    *
                    from
                    "./tables/createTable.test.ts";

                    export
                    *
                    from
                    "./tables/deleteTable.test.ts";

                    export
                    *
                    from
                    "./tables/getAppTables.test.ts";

                    export
                    *
                    from
                    "./tables/getRelationships.test.ts";

                    export
                    *
                    from
                    "./tables/getTable.test.ts";

                    export
                    *
                    from
                    "./tables/updateTable.test.ts";

                    export
                    *
                    from
                    "./tables/updateRelationship.test.ts";
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/records/deleteRecords.test.ts

                        import
                        {
                        describe,
                        test,
                        expect,
                        beforeEach,
                        afterEach
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "@/quickbaseClient.ts";

                        import
                        {
                          Upsert200Response,
                          Upsert207Response,
                        }
                        from
                        "/home/drew/Projects/quickbase-js/src/generated/models";


                        const
                        TABLE_ID
                        =
                        "buwai2zws";

                        const
                        UNIQUE_FIELD_ID
                        =
                        3;
                        //
                        Record
                        ID
                        field

                        const
                        MARKER_FIELD_ID
                        =
                        6;
                        //
                        Text
                        field
                        for
                        marking
                        test
                        records


                        describe("QuickbaseClient
                        -
                        DeleteRecords
                        Integration",
                        ()
                        =>
                        {
                          const qb = quickbase({
                            realm: "builderprogram-dbradford6815",
                            userToken: process.env.QB_USER_TOKEN,
                            debug: true,
                          });

                          beforeEach(async () => {
                            try {
                              await qb.deleteRecords({
                                body: {
                                  from: TABLE_ID,
                                  where: `{${MARKER_FIELD_ID}.CT.'test-marker-delete'}`,
                                },
                              });
                            } catch (e) {
                              // Ignore if no records exist
                            }
                          });

                          afterEach(async () => {
                            try {
                              await qb.deleteRecords({
                                body: {
                                  from: TABLE_ID,
                                  where: `{${MARKER_FIELD_ID}.CT.'test-marker-delete'}`,
                                },
                              });
                            } catch (e) {}
                          });

                          test(
                            "deletes a newly upserted record",
                            async () => {
                              const upsertResponse: Upsert200Response | Upsert207Response =
                                await qb.upsert({
                                  body: {
                                    to: TABLE_ID,
                                    data: [{ [MARKER_FIELD_ID]: { value: "test-marker-delete" } }],
                                    fieldsToReturn: [UNIQUE_FIELD_ID], // Return record ID
                                  },
                                });

                              // Check metadata and createdRecordIds
                              expect(
                                upsertResponse.metadata,
                                "Expected metadata to be defined"
                              ).toBeDefined();
                              expect(
                                upsertResponse.metadata?.createdRecordIds,
                                "Expected createdRecordIds to be defined"
                              ).toBeDefined();

                              const createdRecordIds = upsertResponse.metadata?.createdRecordIds;
                              if (!createdRecordIds || createdRecordIds.length === 0) {
                                throw new Error("Expected at least one created record ID");
                              }

                              const recordId = createdRecordIds[0];
                              expect(recordId, "Expected recordId to be defined").toBeDefined();

                              // Check data
                              expect(upsertResponse.data, "Expected data to be defined").toBeDefined();
                              if (!upsertResponse.data || upsertResponse.data.length === 0) {
                                throw new Error("Expected at least one data entry");
                              }

                              const recordData = upsertResponse.data[0];
                              expect(
                                recordData[UNIQUE_FIELD_ID]?.value,
                                "Expected record ID in data to match created record ID"
                              ).toBe(recordId);

                              const deleteResponse = await qb.deleteRecords({
                                body: { from: TABLE_ID, where: `{${UNIQUE_FIELD_ID}.EX.${recordId}}` },
                              });

                              expect(deleteResponse).toEqual({ numberDeleted: 1 });

                              const checkResponse = await qb.deleteRecords({
                                body: { from: TABLE_ID, where: `{${UNIQUE_FIELD_ID}.EX.${recordId}}` },
                              });
                              expect(checkResponse.numberDeleted).toBe(0);
                            },
                            { timeout: 10000 }
                          );

                          test(
                            "handles empty result when no records match",
                            async () => {
                              const response = await qb.deleteRecords({
                                body: { from: TABLE_ID, where: "{3.EX.'999999'}" },
                              });
                              expect(response).toEqual({ numberDeleted: 0 });
                            },
                            { timeout: 10000 }
                          );
                        });
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/records/runQuery.test.ts

                        import
                        {
                        describe,
                        it,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        QB_TABLE_ID_1
                        }
                        from
                        "../../../setup.ts";

                        import
                        {
                          RunQueryRequest,
                          RunQueryResponse,
                          Upsert200Response,
                          Upsert207Response,
                        }
                        from
                        "@/generated/models";


                        //
                        Define
                        a
                        type
                        for
                        field
                        data
                        with
                        a
                        value
                        property
                        (matches
                        generated
                        Record
                        type)

                        interface
                        FieldData
                        {
                          value: any; // Adjust type based on your needs (e.g., string | number)
                        }


                        describe("QuickbaseClient
                        Integration
                        -
                        runQuery",
                        ()
                        =>
                        {
                          let createdRecordId: number;

                          it(
                            "queries real records from QuickBase",
                            async () => {
                              const client = createClient();

                              // Upsert a test record to query later
                              const upsertResponse: Upsert200Response | Upsert207Response =
                                await client.upsert({
                                  body: {
                                    to: QB_TABLE_ID_1,
                                    data: [
                                      {
                                        "6": { value: "Test Task " + Date.now() }, // Assuming field 6 is a text field
                                      },
                                    ],
                                    fieldsToReturn: [3, 6], // Record ID# and the text field
                                  },
                                });

                              // Check metadata and createdRecordIds with null safety
                              expect(
                                upsertResponse.metadata,
                                "Expected metadata to be defined"
                              ).toBeDefined();
                              expect(
                                upsertResponse.metadata?.createdRecordIds,
                                "Expected createdRecordIds to be defined"
                              ).toBeDefined();

                              const createdRecordIds = upsertResponse.metadata?.createdRecordIds;
                              if (!createdRecordIds || createdRecordIds.length === 0) {
                                throw new Error("Expected at least one created record ID from upsert");
                              }

                              createdRecordId = createdRecordIds[0];
                              expect(
                                createdRecordId,
                                "Expected createdRecordId to be defined"
                              ).toBeDefined();
                              console.log("Created test record with ID:", createdRecordId);

                              // Query the record
                              const queryRequest: RunQueryRequest = {
                                from: QB_TABLE_ID_1,
                                select: [3, 6], // Query Record ID# and the text field
                                where: `{3.EX.${createdRecordId}}`, // Filter by the created record
                                sortBy: [{ fieldId: 6, order: "ASC" }],
                                options: { skip: 0, top: 1 },
                              };

                              console.log("Config used:", {
                                realm: process.env.QB_REALM,
                                userToken: process.env.QB_USER_TOKEN,
                                tableId: QB_TABLE_ID_1,
                              });
                              console.log("Query request:", queryRequest);
                              const response: RunQueryResponse = await client.runQuery({
                                body: queryRequest,
                              });
                              console.log("Real API response:", response);

                              // Assertions with safety checks and type assertion
                              expect(
                                response.data,
                                "Expected response.data to be defined"
                              ).toBeDefined();
                              if (!response.data || response.data.length === 0) {
                                throw new Error(
                                  "Expected response.data to contain at least one record"
                                );
                              }

                              expect(response.data).toHaveLength(1);
                              const record = response.data[0] as { [key: string]: FieldData };
                              expect(
                                record["3"]?.value,
                                "Expected field 3 to match createdRecordId"
                              ).toBe(createdRecordId);
                              expect(
                                record["6"]?.value,
                                "Expected field 6 to contain 'Test Task'"
                              ).toContain("Test Task");

                              expect(
                                response.fields,
                                "Expected response.fields to be defined"
                              ).toBeDefined();
                              if (!response.fields) {
                                throw new Error("Expected response.fields to contain field metadata");
                              }
                              expect(response.fields).toContainEqual({
                                id: 3,
                                label: expect.any(String),
                                type: expect.any(String),
                              });
                              expect(response.fields).toContainEqual({
                                id: 6,
                                label: expect.any(String),
                                type: expect.any(String),
                              });

                              expect(
                                response.metadata,
                                "Expected response.metadata to be defined"
                              ).toBeDefined();
                              if (!response.metadata) {
                                throw new Error("Expected response.metadata to be present");
                              }
                              expect(response.metadata).toMatchObject({
                                numFields: 2,
                                numRecords: 1,
                                skip: 0,
                                top: 1,
                                totalRecords: expect.any(Number),
                              });

                              // Cleanup: Delete the test record
                              await client.deleteRecords({
                                body: {
                                  from: QB_TABLE_ID_1,
                                  where: `{3.EX.${createdRecordId}}`, // Assuming field 3 is Record ID#
                                },
                              });
                              console.log("Cleaned up test record with ID:", createdRecordId);
                            },
                            { timeout: 10000 }
                          );
                        });
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/records/upsert.test.ts

                        import
                        {
                        describe,
                        test,
                        expect,
                        beforeEach,
                        afterEach
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "@/quickbaseClient.ts";

                        import
                        {
                          Upsert200Response,
                          Upsert207Response,
                        }
                        from
                        "/home/drew/Projects/quickbase-js/src/generated/models";


                        const
                        TABLE_ID
                        =
                        "buwai2zws";

                        const
                        MARKER_FIELD_ID
                        =
                        6;
                        //
                        Text
                        field
                        for
                        marking
                        test
                        records


                        describe("QuickbaseClient
                        -
                        Upsert
                        Integration",
                        ()
                        =>
                        {
                          const qb = quickbase({
                            realm: "builderprogram-dbradford6815",
                            userToken: process.env.QB_USER_TOKEN,
                            debug: true,
                          });

                          beforeEach(async () => {
                            try {
                              await qb.deleteRecords({
                                body: {
                                  from: TABLE_ID,
                                  where: `{${MARKER_FIELD_ID}.CT.'test-marker-upsert'}`,
                                },
                              });
                            } catch (e) {
                              // Ignore if no records exist
                            }
                          });

                          afterEach(async () => {
                            try {
                              await qb.deleteRecords({
                                body: {
                                  from: TABLE_ID,
                                  where: `{${MARKER_FIELD_ID}.CT.'test-marker-upsert'}`,
                                },
                              });
                            } catch (e) {}
                          });

                          test(
                            "creates a new record successfully",
                            async () => {
                              const response: Upsert200Response | Upsert207Response = await qb.upsert({
                                body: {
                                  to: TABLE_ID,
                                  data: [{ [MARKER_FIELD_ID]: { value: "test-marker-upsert" } }],
                                  fieldsToReturn: [MARKER_FIELD_ID, 3], // Return marker and record ID
                                },
                              });

                              // Check metadata with null safety
                              expect(
                                response.metadata,
                                "Expected metadata to be defined"
                              ).toBeDefined();
                              if (!response.metadata) {
                                throw new Error("Expected metadata to be present in upsert response");
                              }

                              expect(
                                response.metadata.createdRecordIds,
                                "Expected createdRecordIds to be defined"
                              ).toBeDefined();
                              if (!response.metadata.createdRecordIds) {
                                throw new Error(
                                  "Expected createdRecordIds to be present in upsert response"
                                );
                              }
                              expect(response.metadata.createdRecordIds.length).toBe(1);

                              // Check data with null safety
                              expect(response.data, "Expected data to be defined").toBeDefined();
                              if (!response.data || response.data.length === 0) {
                                throw new Error("Expected at least one record in data");
                              }
                              expect(response.data).toHaveLength(1);
                              expect(response.data[0][MARKER_FIELD_ID]?.value).toBe(
                                "test-marker-upsert"
                              );
                              expect(response.data[0][3]?.value).toBeDefined(); // Record ID assigned by QuickBase

                              // Check totalNumberOfRecordsProcessed
                              expect(response.metadata.totalNumberOfRecordsProcessed).toBe(1);
                            },
                            { timeout: 10000 }
                          );

                          test(
                            "handles empty data gracefully",
                            async () => {
                              await expect(
                                qb.upsert({
                                  body: { to: TABLE_ID, data: [] },
                                })
                              ).rejects.toThrow("API Error: Bad Request (Status: 400)");
                            },
                            { timeout: 10000 }
                          );
                        });
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - createTable > creates a new table in QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const appId = "buwai2zpe";

                            const tableName = `TestTable_${Date.now()}`;
                            const createBody = {
                              name: tableName,
                              description: "Test table creation",
                              singleRecordName: "TestRecord",
                              pluralRecordName: "TestRecords",
                            };

                            console.log("Config used:", config);
                            console.log("Creating table with:", createBody);
                            const response = await client.createTable({ appId, body: createBody });

                            expect(response).toBeDefined();
                            expect(response.id).toBeDefined();
                            expect(response.name).toBe(tableName);
                            expect(response.description).toBe(createBody.description);
                            expect(response.singleRecordName).toBe(createBody.singleRecordName);
                            expect(response.pluralRecordName).toBe(createBody.pluralRecordName);
                            expect(response.alias).toMatch(/^_DBID_/);
                            expect(response.created).toBeInstanceOf(Date);
                            expect(response.updated).toBeInstanceOf(Date);
                            expect(response.nextRecordId).toBeGreaterThanOrEqual(1);
                            expect(response.nextFieldId).toBeGreaterThanOrEqual(1);
                            expect(response.defaultSortFieldId).toBeGreaterThanOrEqual(0);
                            expect(response.keyFieldId).toBeGreaterThanOrEqual(1);
                            expect(response.sizeLimit).toMatch(/^\d+\sMB$/); // e.g., "500 MB"
                            expect(response.spaceUsed).toMatch(/^\d+\s(KB|MB)$/); // e.g., "0 KB"
                            expect(response.spaceRemaining).toMatch(/^\d+\sMB$/); // e.g., "500 MB"

                            console.log("Real API response:", response);

                            // Cleanup: Delete the table to avoid clutter
                            const deleteResponse = await client.deleteTable({
                              tableId: response.id,
                              appId,
                            });
                            expect(deleteResponse.deletedTableId).toBe(response.id);
                            console.log("Cleanup - Deleted table:", deleteResponse);
                          }
                        );
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - deleteTable > deletes a table in QuickBase",
                          { timeout: 20000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const appId = "buwai2zpe";

                            // Step 1: Create a temporary table to delete
                            const tableName = `DeleteTest_${Date.now()}`;
                            const createBody = {
                              name: tableName,
                              description: "Temporary table for delete test",
                              singleRecordName: "DeleteTest",
                              pluralRecordName: "DeleteTests",
                            };
                            console.log("Creating temporary table with:", createBody);
                            const createResponse = await client.createTable({
                              appId,
                              body: createBody,
                            });
                            expect(createResponse.id).toBeDefined();
                            expect(createResponse.name).toBe(tableName);
                            console.log("Created table:", createResponse);
                            const tableId = createResponse.id;

                            // Step 2: Delete the table
                            console.log("Deleting table:", { tableId, appId });
                            const deleteResponse = await client.deleteTable({ tableId, appId });
                            expect(deleteResponse).toBeDefined();
                            expect(deleteResponse.deletedTableId).toBe(tableId);
                            console.log("Delete API response:", deleteResponse);

                            // Step 3: Verify the table is gone
                            try {
                              await client.getTable({ tableId, appId });
                              throw new Error("Table should not exist after deletion");
                            } catch (error) {
                              expect(error.message).toMatch(/404|not found/i); // Expect a 404 error
                              console.log("Verified table deletion:", error.message);
                            }
                          }
                        );
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - getAppTables > fetches real table data from QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const tablesAppId = "buwai2zpe";

                            console.log("Config used:", config);
                            const result = await client.getAppTables({ appId: tablesAppId });
                            console.log("Real API response:", result);

                            expect(result).toBeDefined();
                            expect(result).toBeInstanceOf(Array);
                            expect(result.length).toBeGreaterThan(0);
                            expect(result).toEqual(
                              expect.arrayContaining([
                                expect.objectContaining({
                                  id: "buwai2zr4",
                                  alias: "_DBID_ROOT",
                                  name: expect.any(String), // Allow dynamic name due to updateTable
                                  description: expect.any(String), // Allow dynamic description
                                  created: expect.any(Date),
                                  updated: expect.any(Date), // Allow varying timestamps
                                  nextRecordId: expect.any(Number),
                                  nextFieldId: expect.any(Number),
                                  defaultSortFieldId: expect.any(Number),
                                  defaultSortOrder: "DESC",
                                  keyFieldId: expect.any(Number),
                                  singleRecordName: "Root",
                                  pluralRecordName: "Roots",
                                  sizeLimit: "500 MB",
                                  spaceUsed: expect.any(String),
                                  spaceRemaining: "500 MB",
                                }),
                              ])
                            );
                          }
                        );
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/qb/tables/getRelationships.test.ts

                        import
                        {
                        describe,
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "/home/drew/Projects/quickbase-js/src/quickbaseClient.ts";

                        import
                        {
                        QB_TABLE_ID_1
                        }
                        from
                        "/home/drew/Projects/quickbase-js/tests/setup.ts";

                        import
                        {
                        GetRelationships200Response
                        }
                        from
                        "/home/drew/Projects/quickbase-js/src/generated/models";


                        describe("QuickbaseClient
                        Integration
                        -
                        getRelationships",
                        ()
                        =>
                        {
                          const qb = quickbase({
                            realm: process.env.QB_REALM || "builderprogram-dbradford6815",
                            userToken: process.env.QB_USER_TOKEN || "",
                            debug: true,
                          });

                          test("fetches real relationships from QuickBase", async () => {
                            // Ensure environment variables are set
                            if (!process.env.QB_REALM)
                              throw new Error("QB_REALM is not defined in .env");
                            if (!process.env.QB_USER_TOKEN)
                              throw new Error("QB_USER_TOKEN is not defined in .env");

                            console.log("Config used:", {
                              realm: process.env.QB_REALM,
                              userToken: process.env.QB_USER_TOKEN,
                              tableId: QB_TABLE_ID_1,
                            });

                            const response: GetRelationships200Response = await qb.getRelationships({
                              tableId: QB_TABLE_ID_1, // Query relationships for QB_TABLE_ID_1 (e.g., "buwai2zws")
                              skip: 0,
                            });

                            console.log("Real API response:", JSON.stringify(response, null, 2));

                            // Basic structure validation
                            expect(response).toBeDefined();
                            expect(response.metadata).toBeDefined();
                            expect(response.metadata).toHaveProperty(
                              "numRelationships",
                              expect.any(Number)
                            );
                            expect(response.metadata).toHaveProperty("skip", 0);
                            expect(response.metadata).toHaveProperty(
                              "totalRelationships",
                              expect.any(Number)
                            );
                            expect(response.relationships).toBeDefined();
                            expect(Array.isArray(response.relationships)).toBe(true);

                            // If relationships exist, validate the first one
                            if (response.relationships.length > 0) {
                              const relationship = response.relationships[0];
                              expect(relationship).toHaveProperty("id", expect.any(Number));
                              expect(relationship).toHaveProperty("parentTableId", expect.any(String));
                              expect(relationship).toHaveProperty("childTableId", QB_TABLE_ID_1);
                              expect(relationship).toHaveProperty("foreignKeyField");
                              expect(relationship.foreignKeyField).toHaveProperty(
                                "id",
                                expect.any(Number)
                              );
                              expect(relationship.foreignKeyField).toHaveProperty(
                                "label",
                                expect.any(String)
                              );
                              expect(relationship.foreignKeyField).toHaveProperty(
                                "type",
                                expect.any(String)
                              );
                              expect(relationship).toHaveProperty("isCrossApp", expect.any(Boolean));
                              expect(relationship).toHaveProperty("lookupFields", expect.any(Array));

                              // summaryFields is optional; only validate if present
                              if (
                                "summaryFields" in relationship &&
                                relationship.summaryFields !== undefined
                              ) {
                                expect(Array.isArray(relationship.summaryFields)).toBe(true);
                              }
                            }
                          }, 10000); // Timeout as second argument
                        });
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - getTable > fetches real table data from QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const tableId = "buwai2zr4";
                            const appId = "buwai2zpe";

                            console.log("Config used:", config);
                            const response = await client.getTable({ tableId, appId });
                            expect(response).toBeDefined();
                            expect(response.id).toBe(tableId);
                            expect(response.name).toBe("Root"); // Expect original name
                            expect(response.alias).toBe("_DBID_ROOT");
                            expect(response.created).toBeInstanceOf(Date);
                            console.log("Real API response:", response);
                          }
                        );
                    - name: >-
                        updateRelationship.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeAll,
                        afterAll,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                          QB_TABLE_ID_2,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                          UpdateRelationshipRequest,
                          CreateFieldRequest,
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Integration
                        -
                        updateRelationship",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;
                          let relationshipId: number;
                          let newLookupFieldId: number | undefined;
                          let newChildFieldId: number | undefined;
                          let generatedLookupFieldId: number | undefined;
                          let generatedSummaryFieldId: number | undefined;

                          beforeAll(async () => {
                            client = createClient(fetch, {
                              realm: QB_REALM,
                              userToken: QB_USER_TOKEN,
                              debug: true,
                            });

                            if (!QB_REALM) throw new Error("QB_REALM is not defined in .env");
                            if (!QB_USER_TOKEN) throw new Error("QB_USER_TOKEN is not defined in .env");

                            const relationshipsResponse = await client.getRelationships({
                              tableId: QB_TABLE_ID_2,
                              skip: 0,
                            });
                            console.log(
                              "Initial relationships response:",
                              JSON.stringify(relationshipsResponse, null, 2)
                            );
                            const relationship = relationshipsResponse.relationships.find(
                              (r) => r.parentTableId === QB_TABLE_ID_1
                            );
                            if (!relationship) {
                              throw new Error(
                                `No relationship found between parent ${QB_TABLE_ID_1} and child ${QB_TABLE_ID_2}`
                              );
                            }
                            relationshipId = relationship.id;
                            console.log(`Identified relationshipId: ${relationshipId}`);

                            const lookupFieldRequest: CreateFieldRequest = {
                              label: `Test Lookup Field_${Date.now()}`,
                              fieldType: "text",
                            };
                            const lookupResponse = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: lookupFieldRequest,
                            });
                            newLookupFieldId = lookupResponse.id;
                            if (!newLookupFieldId) {
                              throw new Error("Failed to retrieve ID for newly created lookup field");
                            }
                            console.log(
                              `Created lookup field with ID ${newLookupFieldId} in parent table ${QB_TABLE_ID_1}`
                            );

                            const childFieldRequest: CreateFieldRequest = {
                              label: `Test Child Numeric_${Date.now()}`,
                              fieldType: "numeric",
                            };
                            const childResponse = await client.createField({
                              tableId: QB_TABLE_ID_2,
                              body: childFieldRequest,
                            });
                            newChildFieldId = childResponse.id;
                            if (!newChildFieldId) {
                              throw new Error("Failed to retrieve ID for newly created child field");
                            }
                            console.log(
                              `Created child field with ID ${newChildFieldId} in child table ${QB_TABLE_ID_2}`
                            );

                            console.log(
                              `Setup complete: relationshipId=${relationshipId}, lookupFieldId=${newLookupFieldId}, childFieldId=${newChildFieldId}`
                            );
                          }, 30000);

                          afterAll(async () => {
                            if (newLookupFieldId) {
                              try {
                                const deleteLookupResponse = await client.deleteFields({
                                  tableId: QB_TABLE_ID_1,
                                  body: { fieldIds: [newLookupFieldId] },
                                });
                                console.log(
                                  `Deleted original lookup field ${newLookupFieldId} from ${QB_TABLE_ID_1}:`,
                                  JSON.stringify(deleteLookupResponse, null, 2)
                                );
                              } catch (error) {
                                console.error(
                                  `Failed to delete original lookup field ${newLookupFieldId}:`,
                                  error
                                );
                                throw error;
                              }
                            }
                            if (newChildFieldId) {
                              try {
                                const deleteChildResponse = await client.deleteFields({
                                  tableId: QB_TABLE_ID_2,
                                  body: { fieldIds: [newChildFieldId] },
                                });
                                console.log(
                                  `Deleted original child field ${newChildFieldId} from ${QB_TABLE_ID_2}:`,
                                  JSON.stringify(deleteChildResponse, null, 2)
                                );
                              } catch (error) {
                                console.error(
                                  `Failed to delete original child field ${newChildFieldId}:`,
                                  error
                                );
                                throw error;
                              }
                            }
                            if (generatedLookupFieldId) {
                              try {
                                const deleteGeneratedLookupResponse = await client.deleteFields({
                                  tableId: QB_TABLE_ID_2,
                                  body: { fieldIds: [generatedLookupFieldId] },
                                });
                                console.log(
                                  `Deleted generated lookup field ${generatedLookupFieldId} from ${QB_TABLE_ID_2}:`,
                                  JSON.stringify(deleteGeneratedLookupResponse, null, 2)
                                );
                              } catch (error) {
                                console.error(
                                  `Failed to delete generated lookup field ${generatedLookupFieldId}:`,
                                  error
                                );
                                throw error;
                              }
                            }
                            if (generatedSummaryFieldId) {
                              try {
                                const deleteGeneratedSummaryResponse = await client.deleteFields({
                                  tableId: QB_TABLE_ID_1,
                                  body: { fieldIds: [generatedSummaryFieldId] },
                                });
                                console.log(
                                  `Deleted generated summary field ${generatedSummaryFieldId} from ${QB_TABLE_ID_1}:`,
                                  JSON.stringify(deleteGeneratedSummaryResponse, null, 2)
                                );
                              } catch (error) {
                                console.error(
                                  `Failed to delete generated summary field ${generatedSummaryFieldId}:`,
                                  error
                                );
                                throw error;
                              }
                            }
                          }, 30000);

                          beforeEach(async () => {
                            const relationshipsResponse = await client.getRelationships({
                              tableId: QB_TABLE_ID_2,
                            });
                            const relationship = relationshipsResponse.relationships.find(
                              (r) => r.id === relationshipId
                            );
                            if (!relationship) {
                              throw new Error(`Relationship ${relationshipId} not found before test`);
                            }
                            console.log(
                              "Relationship state before test:",
                              JSON.stringify(relationship, null, 2)
                            );
                          }, 30000);

                          it("adds a lookup field to the relationship", async ({ expect }) => {
                            const tableId = QB_TABLE_ID_2;
                            const initialResponse = await client.getRelationships({ tableId });
                            const initialRelationship = initialResponse.relationships.find(
                              (r) => r.id === relationshipId
                            );
                            const currentLookupFields = (initialRelationship?.lookupFields || []).map(
                              (f) => f.id
                            );
                            console.log("Current lookupFields before update:", currentLookupFields);

                            const request: UpdateRelationshipRequest = {
                              lookupFieldIds: [newLookupFieldId!],
                            };
                            console.log(
                              "Adding lookup field request:",
                              JSON.stringify(request, null, 2)
                            );

                            const updateResponse = await client.updateRelationship({
                              tableId,
                              relationshipId,
                              body: request,
                            });
                            console.log("Update response:", JSON.stringify(updateResponse, null, 2));

                            const newLookup = updateResponse.lookupFields.find(
                              (f) =>
                                f.label.includes("Test Lookup Field") &&
                                !currentLookupFields.includes(f.id)
                            );
                            generatedLookupFieldId = newLookup?.id;
                            console.log(
                              `Captured generated lookup field ID: ${generatedLookupFieldId}`
                            );

                            expect(updateResponse.id).toBe(relationshipId);
                            expect(updateResponse.childTableId).toBe(QB_TABLE_ID_2);
                            expect(updateResponse.parentTableId).toBe(QB_TABLE_ID_1);
                            expect(
                              updateResponse.lookupFields.some((f) =>
                                f.label.includes("Test Lookup Field")
                              )
                            ).toBe(true);
                            expect(updateResponse.lookupFields.some((f) => f.id === 19)).toBe(true);
                          }, 30000);

                          it("adds a summary field to the parent table", async ({ expect }) => {
                            const tableId = QB_TABLE_ID_2;
                            const initialResponse = await client.getRelationships({ tableId });
                            const initialRelationship = initialResponse.relationships.find(
                              (r) => r.id === relationshipId
                            );
                            const currentSummaryFields = (initialRelationship?.summaryFields || []).map(
                              (f) => f.id
                            );
                            console.log("Current summaryFields before update:", currentSummaryFields);

                            const request: UpdateRelationshipRequest = {
                              summaryFields: [
                                {
                                  summaryFid: newChildFieldId!,
                                  label: "Test Summary Field",
                                  accumulationType: "SUM",
                                },
                              ],
                            };
                            console.log(
                              "Adding summary field request:",
                              JSON.stringify(request, null, 2)
                            );

                            const updateResponse = await client.updateRelationship({
                              tableId,
                              relationshipId,
                              body: request,
                            });
                            console.log("Update response:", JSON.stringify(updateResponse, null, 2));

                            const newSummary = updateResponse.summaryFields.find(
                              (f) =>
                                f.label.includes("Test Summary Field") &&
                                !currentSummaryFields.includes(f.id)
                            );
                            generatedSummaryFieldId = newSummary?.id;
                            console.log(
                              `Captured generated summary field ID: ${generatedSummaryFieldId}`
                            );

                            expect(updateResponse.id).toBe(relationshipId);
                            expect(updateResponse.childTableId).toBe(QB_TABLE_ID_2);
                            expect(updateResponse.parentTableId).toBe(QB_TABLE_ID_1);
                            expect(
                              updateResponse.summaryFields.some((f) =>
                                f.label.includes("Test Summary Field")
                              )
                            ).toBe(true);
                          }, 30000);
                        });
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        test,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                        quickbase
                        }
                        from
                        "../../../../src/quickbaseClient";


                        test(
                          "QuickbaseClient Integration - updateTable > updates real table data in QuickBase",
                          { timeout: 10000 },
                          async () => {
                            const config = {
                              realm: process.env.QB_REALM || "",
                              userToken: process.env.QB_USER_TOKEN || "",
                              debug: true,
                            };
                            const client = quickbase(config);
                            const appId = "buwai2zpe";
                            const tableId = "buwai2zr4";
                            const updatedBody = {
                              name: "Root Updated " + Date.now(),
                              description: "Integration test update",
                            };
                            const originalBody = {
                              name: "Root",
                              description: "",
                            };

                            console.log("Config used:", config);
                            // Update the table
                            const response = await client.updateTable({
                              tableId,
                              appId,
                              body: updatedBody,
                            });
                            expect(response).toBeDefined();
                            expect(response.id).toBe(tableId);
                            expect(response.name).toBe(updatedBody.name);
                            expect(response.description).toBe(updatedBody.description);
                            console.log("Real API response:", response);

                            // Cleanup: Revert the table to original state
                            const cleanupResponse = await client.updateTable({
                              tableId,
                              appId,
                              body: originalBody,
                            });
                            expect(cleanupResponse.name).toBe(originalBody.name);
                            expect(cleanupResponse.description).toBe(originalBody.description);
                            console.log("Cleanup API response:", cleanupResponse);
                          }
                        );
            - name: >-
                unit
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        retryTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        retryTempTokenTwo401.test.ts
                      type: >-
                        file
                    - name: >-
                        retryUserToken401.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    rateLimit.test.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
                - name: >-
                    tokenLifespan.test.ts
                  type: >-
                    file
                - name: >-
                    umd.test.ts
                  type: >-
                    file
    - name: >-
        text.txt
      type: >-
        file
    - name: >-
        tools
      type: >-
        directory
      children:
        - name: >-
            log-gen.ts
          type: >-
            file
        - name: >-
            log-gen.yaml
          type: >-
            file
        - name: >-
            openapi-jars
          type: >-
            directory
          children:
            - name: >-
                openapi-generator-cli-7.12.0.jar
              type: >-
                file
    - name: >-
        tsconfig.build.json
      type: >-
        file
    - name: >-
        tsconfig.json
      type: >-
        file
    - name: >-
        versionrc.json
      type: >-
        file
    - name: >-
        vitest.config.ts
      type: >-
        file
