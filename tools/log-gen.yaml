project: quickbase-js
date: 3/13/2025
root: /home/drew/Projects/quickbase-js
goals:
  - A library for interacting with the QuickBase RESTful API.
  - Use OpenAPI to generate types and methods using a proxy. Validate with tests.
  - Provide robust and intuitive temporary token support for browser environments.
  - User Tokens support both Node.js and browser environments.
  - 'Use case: JS frameworks like React, Vue, and Angular hosted in QuickBase code pages.'
  - Enable a flexible or native fetch in the browser.
  - Enable a flexible fetch framework in Node.js.
  - '#'
  - No manual updating methods when the QuickBase API changes.
  - The proxy magic dynamically maps generated methods and types.
  - '#'
  - TokenCache is defined per quickbaseClient call, so each instance has its own isolated TokenCache.
  - Each quickbase client instance has an isolated and individual token cache.
pipelineOverview:
  - 'fix-spec-main.ts: Input: Reads the latest QuickBase_RESTful*.json file from the specs/ folder and applies fixes to the parameters and paths.'
  - filters out the QB-Realm-Hostname, Authorization, and User-Agent parameters.
  - Converts parameter names to camelCase.
  - Fixes array schemas and applies custom paths.
  - Merges paths from fix-spec-paths.ts and definitions from fix-spec-definitions.ts.
  - 'Output: writes quickbase-fixed.json to src/code-generation/output/.'
  - 'Key Behavior: The merge (spec.paths = { ...spec.paths, ...paths }) preserves all origional endpoints, only overriding those defined in fix-spec-paths.ts.'
  - '#'
  - 'regenerate-client.ts: Uses quickbase-fixed.json to generate raw TypeScript-fetch files (src/generated/). including models and APIs.'
  - '#'
  - 'generate-unified-interface.ts: Uses quickbase-fixed.json to generate a unified QuickbaseClient.ts interface in src/generated-unified/.'
  - QuickbaseClient.ts includes all endpoints from src/code-generation/output/quickbase-fixed, and types from src/generated.
  - '#'
  - /specs/QuickBase_RESTful_API_*.json is over 46k lines of JSON, so it's not included in the snapshot, its too large to give to an AI.
  - which creates difficulties in understanding the structure of the API.
  - It makes it difficult to model the src/code-generation/fix-spec-*.ts files in the snapshot.
  - '#'
  - vitest unit and integration tests. Integration tests use the real QuickBase API with user token auth.
  - playwright is used to test the real QuickBase API in a browser enviornment with temporary token auth.
  - temp tokens can only be generated in a browser enviornment and can not be fetched with a user token.
  - '#'
  - getTempTokenDBID() method is wrapped to enhance temporary token generation reuse interacting with a token cache.
  - '#'
  - 'npm run fix-spec: Generates quickbase-fixed.json from the latest QuickBase_RESTful*.json file.'
  - npm run regenerate:openapi Generates raw TypeScript-fetch files in src/generated/.
  - 'npm run generate:unified: Generates a unified QuickbaseClient.ts interface in src/generated-unified/.'
tree:
  name: .
  type: directory
  children:
    - name: .env
      type: file
    - name: .gitignore
      type: file
    - name: CHANGELOG.md
      type: file
    - name: LICENSE
      type: file
    - name: README.md
      type: file
    - name: build-common.js
      type: file
    - name: build-esm.js
      type: file
    - name: build-umd.js
      type: file
    - name: dist
      type: directory
      children:
        - name: esm
          type: directory
          children:
            - name: quickbase.d.ts
              type: file
            - name: quickbase.js
              type: file
            - name: quickbase.js.map
              type: file
            - name: quickbase.min.js
              type: file
            - name: quickbase.min.js.map
              type: file
        - name: umd
          type: directory
          children:
            - name: quickbase.umd.js
              type: file
            - name: quickbase.umd.js.map
              type: file
            - name: quickbase.umd.min.js
              type: file
            - name: quickbase.umd.min.js.map
              type: file
    - name: examples
      type: directory
      children:
        - name: quicbase-jsCDN.html
          type: file
        - name: react.js
          type: file
        - name: vanillajs.html
          type: file
    - name: open-api
      type: directory
      children:
        - name: definitions
          type: directory
          children:
            - name: apps.ts
              type: file
              contents: |
                // src/code-generation/definitions/apps.ts
                export const appsDefinitions = {
                  App: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: { type: "string" },
                      name: { type: "string" },
                      created: { type: "string", format: "date-time" },
                      updated: { type: "string", format: "date-time" },
                      description: { type: "string" },
                      timeZone: { type: "string" },
                      dateFormat: { type: "string" },
                      hasEveryoneOnTheInternet: { type: "boolean" },
                      memoryInfo: { $ref: "#/definitions/AppMemoryInfo" },
                      securityProperties: { $ref: "#/definitions/AppSecurityProperties" },
                    },
                  },
                  AppMemoryInfo: {
                    type: "object",
                    properties: {
                      estMemory: { type: "number" },
                      estMemoryInclDependentApps: { type: "number" },
                    },
                  },
                  AppSecurityProperties: {
                    type: "object",
                    properties: {
                      allowClone: { type: "boolean" },
                      allowExport: { type: "boolean" },
                      enableAppTokens: { type: "boolean" },
                      hideFromPublic: { type: "boolean" },
                      mustBeRealmApproved: { type: "boolean" },
                      useIPFilter: { type: "boolean" },
                    },
                  },
                  CreateAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description:
                          "The app name. Multiple apps with the same name are allowed in the same realm.",
                      },
                      assignToken: {
                        type: "boolean",
                        description:
                          "Set to true to assign the app to the user token used to create it. Default is false.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The description for the app. Defaults to blank if omitted.",
                      },
                      securityProperties: {
                        $ref: "#/definitions/AppSecurityProperties",
                        description: "Application security properties.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description:
                          "App variables (max 10, optional). See About Application Variables.",
                      },
                    },
                  },
                  CreateApp200Response: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier for this application.",
                      },
                      name: { type: "string", description: "The app name." },
                      description: {
                        type: "string",
                        description: "The description for the app.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description: "The time and date the app was created (ISO 8601, UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date the app was last updated (ISO 8601, UTC).",
                      },
                      dateFormat: {
                        type: "string",
                        description:
                          "The format used for displaying dates in the app (e.g., MM-DD-YYYY).",
                      },
                      timeZone: {
                        type: "string",
                        description:
                          "The time zone used for displaying time values (e.g., (UTC-08:00) Pacific Time).",
                      },
                      memoryInfo: {
                        $ref: "#/definitions/AppMemoryInfo",
                        description: "Application memory information.",
                      },
                      hasEveryoneOnTheInternet: {
                        type: "boolean",
                        description:
                          "Indicates if the app includes Everyone On The Internet access.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description: "The app variables.",
                      },
                      dataClassification: {
                        type: "string",
                        description:
                          "The Data Classification label assigned to the app (optional, may be 'None').",
                      },
                      securityProperties: {
                        $ref: "#/definitions/AppSecurityProperties",
                        description: "Security properties of the application.",
                      },
                    },
                    required: ["id", "name"],
                  },
                  CopyAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description: "The name of the newly copied app.",
                      },
                      description: {
                        type: "string",
                        description: "The description of the newly copied app.",
                      },
                      properties: {
                        type: "object",
                        properties: {
                          keepData: {
                            type: "boolean",
                            description:
                              "Whether to copy the app's data along with the schema.",
                          },
                          excludeFiles: {
                            type: "boolean",
                            description:
                              "If keepData is true, whether to copy file attachments. Ignored if keepData is false.",
                          },
                          usersAndRoles: {
                            type: "boolean",
                            description:
                              "If true, users will be copied along with their assigned roles. If false, users and roles will be copied but roles will not be assigned.",
                          },
                          assignUserToken: {
                            type: "boolean",
                            description:
                              "Whether to add the user token used to make this request to the new app.",
                          },
                        },
                        description:
                          "The configuration properties for performing the app copy.",
                      },
                    },
                    description: "Request body for copying an existing application.",
                  },
                  CopyApp200Response: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier for the copied application.",
                      },
                      name: {
                        type: "string",
                        description:
                          "The app name. Multiple apps with the same name are allowed in the same realm.",
                      },
                      description: {
                        type: "string",
                        description: "The description for the app.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description: "The time and date the app was created (ISO 8601, UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date the app was last updated (ISO 8601, UTC).",
                      },
                      dateFormat: {
                        type: "string",
                        description:
                          "The format used for displaying dates in the app (e.g., MM-DD-YYYY).",
                      },
                      timeZone: {
                        type: "string",
                        description:
                          "The time zone used for displaying time values (e.g., (UTC-08:00) Pacific Time).",
                      },
                      hasEveryoneOnTheInternet: {
                        type: "boolean",
                        description:
                          "Indicates if the app includes Everyone On The Internet access.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description: "The app variables.",
                      },
                      ancestorId: {
                        type: "string",
                        description: "The id of the app from which this app was copied.",
                      },
                      dataClassification: {
                        type: "string",
                        description:
                          "The Data Classification label assigned to the app (optional, may be 'None').",
                      },
                    },
                    description: "Response body for successful app copy operation.",
                  },
                  DeleteAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description:
                          "The name of the application to delete, required for confirmation.",
                      },
                    },
                    description:
                      "Request body for deleting an application, requiring the app name for confirmation.",
                  },
                  DeleteApp200Response: {
                    type: "object",
                    properties: {
                      deletedAppId: {
                        type: "string",
                        description: "The ID of the deleted application.",
                      },
                    },
                    required: ["deletedAppId"],
                    description: "Response body for successful deletion of an application.",
                  },
                };
            - name: auth.ts
              type: file
              contents: |
                // src/code-generation/definitions/auth.ts
                export const authDefinitions = {
                  GetTempTokenDBID200Response: {
                    type: "object",
                    required: ["temporaryAuthorization"],
                    properties: {
                      temporaryAuthorization: { type: "string" },
                    },
                  },
                };
            - name: fields.ts
              type: file
              contents: |
                // src/code-generation/definitions/fields.ts
                export const fieldsDefinitions = {
                  Field: {
                    type: "object",
                    required: ["id", "label", "fieldType"],
                    properties: {
                      id: {
                        type: "integer",
                        description: "The id of the field, unique to this table.",
                      },
                      label: { type: "string", description: "The label (name) of the field." },
                      fieldType: {
                        type: "string",
                        description:
                          "The type of field, as described in the QuickBase Field Types documentation.",
                      },
                      mode: {
                        type: "string",
                        description:
                          "For derived fields, this will be 'lookup', 'summary', or 'formula'. For non-derived fields, this will be blank.",
                      },
                      noWrap: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to not wrap when displayed in the product.",
                      },
                      bold: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to display in bold in the product.",
                      },
                      required: {
                        type: "boolean",
                        description: "Indicates if the field is marked required.",
                      },
                      appearsByDefault: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as a default in reports.",
                      },
                      findEnabled: {
                        type: "boolean",
                        description: "Indicates if the field is marked as searchable.",
                      },
                      unique: {
                        type: "boolean",
                        description: "Indicates if the field is marked unique.",
                      },
                      doesDataCopy: {
                        type: "boolean",
                        description:
                          "Indicates if the field data will copy when a user copies the record.",
                      },
                      fieldHelp: {
                        type: "string",
                        description:
                          "The configured help text shown to users within the product.",
                      },
                      audited: {
                        type: "boolean",
                        description:
                          "Indicates if the field is being tracked as part of Quickbase Audit Logs.",
                      },
                      properties: {
                        $ref: "#/definitions/FieldProperties",
                        description:
                          "Additional properties for the field. See Field type details for more information.",
                      },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                        description: "Field permissions for different roles.",
                      },
                    },
                    description:
                      "Represents the properties of an individual field in QuickBase.",
                  },
                  FieldProperties: {
                    type: "object",
                    properties: {
                      primaryKey: { type: "boolean" },
                      foreignKey: {
                        type: "boolean",
                        description:
                          "Indicates if the field is a foreign key (or reference field) in a relationship.",
                      },
                      numLines: {
                        type: "integer",
                        description:
                          "The number of lines shown in Quickbase for this text field.",
                      },
                      maxLength: {
                        type: "integer",
                        description:
                          "The maximum number of characters allowed for entry in Quickbase for this field.",
                      },
                      appendOnly: {
                        type: "boolean",
                        description: "Whether this field is append only.",
                      },
                      allowHTML: {
                        type: "boolean",
                        description: "Whether this field allows html.",
                      },
                      allowMentions: {
                        type: "boolean",
                        description:
                          "If someone can @mention users in the rich text field to generate an email notification.",
                      },
                      sortAsGiven: {
                        type: "boolean",
                        description:
                          "Indicates if the listed entries sort as entered vs alphabetically.",
                      },
                      carryChoices: {
                        type: "boolean",
                        description:
                          "Whether the field should carry its multiple choice fields when copied.",
                      },
                      allowNewChoices: {
                        type: "boolean",
                        description:
                          "Indicates if users can add new choices to a selection list.",
                      },
                      formula: {
                        type: "string",
                        description: "The formula of the field as configured in Quickbase.",
                      },
                      defaultValue: {
                        type: "string",
                        description:
                          "The default value configured for a field when a new record is added.",
                      },
                      doesTotal: {
                        type: "boolean",
                        description: "Whether this field totals in reports within the product.",
                      },
                      autoSave: {
                        type: "boolean",
                        description: "Whether the link field will auto save.",
                      },
                      defaultValueLuid: {
                        type: "integer",
                        description: "Default user id value.",
                      },
                      useI18NFormat: {
                        type: "boolean",
                        description:
                          "Whether phone numbers should be in E.164 standard international format.",
                      },
                      maxVersions: {
                        type: "integer",
                        description:
                          "The maximum number of versions configured for a file attachment.",
                      },
                      format: { type: "integer", description: "The format to display time." },
                      linkText: {
                        type: "string",
                        description:
                          "The configured text value that replaces the URL that users see within the product.",
                      },
                      parentFieldId: {
                        type: "integer",
                        description: "The id of the parent composite field, when applicable.",
                      },
                      displayTimezone: {
                        type: "boolean",
                        description:
                          "Indicates whether to display the timezone within the product.",
                      },
                      defaultToday: {
                        type: "boolean",
                        description:
                          "Indicates if the field value is defaulted today for new records.",
                      },
                      units: { type: "string", description: "The units label." },
                      openTargetIn: {
                        type: "string",
                        enum: ["sameWindow", "newWindow", "popup"],
                        description:
                          "Indicates which target the URL should open in when a user clicks it within the product.",
                      },
                      doesAverage: {
                        type: "boolean",
                        description:
                          "Whether this field averages in reports within the product.",
                      },
                      decimalPlaces: {
                        type: "integer",
                        description:
                          "The number of decimal places displayed in the product for this field.",
                      },
                      defaultCountryCode: {
                        type: "string",
                        description:
                          "Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.",
                      },
                      seeVersions: {
                        type: "boolean",
                        description:
                          "Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.",
                      },
                      displayMonth: { type: "string", description: "How to display months." },
                      displayEmail: {
                        type: "string",
                        description: "How the email is displayed.",
                      },
                      defaultKind: { type: "string", description: "The user default type." },
                      coverText: {
                        type: "string",
                        description:
                          "An alternate user friendly text that can be used to display a link in the browser.",
                      },
                      currencySymbol: {
                        type: "string",
                        description:
                          "The current symbol used when displaying field values within the product.",
                      },
                      targetFieldId: {
                        type: "integer",
                        description: "The id of the target field.",
                      },
                      displayUser: {
                        type: "string",
                        description:
                          "The configured option for how users display within the product.",
                      },
                      blankIsZero: {
                        type: "boolean",
                        description:
                          "Whether a blank value is treated the same as 0 in calculations within the product.",
                      },
                      exact: {
                        type: "boolean",
                        description: "Whether an exact match is required for a report link.",
                      },
                      defaultDomain: { type: "string", description: "Default email domain." },
                      abbreviate: {
                        type: "boolean",
                        description: "Don't show the URL protocol when showing the URL.",
                      },
                      numberFormat: {
                        type: "integer",
                        description:
                          "The format used for displaying numeric values in the product (decimal, separators, digit group).",
                      },
                      targetTableName: {
                        type: "string",
                        description: "The field's target table name.",
                      },
                      appearsAs: {
                        type: "string",
                        description:
                          "The link text, if empty, the url will be used as link text.",
                      },
                      width: {
                        type: "integer",
                        description: "The field's html input width in the product.",
                      },
                      currencyFormat: {
                        type: "string",
                        enum: ["left", "right", "middle"],
                        description:
                          "The currency format used when displaying field values within the product.",
                      },
                      displayDayOfWeek: {
                        type: "boolean",
                        description:
                          "Indicates whether to display the day of the week within the product.",
                      },
                      commaStart: {
                        type: "integer",
                        description:
                          "The number of digits before commas display in the product, when applicable.",
                      },
                      choices: {
                        type: "array",
                        items: { type: "string" },
                        description:
                          "An array of entries that exist for a field that offers choices to the user.",
                      },
                      targetTableId: {
                        type: "string",
                        description: "The id of the target table.",
                      },
                      displayRelative: {
                        type: "boolean",
                        description: "Whether to display time as relative.",
                      },
                      compositeFields: {
                        type: "array",
                        items: { type: "object" },
                        description:
                          "An array of the fields that make up a composite field (e.g., address).",
                      },
                      displayCheckboxAsText: {
                        type: "boolean",
                        description:
                          "Indicates whether the checkbox values will be shown as text in reports.",
                      },
                      displayTime: {
                        type: "boolean",
                        description:
                          "Indicates whether to display the time, in addition to the date.",
                      },
                      versionMode: {
                        type: "string",
                        enum: ["keepallversions", "keeplastversions"],
                        description:
                          "Version modes for files. Keep all versions vs keep last version.",
                      },
                      snapFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is used to snapshot values from, when applicable.",
                      },
                      hours24: {
                        type: "boolean",
                        description:
                          "Indicates whether or not to display time in the 24-hour format within the product.",
                      },
                      sortAlpha: {
                        type: "boolean",
                        description:
                          "Whether to sort alphabetically, default sort is by record ID.",
                      },
                      hasExtension: {
                        type: "boolean",
                        description: "Whether this field has a phone extension.",
                      },
                      useNewWindow: {
                        type: "boolean",
                        description:
                          "Indicates if the URL should open a new window when a user clicks it within the product.",
                      },
                      displayAsLink: {
                        type: "boolean",
                        description:
                          "Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.",
                      },
                      lookupReferenceFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the reference in the relationship for this lookup.",
                      },
                      summaryTargetFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is used to aggregate values from the child, when applicable. Displays 0 if not required.",
                      },
                      masterChoiceFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the reference in the relationship.",
                      },
                      lookupTargetFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the target on the master table for this lookup.",
                      },
                      masterChoiceTableId: {
                        type: "string",
                        description:
                          "The id of the table that is the master in this relationship.",
                      },
                      summaryReferenceFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the reference in the relationship for this summary.",
                      },
                      summaryFunction: {
                        type: "string",
                        enum: [
                          "AVG",
                          "SUM",
                          "MAX",
                          "MIN",
                          "STD-DEV",
                          "COUNT",
                          "COMBINED-TEXT",
                          "COMBINED-USER",
                          "DISTINCT-COUNT",
                        ],
                        description: "The summary accumulation function type.",
                      },
                      masterTableTag: {
                        type: "string",
                        description:
                          "The table alias for the master table in the relationship this field is part of.",
                      },
                      choicesLuid: {
                        type: "array",
                        items: { type: "integer" },
                        description: "List of user choices.",
                      },
                      xmlTag: { type: "string", description: "The field's xml tag." },
                      startField: { type: "integer", description: "The start field id." },
                      durationField: { type: "integer", description: "The duration field id." },
                      workWeek: { type: "integer", description: "The work week type." },
                      comments: {
                        type: "string",
                        description:
                          "The comments entered on the field properties by an administrator.",
                      },
                      sourceFieldId: {
                        type: "integer",
                        description: "The id of the source field.",
                      },
                    },
                    description: "Additional properties specific to the field type.",
                  },
                  FieldPermissionsInner: {
                    type: "object",
                    properties: {
                      permissionType: {
                        type: "string",
                        description: "The permission given to the role for this field.",
                      },
                      role: {
                        type: "string",
                        description:
                          "The role associated with a given permission for the field.",
                      },
                      roleId: { type: "integer", description: "The Id of the given role." },
                    },
                    description: "Defines a single permission entry for a field role.",
                  },
                  CreateFieldRequest: {
                    type: "object",
                    required: ["label", "fieldType"],
                    properties: {
                      label: { type: "string", description: "The label (name) of the field." },
                      fieldType: {
                        type: "string",
                        enum: [
                          "text",
                          "text-multiple-choice",
                          "text-multi-line",
                          "rich-text",
                          "numeric",
                          "currency",
                          "rating",
                          "percent",
                          "multitext",
                          "email",
                          "url",
                          "duration",
                          "date",
                          "datetime",
                          "timestamp",
                          "timeofday",
                          "checkbox",
                          "user",
                          "multiuser",
                          "address",
                          "phone",
                          "file",
                        ],
                        description: "The type of field. See field type details for more info.",
                      },
                      noWrap: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to not wrap when displayed in the product. Defaults to false.",
                        default: false,
                      },
                      bold: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to display in bold in the product. Defaults to false.",
                        default: false,
                      },
                      appearsByDefault: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as a default in reports. Defaults to true.",
                        default: true,
                      },
                      findEnabled: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as searchable. Defaults to true.",
                        default: true,
                      },
                      fieldHelp: {
                        type: "string",
                        description:
                          "The configured help text shown to users within the product.",
                      },
                      addToForms: {
                        type: "boolean",
                        description:
                          "Whether the field should appear on forms. Defaults to false.",
                        default: false,
                      },
                      audited: {
                        type: "boolean",
                        description:
                          "Indicates if the field is being tracked as part of Quickbase Audit Logs. Defaults to false.",
                        default: false,
                      },
                      properties: {
                        $ref: "#/definitions/FieldProperties",
                        description: "Specific field properties.",
                      },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                        description: "Field permissions for different roles.",
                      },
                    },
                    description: "Request body for creating a new field in a table.",
                  },
                  CreateField200Response: {
                    type: "object",
                    required: ["id", "label", "fieldType"],
                    properties: {
                      id: {
                        type: "integer",
                        description: "The id of the field, unique to this table.",
                      },
                      label: { type: "string", description: "The label (name) of the field." },
                      fieldType: { type: "string", description: "The type of field." },
                      mode: {
                        type: "string",
                        description:
                          "For derived fields, this will be 'lookup', 'summary', or 'formula'. For non-derived fields, this will be blank.",
                      },
                      noWrap: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to not wrap when displayed in the product.",
                      },
                      bold: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to display in bold in the product.",
                      },
                      required: {
                        type: "boolean",
                        description: "Indicates if the field is marked required.",
                      },
                      appearsByDefault: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as a default in reports.",
                      },
                      findEnabled: {
                        type: "boolean",
                        description: "Indicates if the field is marked as searchable.",
                      },
                      unique: {
                        type: "boolean",
                        description: "Indicates if the field is marked unique.",
                      },
                      doesDataCopy: {
                        type: "boolean",
                        description:
                          "Indicates if the field data will copy when a user copies the record.",
                      },
                      fieldHelp: {
                        type: "string",
                        description:
                          "The configured help text shown to users within the product.",
                      },
                      audited: {
                        type: "boolean",
                        description:
                          "Indicates if the field is being tracked as part of Quickbase Audit Logs.",
                      },
                      properties: {
                        $ref: "#/definitions/FieldProperties",
                        description: "Additional properties for the field.",
                      },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                        description: "Field permissions for different roles.",
                      },
                    },
                    description: "Response body for successful field creation.",
                  },
                  DeleteFieldsRequest: {
                    type: "object",
                    required: ["fieldIds"],
                    properties: {
                      fieldIds: {
                        type: "array",
                        items: { type: "integer" },
                        description: "List of field ids to be deleted.",
                      },
                    },
                    description: "Request body for deleting fields from a table.",
                  },
                  DeleteFields200Response: {
                    type: "object",
                    required: ["deletedFieldIds", "errors"],
                    properties: {
                      deletedFieldIds: {
                        type: "array",
                        items: { type: "integer" },
                        description: "List of field ids that were deleted.",
                      },
                      errors: {
                        type: "array",
                        items: { type: "string" },
                        description: "List of errors found during the deletion process.",
                      },
                    },
                    description:
                      "Response body for successful field deletion, with possible errors.",
                  },
                  FieldUsage: {
                    type: "object",
                    required: ["field", "usage"],
                    properties: {
                      field: {
                        type: "object",
                        required: ["id", "name", "type"],
                        properties: {
                          id: { type: "integer", description: "Field id." },
                          name: { type: "string", description: "Field name." },
                          type: { type: "string", description: "Field type." },
                        },
                        description: "Basic information about the field.",
                      },
                      usage: {
                        type: "object",
                        required: [
                          "actions",
                          "appHomePages",
                          "dashboards",
                          "defaultReports",
                          "exactForms",
                          "fields",
                          "forms",
                          "notifications",
                          "personalReports",
                          "pipelines",
                          "relationships",
                          "reminders",
                          "reports",
                          "roles",
                          "tableImports",
                          "tableRules",
                          "webhooks",
                        ],
                        properties: {
                          actions: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of QuickBase actions where the given field is referenced.",
                          },
                          appHomePages: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of app home pages where the given field is referenced.",
                          },
                          dashboards: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of dashboards where the given field is referenced.",
                          },
                          defaultReports: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of default reports where the given field is referenced.",
                          },
                          exactForms: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of exact forms where the given field is referenced.",
                          },
                          fields: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of fields where the given field is referenced.",
                          },
                          forms: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of forms where the given field is referenced.",
                          },
                          notifications: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of notifications where the given field is referenced.",
                          },
                          personalReports: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of personal reports where the given field is referenced.",
                          },
                          pipelines: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of pipelines where the given field is referenced.",
                          },
                          relationships: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of relationships where the given field is referenced.",
                          },
                          reminders: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of reminders where the given field is referenced.",
                          },
                          reports: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of reports where the given field is referenced.",
                          },
                          roles: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of roles where the given field is referenced.",
                          },
                          tableImports: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of table imports where the given field is referenced.",
                          },
                          tableRules: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of table rules where the given field is referenced.",
                          },
                          webhooks: {
                            $ref: "#/definitions/UsageCount",
                            description:
                              "The number of webhooks where the given field is referenced.",
                          },
                        },
                        description: "Usage information about the field.",
                      },
                    },
                    description: "Represents usage statistics for a field in a table.",
                  },
                  UsageCount: {
                    type: "object",
                    properties: {
                      count: {
                        type: "integer",
                        description:
                          "The number of times a field has been used for the given item.",
                      },
                    },
                    description: "A count of usage for a specific category.",
                  },
                };
            - name: index.ts
              type: file
              contents: |
                // src/code-generation/definitions/index.ts
                import { appsDefinitions } from "./apps.ts";
                import { authDefinitions } from "./auth.ts";
                import { fieldsDefinitions } from "./fields.ts";
                import { recordsDefinitions } from "./records.ts";
                import { relationshipsDefinitions } from "./relationships.ts";
                import { reportsDefinitions } from "./reports.ts";
                import { tablesDefinitions } from "./tables.ts";

                export const definitions = {
                  ...appsDefinitions,
                  ...authDefinitions,
                  ...fieldsDefinitions,
                  ...recordsDefinitions,
                  ...relationshipsDefinitions,
                  ...reportsDefinitions,
                  ...tablesDefinitions,
                };
            - name: records.ts
              type: file
              contents: |
                // src/code-generation/definitions/records.ts
                export const recordsDefinitions = {
                  Record: {
                    type: "object",
                    properties: {
                      _dummy: {
                        type: "string",
                        description: "Unused dummy property to force model generation.",
                        nullable: true,
                      },
                    },
                    additionalProperties: {
                      type: "object",
                      properties: {
                        value: {
                          anyOf: [
                            { type: "string" },
                            { type: "number" },
                            { type: "boolean" },
                            { type: "object" },
                            { type: "array" },
                            { type: "null" },
                          ],
                          description: "The value of the field.",
                        },
                      },
                      required: ["value"],
                      description: "The value object for a field ID key.",
                    },
                    description:
                      "A record with field ID keys (e.g., '6') and value objects (e.g., { value: 'data' }).",
                  },
                  UpsertRequest: {
                    type: "object",
                    required: ["to"],
                    properties: {
                      to: { type: "string", description: "The table identifier (dbid)." },
                      data: {
                        type: "array",
                        items: { $ref: "#/definitions/Record" },
                        description: "Array of records to upsert.",
                      },
                      mergeFieldId: {
                        type: "integer",
                        description: "The field ID to merge on (optional).",
                      },
                      fieldsToReturn: {
                        type: "array",
                        items: { type: "integer" },
                        description: "Field IDs to return in the response (optional).",
                      },
                    },
                  },
                  Upsert200Response: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: {
                              value: {
                                anyOf: [
                                  { type: "string" },
                                  { type: "number" },
                                  { type: "boolean" },
                                  { type: "object" },
                                  { type: "array" },
                                  { type: "null" },
                                ],
                                description: "The value of the field.",
                              },
                            },
                            required: ["value"],
                          },
                        },
                        description: "Array of upserted records with field IDs and values.",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          createdRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of newly created records.",
                          },
                          updatedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of updated records.",
                          },
                          unchangedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of unchanged records.",
                          },
                          totalNumberOfRecordsProcessed: {
                            type: "integer",
                            description: "Total records processed.",
                          },
                        },
                        required: ["totalNumberOfRecordsProcessed"],
                      },
                    },
                  },
                  Upsert207Response: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: {
                              value: {
                                anyOf: [
                                  { type: "string" },
                                  { type: "number" },
                                  { type: "boolean" },
                                  { type: "object" },
                                  { type: "array" },
                                  { type: "null" },
                                ],
                                description: "The value of the field.",
                              },
                            },
                            required: ["value"],
                          },
                        },
                        description: "Array of successfully upserted records (may be empty).",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          createdRecordIds: { type: "array", items: { type: "integer" } },
                          updatedRecordIds: { type: "array", items: { type: "integer" } },
                          unchangedRecordIds: { type: "array", items: { type: "integer" } },
                          lineErrors: {
                            type: "object",
                            additionalProperties: { type: "array", items: { type: "string" } },
                            description: "Errors by line number (1-based index).",
                          },
                          totalNumberOfRecordsProcessed: { type: "integer" },
                        },
                        required: ["totalNumberOfRecordsProcessed"],
                      },
                    },
                  },
                  DeleteRecordsRequest: {
                    type: "object",
                    required: ["from", "where"],
                    properties: {
                      from: {
                        type: "string",
                        description:
                          "The table identifier (dbid) from which to delete records.",
                      },
                      where: {
                        type: "string",
                        description:
                          "A QuickBase query string specifying which records to delete.",
                      },
                    },
                    description:
                      "Request body for deleting records from a table using a query.",
                  },
                  DeleteRecords200Response: {
                    type: "object",
                    properties: {
                      numberDeleted: {
                        type: "integer",
                        description: "The number of records successfully deleted.",
                      },
                    },
                    required: ["numberDeleted"],
                    description: "Response body for successful deletion of records.",
                  },
                  RunQueryRequest: {
                    type: "object",
                    required: ["from"],
                    properties: {
                      from: { type: "string", description: "Table ID (dbid)" },
                      select: {
                        type: "array",
                        items: { type: "integer" },
                        description: "Field IDs to return",
                      },
                      where: { type: "string", description: "Query string" },
                      sortBy: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            fieldId: { type: "integer" },
                            order: { type: "string", enum: ["ASC", "DESC"] },
                          },
                        },
                        description: "Sort criteria",
                      },
                      groupBy: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            fieldId: { type: "integer" },
                            grouping: { type: "string", enum: ["equal-values"] },
                          },
                        },
                        description: "Grouping criteria",
                      },
                      options: {
                        type: "object",
                        properties: {
                          skip: { type: "integer", description: "Number of records to skip" },
                          top: {
                            type: "integer",
                            description: "Max number of records to return",
                          },
                          compareWithAppLocalTime: {
                            type: "boolean",
                            description: "Compare times with app local time",
                          },
                        },
                      },
                    },
                  },
                  RunQueryResponse: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: { value: { type: "any" } },
                          },
                        },
                        description: "Array of record data with field IDs as keys",
                      },
                      fields: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            id: { type: "integer" },
                            label: { type: "string" },
                            type: { type: "string" },
                          },
                        },
                        description: "Field metadata",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          numFields: { type: "integer" },
                          numRecords: { type: "integer" },
                          skip: { type: "integer" },
                          top: { type: "integer" },
                          totalRecords: { type: "integer" },
                        },
                        description: "Query metadata",
                      },
                    },
                  },
                };
            - name: relationships.ts
              type: file
              contents: |
                // src/code-generation/definitions/relationships.ts
                export const relationshipsDefinitions = {
                  GetRelationships200Response: {
                    type: "object",
                    properties: {
                      metadata: {
                        type: "object",
                        properties: {
                          numRelationships: {
                            type: "integer",
                            description:
                              "The number of relationships in the current response object.",
                          },
                          skip: {
                            type: "integer",
                            description: "The number of relationships skipped.",
                          },
                          totalRelationships: {
                            type: "integer",
                            description: "The total number of relationships.",
                          },
                        },
                        required: ["numRelationships", "skip", "totalRelationships"],
                        description:
                          "Additional information about the results that may be helpful.",
                      },
                      relationships: {
                        type: "array",
                        items: { $ref: "#/definitions/Relationship" },
                        description: "The relationships in a table.",
                      },
                    },
                    required: ["metadata", "relationships"],
                    description: "Response containing relationships for a table.",
                  },
                  Relationship: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                        description: "The relationship id (foreign key field id).",
                      },
                      parentTableId: {
                        type: "string",
                        description: "The parent table id of the relationship.",
                      },
                      childTableId: {
                        type: "string",
                        description: "The child table id of the relationship.",
                      },
                      foreignKeyField: {
                        $ref: "#/definitions/RelationshipField",
                        description: "The foreign key field information.",
                      },
                      isCrossApp: {
                        type: "boolean",
                        description: "Whether this is a cross-app relationship.",
                      },
                      lookupFields: {
                        type: "array",
                        items: { $ref: "#/definitions/RelationshipField" },
                        description: "The lookup fields array.",
                      },
                      summaryFields: {
                        type: "array",
                        items: { $ref: "#/definitions/RelationshipField" },
                        description: "The summary fields array.",
                      },
                    },
                    required: [
                      "id",
                      "parentTableId",
                      "childTableId",
                      "foreignKeyField",
                      "isCrossApp",
                    ],
                    description: "A relationship between tables.",
                  },
                  RelationshipField: {
                    type: "object",
                    properties: {
                      id: { type: "integer", description: "Field id." },
                      label: { type: "string", description: "Field label." },
                      type: { type: "string", description: "Field type." },
                    },
                    required: ["id", "label", "type"],
                    description:
                      "A field involved in a relationship (foreign key, lookup, or summary).",
                  },
                };
            - name: reports.ts
              type: file
              contents: |
                // src/code-generation/definitions/reports.ts
                export const reportsDefinitions = {
                  ReportRunResponse: {
                    type: "object",
                    properties: {
                      id: { type: "string" },
                      data: { type: "object" },
                    },
                  },
                };
            - name: tables.ts
              type: file
              contents: |
                // src/code-generation/definitions/tables.ts
                export const tablesDefinitions = {
                  Table: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier (dbid) of the table.",
                      },
                      name: { type: "string", description: "The name of the table." },
                      alias: {
                        type: "string",
                        description: "The automatically-created table alias for the table.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The description of the table, as configured by an application administrator.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date when the table was created, in ISO 8601 format (UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date when the table schema or data was last updated, in ISO 8601 format (UTC).",
                      },
                      nextRecordId: {
                        type: "integer",
                        description:
                          "The incremental Record ID that will be used when the next record is created.",
                      },
                      nextFieldId: {
                        type: "integer",
                        description:
                          "The incremental Field ID that will be used when the next field is created.",
                      },
                      defaultSortFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is configured for default sorting.",
                      },
                      defaultSortOrder: {
                        type: "string",
                        enum: ["ASC", "DESC"],
                        description:
                          "The default sort order for the table, either ascending (ASC) or descending (DESC).",
                      },
                      keyFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is configured to be the key on this table, usually the Quickbase Record ID.",
                      },
                      singleRecordName: {
                        type: "string",
                        description: "The builder-configured singular noun of the table.",
                      },
                      pluralRecordName: {
                        type: "string",
                        description: "The builder-configured plural noun of the table.",
                      },
                      sizeLimit: {
                        type: "string",
                        description: "The size limit for the table (e.g., '150 MB').",
                      },
                      spaceUsed: {
                        type: "string",
                        description:
                          "The amount of space currently being used by the table (e.g., '17 MB').",
                      },
                      spaceRemaining: {
                        type: "string",
                        description:
                          "The amount of space remaining for use by the table (e.g., '133 MB').",
                      },
                    },
                  },
                  UpdateTableRequest: {
                    type: "object",
                    properties: {
                      name: { type: "string", description: "The new name for the table." },
                      singleRecordName: {
                        type: "string",
                        description:
                          "The new singular noun for records in the table. Defaults to 'Record' if not provided.",
                      },
                      pluralRecordName: {
                        type: "string",
                        description:
                          "The new plural noun for records in the table. Defaults to 'Records' if not provided.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The new description for the table. Defaults to blank if not provided.",
                      },
                    },
                    description:
                      "Request body for updating table properties. At least one property must be provided.",
                  },
                  DeleteTableResponse: {
                    type: "object",
                    properties: {
                      deletedTableId: { type: "string", description: "The deleted table id." },
                    },
                  },
                };
        - name: fix-spec-main.ts
          type: file
        - name: generate-unified-interface.ts
          type: file
        - name: output
          type: directory
          children:
            - name: quickbase-fixed.json
              type: file
        - name: paths
          type: directory
          children:
            - name: apps.ts
              type: file
              contents: |
                // src/code-generation/paths/apps.ts
                export const appsPaths = {
                  "/apps": {
                    post: {
                      operationId: "createApp",
                      summary: "Create a new application",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CreateAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application created",
                          schema: { $ref: "#/definitions/CreateApp200Response" },
                        },
                      },
                    },
                  },
                  "/apps/{appId}": {
                    get: {
                      operationId: "getApp",
                      summary: "Get an app by ID",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The application identifier.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: { $ref: "#/definitions/App" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteApp",
                      summary: "Delete an application by ID",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app to delete.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/DeleteAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application deleted",
                          schema: { $ref: "#/definitions/DeleteApp200Response" },
                        },
                      },
                    },
                  },
                  "/apps/{appId}/copy": {
                    post: {
                      operationId: "copyApp",
                      summary: "Copy an existing application",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app to copy.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CopyAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application copied",
                          schema: { $ref: "#/definitions/CopyApp200Response" },
                        },
                      },
                    },
                  },
                };
            - name: auth.ts
              type: file
              contents: |
                // src/code-generation/paths/auth.ts
                export const authPaths = {
                  "/auth/temporary/{dbid}": {
                    get: {
                      operationId: "getTempTokenDBID",
                      summary: "Get a temporary authorization token for a specific dbid",
                      tags: ["Auth"],
                      parameters: [
                        {
                          name: "dbid",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The database identifier (dbid).",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: { $ref: "#/definitions/GetTempTokenDBID200Response" },
                        },
                      },
                    },
                  },
                };
            - name: fields.ts
              type: file
              contents: |
                // src/code-generation/paths/fields.ts
                export const fieldsPaths = {
                  "/fields": {
                    get: {
                      operationId: "getFields",
                      summary: "Get all fields for a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "includeFieldPerms",
                          in: "query",
                          required: false,
                          type: "boolean",
                          description: "Whether to include field permissions.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Field" },
                          },
                        },
                      },
                    },
                    post: {
                      operationId: "createField",
                      summary: "Create a new field in a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the table.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CreateFieldRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - field created",
                          schema: { $ref: "#/definitions/CreateField200Response" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteFields",
                      summary: "Delete fields from a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the table.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/DeleteFieldsRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - fields deleted, with possible errors",
                          schema: { $ref: "#/definitions/DeleteFields200Response" },
                        },
                      },
                    },
                  },
                  "/fields/{fieldId}": {
                    get: {
                      operationId: "getField",
                      summary: "Get the properties of an individual field by ID",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "fieldId",
                          in: "path",
                          required: true,
                          type: "integer",
                          description: "The unique identifier (fid) of the field.",
                        },
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier (dbid) of the table.",
                        },
                        {
                          name: "includeFieldPerms",
                          in: "query",
                          required: false,
                          type: "boolean",
                          description:
                            "Set to 'true' to include custom permissions for the field.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - field properties retrieved",
                          schema: { $ref: "#/definitions/Field" },
                        },
                      },
                    },
                  },
                  "/fields/usage": {
                    get: {
                      operationId: "getFieldsUsage",
                      summary: "Get usage statistics for all fields in a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier (dbid) of the table.",
                        },
                        {
                          name: "skip",
                          in: "query",
                          required: false,
                          type: "integer",
                          description: "The number of fields to skip from the list.",
                        },
                        {
                          name: "top",
                          in: "query",
                          required: false,
                          type: "integer",
                          description: "The maximum number of fields to return.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - field usage statistics retrieved",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/FieldUsage" },
                          },
                        },
                      },
                    },
                  },
                  "/fields/usage/{fieldId}": {
                    get: {
                      operationId: "getFieldUsage",
                      summary: "Get usage statistics for a single field",
                      description:
                        "Retrieve usage statistics for a specific field, summarizing where it is referenced across QuickBase features such as reports, forms, and pipelines.",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "fieldId",
                          in: "path",
                          required: true,
                          type: "integer",
                          description: "The unique identifier (fid) of the field.",
                        },
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description:
                            "The unique identifier (dbid) of the table containing the field.",
                        },
                        {
                          name: "User-Agent",
                          in: "header",
                          required: false,
                          type: "string",
                          description:
                            "Identifies the client making the request. Can be custom or default from your toolkit.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - field usage statistics retrieved",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/FieldUsage" },
                            maxItems: 1, // Ensures a single-item array as per QuickBase API behavior
                          },
                        },
                      },
                    },
                  },
                };
            - name: index.ts
              type: file
              contents: |
                import { appsPaths } from "./apps.ts";
                import { authPaths } from "./auth.ts";
                import { fieldsPaths } from "./fields.ts";
                import { recordsPaths } from "./records.ts";
                import { relationshipsPaths } from "./relationships.ts";
                import { reportsPaths } from "./reports.ts";
                import { tablesPaths } from "./tables.ts";

                export const paths = {
                  ...appsPaths,
                  ...authPaths,
                  ...fieldsPaths,
                  ...recordsPaths,
                  ...relationshipsPaths,
                  ...reportsPaths,
                  ...tablesPaths,
                };
            - name: records.ts
              type: file
              contents: |
                // src/code-generation/paths/records.ts
                export const recordsPaths = {
                  "/records": {
                    post: {
                      operationId: "upsert",
                      summary: "Upsert records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/UpsertRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - all records processed successfully",
                          schema: { $ref: "#/definitions/Upsert200Response" },
                        },
                        207: {
                          description: "Multi-Status - partial success with some errors",
                          schema: { $ref: "#/definitions/Upsert207Response" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteRecords",
                      summary: "Delete records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/DeleteRecordsRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - records deleted",
                          schema: { $ref: "#/definitions/DeleteRecords200Response" },
                        },
                      },
                    },
                  },
                  "/records/query": {
                    post: {
                      operationId: "runQuery",
                      summary: "Query records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/RunQueryRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - records returned",
                          schema: { $ref: "#/definitions/RunQueryResponse" },
                        },
                      },
                    },
                  },
                };
            - name: relationships.ts
              type: file
              contents: |
                // src/code-generation/paths/relationships.ts
                export const relationshipsPaths = {
                  "/tables/{tableId}/relationships": {
                    get: {
                      operationId: "getRelationships",
                      summary: "Get relationships for a table",
                      tags: ["Relationships"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The unique identifier (dbid) of the child table.",
                        },
                        {
                          name: "skip",
                          in: "query",
                          required: false,
                          type: "integer",
                          description: "The number of relationships to skip.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - relationships retrieved",
                          schema: { $ref: "#/definitions/GetRelationships200Response" },
                        },
                      },
                    },
                  },
                };
            - name: reports.ts
              type: file
              contents: |
                // src/code-generation/paths/reports.ts
                export const reportsPaths = {
                  "/reports/{reportId}/run": {
                    post: {
                      operationId: "runReport",
                      summary: "Run a report",
                      tags: ["Reports"],
                      parameters: [
                        {
                          name: "reportId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The report identifier.",
                        },
                        {
                          name: "generated",
                          in: "body",
                          required: true,
                          schema: { type: "object" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/ReportRunResponse" },
                          },
                        },
                      },
                    },
                  },
                };
            - name: tables.ts
              type: file
              contents: |
                // src/code-generation/paths/tables.ts
                export const tablesPaths = {
                  "/tables": {
                    get: {
                      operationId: "getAppTables",
                      summary: "Get all tables for an app",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The application identifier.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Table" },
                          },
                        },
                      },
                    },
                    post: {
                      operationId: "createTable",
                      summary: "Create a new table in an app",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description:
                            "The unique identifier of the app where the table will be created.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: {
                            type: "object",
                            properties: {
                              name: { type: "string", description: "The name of the table." },
                              description: {
                                type: "string",
                                description: "The description of the table.",
                              },
                              singleRecordName: {
                                type: "string",
                                description: "Singular noun for records.",
                              },
                              pluralRecordName: {
                                type: "string",
                                description: "Plural noun for records.",
                              },
                            },
                            required: ["name"],
                          },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table created",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                  },
                  "/tables/{tableId}": {
                    get: {
                      operationId: "getTable",
                      summary: "Get a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table retrieved",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                    post: {
                      operationId: "updateTable",
                      summary: "Update a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/UpdateTableRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table updated",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteTable",
                      summary: "Delete a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table deleted",
                          schema: { $ref: "#/definitions/DeleteTableResponse" },
                        },
                      },
                    },
                  },
                };
        - name: regenerate-client.ts
          type: file
    - name: openapitools.json
      type: file
    - name: package-lock.json
      type: file
    - name: package.json
      type: file
      contents: |
        {
          "name": "quickbase-js",
          "version": "1.1.0-beta.6",
          "description": "QuickBase JavaScript client for frameworks and vanilla JS",
          "type": "module",
          "main": "dist/esm/quickbase.js",
          "module": "dist/esm/quickbase.js",
          "types": "dist/esm/quickbase.d.ts",
          "publishConfig": {
            "access": "public"
          },
          "exports": {
            ".": {
              "import": {
                "minified": "./dist/esm/quickbase.min.js",
                "default": "./dist/esm/quickbase.js"
              },
              "require": {
                "minified": "./dist/umd/quickbase.umd.min.js",
                "default": "./dist/umd/quickbase.umd.js"
              },
              "types": "./dist/esm/quickbase.d.ts",
              "umd:types": "./dist/umd/quickbase.umd.d.ts"
            }
          },
          "scripts": {
            "build": "npm run build:esm && npm run build:umd",
            "build:esm": "rimraf dist/esm dist/temp dist/temp-src && node --loader ts-node/esm build-esm.js",
            "build:umd": "rimraf dist/umd dist/temp dist/temp-src && node --loader ts-node/esm build-umd.js",
            "release": "standard-version",
            "release:beta": "standard-version --prerelease beta",
            "release:alpha": "standard-version --prerelease alpha",
            "release:push": "npm run release:beta && git push --follow-tags origin main",
            "release:publish": "npm run release:push && npm publish --tag beta",
            "release:stable": "standard-version && git push --follow-tags origin main && npm publish",
            "fix-spec": "node --loader ts-node/esm open-api/fix-spec-main.ts",
            "regenerate:openapi": "rimraf src/generated && node --loader ts-node/esm open-api/regenerate-client.ts",
            "regenerate:unified": "node --loader ts-node/esm open-api/generate-unified-interface.ts",
            "regenerate:all": "npm run fix-spec && npm run regenerate:openapi && npm run regenerate:unified",
            "log-gen": "node --loader ts-node/esm tools/log-gen.ts",
            "test:all": "vitest run tests/vitest/**/**/*.test.ts --reporter=basic && playwright test tests/playwright/qb --config playwright.config.ts --reporter=dot --quiet",
            "test:pw:qb:all": "playwright test tests/playwright/qb --config playwright.config.ts",
            "test:vitest:all": "vitest run tests/vitest/**/**/*.test.ts",
            "test:vitest:qb": "vitest run tests/vitest/qb/**/*.test.ts",
            "test:vitest:unit": "vitest run tests/vitest/unit/**/*.test.ts",
            "test:vitest:qb:apps": "vitest run tests/vitest/qb/apps/**/*.test.ts",
            "test:vitest:qb:auth": "vitest run tests/vitest/qb/auth/**/*.test.ts",
            "test:vitest:qb:fields": "vitest run tests/vitest/qb/fields/**/*.test.ts",
            "test:vitest:qb:records": "vitest run tests/vitest/qb/records/**/*.test.ts",
            "test:vitest:qb:tables": "vitest run tests/vitest/qb/tables/**/*.test.ts",
            "test:vitest:unit:apps": "vitest run tests/vitest/unit/apps/**/*.test.ts",
            "test:vitest:unit:auth": "vitest run tests/vitest/unit/auth/**/*.test.ts",
            "test:vitest:unit:fields": "vitest run tests/vitest/unit/fields/**/*.test.ts",
            "test:vitest:unit:records": "vitest run tests/vitest/unit/records/**/*.test.ts",
            "test:vitest:unit:tables": "vitest run tests/vitest/unit/tables/**/*.test.ts",
            "test:pw:qb:auth": "playwright test tests/playwright/qb/auth"
          },
          "dependencies": {
            "typescript": "^5.8.2"
          },
          "devDependencies": {
            "@openapitools/openapi-generator-cli": "^2.17.0",
            "@playwright/test": "^1.51.0",
            "@rollup/plugin-commonjs": "^28.0.3",
            "@rollup/plugin-node-resolve": "^16.0.0",
            "@rollup/plugin-terser": "^0.4.4",
            "@rollup/plugin-typescript": "^12.1.2",
            "@types/js-yaml": "^4.0.9",
            "@types/node": "^22.13.10",
            "dotenv": "^16.4.7",
            "glob": "^11.0.1",
            "js-yaml": "^4.1.0",
            "jsdom": "^26.0.0",
            "node-fetch": "^3.3.2",
            "openapi-types": "^12.1.3",
            "rimraf": "^5.0.10",
            "rollup": "^4.35.0",
            "rollup-plugin-dts": "^6.1.1",
            "standard-version": "^9.5.0",
            "ts-morph": "^25.0.1",
            "ts-node": "^10.9.2",
            "tslib": "^2.8.1",
            "undici-types": "^7.5.0",
            "vitest": "^3.0.8"
          }
        }
    - name: playwright.config.ts
      type: file
    - name: rollup.config.js
      type: file
      contents: |
        import terser from "@rollup/plugin-terser";
        import nodeResolve from "@rollup/plugin-node-resolve";
        import commonjs from "@rollup/plugin-commonjs";
        import dts from "rollup-plugin-dts";
        import typescript from "@rollup/plugin-typescript";

        const isProd = process.env.NODE_ENV === "production";

        // External dependencies for both ESM and UMD builds
        const external = [
          "node:http",
          "node:https",
          "node:zlib",
          "node:stream",
          "node:buffer",
          "node:util",
          "node:url",
          "node:net",
          "node:fs",
          "node:path",
          "node-fetch",
        ];

        // Global mappings for UMD (browser) build
        const globals = {
          "node-fetch": "fetch", // Map node-fetch to window.fetch in browsers
        };

        export default [
          // ESM Build
          {
            input: "src/quickbaseClient.ts",
            output: {
              dir: "dist/esm",
              format: "esm",
              sourcemap: true,
              entryFileNames: "quickbase.js",
            },
            external,
            plugins: [
              nodeResolve({ preferBuiltins: true }), // Node.js resolution
              commonjs(), // Convert CommonJS to ESM
              typescript({
                tsconfig: "./tsconfig.json",
                noEmitOnError: true, // Fail on TypeScript errors
                // Use Rollup to emit JavaScript, overriding noEmit for this build
              }),
              isProd && terser(), // Minification for production
            ],
          },
          // UMD Build
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/umd/quickbase.umd.js",
              format: "umd",
              name: "QuickbaseJS", // Global name for browser
              sourcemap: true,
              globals,
            },
            external,
            plugins: [
              nodeResolve({ preferBuiltins: true, browser: true }), // Browser-first resolution
              commonjs(), // Convert CommonJS to UMD
              typescript({
                tsconfig: "./tsconfig.json",
                noEmitOnError: true, // Fail on TypeScript errors
                // Use Rollup to emit JavaScript, overriding noEmit for this build
              }),
              isProd && terser(), // Minification for production
            ],
          },
          // ESM Declarations
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/esm/quickbase.d.ts",
              format: "esm",
            },
            plugins: [
              dts({
                tsconfig: "./tsconfig.json",
                respectExternal: true, // Include external dependencies in declarations
              }),
            ],
          },
          // UMD Declarations
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/umd/quickbase.umd.d.ts",
              format: "umd",
            },
            plugins: [
              dts({
                tsconfig: "./tsconfig.json",
                respectExternal: true, // Include external dependencies in declarations
              }),
            ],
          },
        ].map((config) => ({
          ...config,
          onwarn(warning, warn) {
            // Suppress TypeScript plugin warnings
            if (
              warning.code === "PLUGIN_WARNING" &&
              warning.plugin === "typescript" &&
              warning.message.includes("TS5096")
            ) {
              return;
            }
            warn(warning);
          },
        }));
    - name: src
      type: directory
      children:
        - name: generated
          type: directory
          children:
            - name: .openapi-generator
              type: directory
              children:
                - name: FILES
                  type: file
                - name: VERSION
                  type: file
            - name: .openapi-generator-ignore
              type: file
            - name: apis
              type: directory
              children:
                - name: AppsApi.ts
                  type: file
                - name: AuditApi.ts
                  type: file
                - name: AuthApi.ts
                  type: file
                - name: DocumentTemplatesApi.ts
                  type: file
                - name: FieldsApi.ts
                  type: file
                - name: FilesApi.ts
                  type: file
                - name: FormulasApi.ts
                  type: file
                - name: PlatformAnalyticsApi.ts
                  type: file
                - name: RecordsApi.ts
                  type: file
                - name: RelationshipsApi.ts
                  type: file
                - name: ReportsApi.ts
                  type: file
                - name: SolutionsApi.ts
                  type: file
                - name: TablesApi.ts
                  type: file
                - name: UserTokenApi.ts
                  type: file
                - name: UsersApi.ts
                  type: file
                - name: index.ts
                  type: file
            - name: index.ts
              type: file
            - name: models
              type: directory
              children:
                - name: AddMembersToGroup200Response.ts
                  type: file
                - name: AddSubgroupsToGroup200Response.ts
                  type: file
                - name: App.ts
                  type: file
                - name: AppMemoryInfo.ts
                  type: file
                - name: AppSecurityProperties.ts
                  type: file
                - name: Audit200Response.ts
                  type: file
                - name: Audit202Response.ts
                  type: file
                - name: AuditRequest.ts
                  type: file
                - name: CloneUserToken200Response.ts
                  type: file
                - name: CloneUserTokenRequest.ts
                  type: file
                - name: CopyApp200Response.ts
                  type: file
                - name: CopyAppRequest.ts
                  type: file
                - name: CopyAppRequestProperties.ts
                  type: file
                - name: CreateApp200Response.ts
                  type: file
                - name: CreateAppRequest.ts
                  type: file
                - name: CreateAppRequestVariablesInner.ts
                  type: file
                - name: CreateField200Response.ts
                  type: file
                - name: CreateFieldRequest.ts
                  type: file
                - name: CreateRelationship200Response.ts
                  type: file
                - name: CreateRelationshipRequest.ts
                  type: file
                - name: CreateTableRequest.ts
                  type: file
                - name: DeactivateUserToken200Response.ts
                  type: file
                - name: DeleteApp200Response.ts
                  type: file
                - name: DeleteAppRequest.ts
                  type: file
                - name: DeleteFields200Response.ts
                  type: file
                - name: DeleteFieldsRequest.ts
                  type: file
                - name: DeleteFile200Response.ts
                  type: file
                - name: DeleteRecords200Response.ts
                  type: file
                - name: DeleteRecordsRequest.ts
                  type: file
                - name: DeleteRelationship200Response.ts
                  type: file
                - name: DeleteTableResponse.ts
                  type: file
                - name: DenyUsers200Response.ts
                  type: file
                - name: ExchangeSsoToken200Response.ts
                  type: file
                - name: ExchangeSsoTokenRequest.ts
                  type: file
                - name: Field.ts
                  type: file
                - name: FieldPermissionsInner.ts
                  type: file
                - name: FieldProperties.ts
                  type: file
                - name: FieldUsage.ts
                  type: file
                - name: FieldUsageField.ts
                  type: file
                - name: FieldUsageUsage.ts
                  type: file
                - name: GenerateDocument200Response.ts
                  type: file
                - name: GetRelationships200Response.ts
                  type: file
                - name: GetRelationships200ResponseMetadata.ts
                  type: file
                - name: GetReport200Response.ts
                  type: file
                - name: GetTempTokenDBID200Response.ts
                  type: file
                - name: GetUsers200Response.ts
                  type: file
                - name: GetUsersRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200Response.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: file
                - name: PlatformAnalyticReads200Response.ts
                  type: file
                - name: Record.ts
                  type: file
                - name: RecordValue.ts
                  type: file
                - name: Relationship.ts
                  type: file
                - name: RelationshipField.ts
                  type: file
                - name: RemoveMembersFromGroup200Response.ts
                  type: file
                - name: RemoveSubgroupsFromGroup200Response.ts
                  type: file
                - name: ReportRunResponse.ts
                  type: file
                - name: RunFormula200Response.ts
                  type: file
                - name: RunFormulaRequest.ts
                  type: file
                - name: RunQueryRequest.ts
                  type: file
                - name: RunQueryRequestGroupByInner.ts
                  type: file
                - name: RunQueryRequestOptions.ts
                  type: file
                - name: RunQueryRequestSortByInner.ts
                  type: file
                - name: RunQueryResponse.ts
                  type: file
                - name: RunQueryResponseFieldsInner.ts
                  type: file
                - name: RunQueryResponseMetadata.ts
                  type: file
                - name: Table.ts
                  type: file
                - name: TransferUserToken200Response.ts
                  type: file
                - name: TransferUserTokenRequest.ts
                  type: file
                - name: UndenyUsers200Response.ts
                  type: file
                - name: UpdateRelationshipRequest.ts
                  type: file
                - name: UpdateTableRequest.ts
                  type: file
                - name: Upsert200Response.ts
                  type: file
                - name: Upsert200ResponseDataInnerValue.ts
                  type: file
                - name: Upsert200ResponseMetadata.ts
                  type: file
                - name: Upsert207Response.ts
                  type: file
                - name: Upsert207ResponseMetadata.ts
                  type: file
                - name: UpsertRequest.ts
                  type: file
                - name: UsageCount.ts
                  type: file
                - name: index.ts
                  type: file
            - name: runtime.ts
              type: file
        - name: generated-unified
          type: directory
          children:
            - name: QuickbaseClient.ts
              type: file
        - name: index.ts
          type: file
        - name: quickbaseClient.ts
          type: file
          contents: |
            // src/quickbaseClient.ts
            import { QuickbaseClient as IQuickbaseClient } from "./generated-unified/QuickbaseClient";
            import { Configuration, HTTPHeaders, ResponseError } from "./generated/runtime";
            import * as apis from "./generated/apis";
            import { TokenCache } from "./tokenCache";
            import { simplifyName } from "./utils"; // Add this import

            // Re-export all model types from generated/models
            export * from "./generated/models";

            // Remove the local simplifyName function
            // (The rest of the file remains unchanged)

            export interface QuickbaseClient extends IQuickbaseClient {}

            export interface QuickbaseConfig {
              realm: string;
              userToken?: string;
              tempToken?: string;
              useTempTokens?: boolean;
              debug?: boolean;
              fetchApi?: typeof fetch;
            }

            export interface TempTokenParams {
              appId?: string;
              tableId?: string;
              dbid?: string;
            }

            type ApiMethod<K extends keyof QuickbaseClient> = (
              requestParameters: Parameters<QuickbaseClient[K]>[0],
              initOverrides?: RequestInit
            ) => Promise<ReturnType<QuickbaseClient[K]>>;

            interface MethodInfo<K extends keyof QuickbaseClient> {
              api: any;
              method: ApiMethod<K>;
              paramMap: string[];
            }

            type MethodMap = { [K in keyof QuickbaseClient]: MethodInfo<K> };

            const getParamNames = (fn: (...args: any[]) => any): string[] =>
              fn
                .toString()
                .slice(fn.toString().indexOf("(") + 1, fn.toString().indexOf(")"))
                .split(",")
                .map((p) => p.trim().split("=")[0].trim())
                .filter((p) => p && !p.match(/^\{/) && p !== "options");

            const extractDbid = (
              params: Partial<TempTokenParams>,
              errorMessage: string
            ): string => {
              const dbid = params.dbid || params.tableId || params.appId;
              if (!dbid) {
                throw new Error(errorMessage);
              }
              return dbid;
            };

            export function quickbase(config: QuickbaseConfig): QuickbaseClient {
              const {
                realm,
                userToken,
                tempToken: initialTempToken,
                useTempTokens,
                fetchApi,
                debug,
              } = config;
              const baseUrl = `https://api.quickbase.com/v1`;

              const tokenCache = new TokenCache();

              const baseHeaders: HTTPHeaders = {
                "QB-Realm-Hostname": `${realm}.quickbase.com`,
                "Content-Type": "application/json",
              };

              if (initialTempToken) {
                baseHeaders["Authorization"] = `QB-TEMP-TOKEN ${initialTempToken}`;
              } else if (userToken && !useTempTokens) {
                baseHeaders["Authorization"] = `QB-USER-TOKEN ${userToken}`;
              }

              const defaultFetch: typeof fetch | undefined =
                typeof globalThis.window !== "undefined"
                  ? globalThis.window.fetch.bind(globalThis.window)
                  : undefined;
              const configuration = new Configuration({
                basePath: baseUrl,
                headers: { ...baseHeaders },
                fetchApi: fetchApi || defaultFetch,
                credentials: "omit", // Default to "omit" for all requests
              });

              if (!configuration.fetchApi && typeof globalThis.window === "undefined") {
                throw new Error(
                  "fetchApi must be provided in non-browser environments (e.g., Node.js)"
                );
              }

              const apiInstances = Object.fromEntries(
                Object.entries(apis)
                  .filter(([name]) => name.endsWith("Api"))
                  .map(([name, ApiClass]) => [
                    name.replace("Api", "").toLowerCase(),
                    new ApiClass(configuration),
                  ])
              );

              const methodMap = buildMethodMap();

              function buildMethodMap(): MethodMap {
                const methodMap: Partial<MethodMap> = {};
                const isValidMethod = (name: string) =>
                  !name.startsWith("_") &&
                  name !== "constructor" &&
                  !["Middleware", "Pre", "Post", "Raw"].some((s) => name.includes(s));

                for (const [apiName, api] of Object.entries(apiInstances)) {
                  Object.getOwnPropertyNames(Object.getPrototypeOf(api))
                    .filter(
                      (name) =>
                        isValidMethod(name) &&
                        typeof api[name as keyof typeof api] === "function"
                    )
                    .forEach((rawMethodName) => {
                      const simplifiedName = simplifyName(
                        rawMethodName
                      ) as keyof QuickbaseClient;
                      const method = api[rawMethodName as keyof typeof api];
                      const boundMethod = method.bind(api as any) as unknown;
                      if (typeof boundMethod === "function" && boundMethod.length <= 2) {
                        methodMap[simplifiedName] = {
                          api,
                          method: boundMethod as ApiMethod<typeof simplifiedName>,
                          paramMap: getParamNames(method),
                        };
                      }
                    });
                }
                return methodMap as MethodMap;
              }

              const fetchTempToken = async (dbid: string): Promise<string> => {
                const effectiveFetch = fetchApi || defaultFetch;
                if (!effectiveFetch) {
                  throw new Error(
                    "No fetch implementation available for fetching temp token"
                  );
                }

                const response = await effectiveFetch(
                  `https://api.quickbase.com/v1/auth/temporary/${dbid}`,
                  {
                    method: "GET",
                    headers: { ...baseHeaders },
                    credentials: "include", // Explicitly include credentials for token fetch
                  }
                );

                if (!response.ok) {
                  const errorBody: { message?: string } = await response.json();
                  throw new Error(
                    `API Error: ${errorBody.message || "Unknown error"} (Status: ${
                      response.status
                    })`
                  );
                }

                const tokenResult = await response.json();
                const token = tokenResult.temporaryAuthorization;
                if (!token) {
                  throw new Error("No temporary token returned from API");
                }
                tokenCache.set(dbid, token);
                if (debug) {
                  console.log(
                    `Fetched and cached new token for dbid: ${dbid}`,
                    token,
                    `Expires at: ${new Date(
                      Date.now() + (4 * 60 + 50) * 1000
                    ).toISOString()}`
                  );
                }
                return token;
              };

              async function invokeMethod<K extends keyof QuickbaseClient>(
                methodName: K,
                params: Parameters<QuickbaseClient[K]>[0] & Partial<TempTokenParams>,
                retryCount: number = 0
              ): Promise<ReturnType<QuickbaseClient[K]>> {
                const methodInfo = methodMap[methodName];
                if (!methodInfo) {
                  throw new Error(`Method ${methodName} not found`);
                }

                const requestParameters =
                  methodInfo.paramMap.length === 1 &&
                  methodInfo.paramMap[0] === "requestParameters"
                    ? { requestParameters: params }
                    : params;
                let requestOptions: RequestInit = {
                  credentials: "omit", // Explicitly set to "omit" for API calls
                };

                const selectedToken =
                  initialTempToken || (userToken && !useTempTokens ? userToken : undefined);

                if (methodName === "getTempTokenDBID" && useTempTokens) {
                  const dbid = extractDbid(params, "No dbid provided for getTempTokenDBID");
                  const cachedToken = tokenCache.get(dbid);
                  if (cachedToken) {
                    return { temporaryAuthorization: cachedToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                }

                let authorizationToken = selectedToken;
                if (useTempTokens && !authorizationToken) {
                  const dbid = extractDbid(
                    params,
                    `No dbid found in params for ${methodName} to fetch temp token`
                  );
                  const cachedToken = tokenCache.get(dbid);
                  authorizationToken = cachedToken || (await fetchTempToken(dbid));
                  if (methodName === "getTempTokenDBID") {
                    return { temporaryAuthorization: authorizationToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                  };
                } else if (authorizationToken) {
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-USER-TOKEN ${authorizationToken}`,
                  };
                }

                try {
                  return await methodInfo.method(requestParameters, requestOptions);
                } catch (error) {
                  if (
                    error instanceof ResponseError &&
                    error.response.status === 401 &&
                    retryCount < 1 &&
                    useTempTokens
                  ) {
                    if (debug) {
                      console.log(
                        `Authorization error for ${methodName}, refreshing token:`,
                        error.message
                      );
                    }
                    const dbid = extractDbid(
                      params,
                      `No dbid to refresh token after authorization error`
                    );
                    authorizationToken = await fetchTempToken(dbid);
                    requestOptions.headers = {
                      ...baseHeaders,
                      Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                    };
                    if (debug) {
                      console.log(`Retrying ${methodName} with new token`);
                    }
                    return invokeMethod(methodName, params, retryCount + 1);
                  }
                  if (error instanceof ResponseError) {
                    let errorMessage = error.message;
                    try {
                      const errorBody: { message?: string } = await error.response.json();
                      if (debug) {
                        console.log(`Error response body for ${methodName}:`, errorBody);
                      }
                      errorMessage = errorBody.message || errorMessage;
                    } catch (e) {
                      // Silent fail on parse error
                    }
                    throw new Error(
                      `API Error: ${errorMessage} (Status: ${error.response.status})`
                    );
                  }
                  throw error;
                }
              }

              const proxy = new Proxy<QuickbaseClient>({} as QuickbaseClient, {
                get: (_, prop: string): ((params: any) => Promise<any>) | undefined => {
                  if (prop in methodMap) {
                    const methodName = prop as keyof QuickbaseClient;
                    return (params: Parameters<QuickbaseClient[typeof methodName]>[0]) =>
                      invokeMethod(methodName, params);
                  }
                  return undefined;
                },
              });

              return proxy;
            }
        - name: tokenCache.ts
          type: file
          contents: |
            interface CachedToken {
              token: string;
              expiresAt: number; // Timestamp in milliseconds
            }

            export class TokenCache {
              private cache: Map<string, CachedToken>;
              private readonly lifespan: number; // Token lifespan in milliseconds

              constructor(lifespan: number = 4 * 60 * 1000 + 50 * 1000) {
                // Default 4:50
                this.cache = new Map<string, CachedToken>();
                this.lifespan = lifespan;
              }

              get(dbid: string): string | undefined {
                const entry = this.cache.get(dbid);
                const now = Date.now();
                if (entry && entry.expiresAt > now) {
                  return entry.token;
                }
                return undefined; // Expired or not found
              }

              // New method to get full entry
              getEntry(dbid: string): CachedToken | undefined {
                const entry = this.cache.get(dbid);
                const now = Date.now();
                if (entry && entry.expiresAt > now) {
                  return entry;
                }
                return undefined; // Expired or not found
              }

              set(dbid: string, token: string): void {
                const now = Date.now();
                this.cache.set(dbid, {
                  token,
                  expiresAt: now + this.lifespan,
                });
              }

              dump(): [string, CachedToken][] {
                return Array.from(this.cache.entries());
              }

              // New method to clear the cache
              clear(): void {
                this.cache.clear();
              }
            }
        - name: utils.ts
          type: file
    - name: test-artifacts
      type: directory
      children:
        - name: .last-run.json
          type: file
        - name: test-results.json
          type: file
    - name: test-esm.js
      type: file
    - name: test-results.json
      type: file
    - name: test-umd.js
      type: file
    - name: test.ts
      type: file
    - name: tests
      type: directory
      children:
        - name: playwright
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: auth
                  type: directory
                  children:
                    - name: cacheSwitching.test.ts
                      type: file
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getAppWithTempToken.test.ts
                      type: file
                    - name: getAppWithUserToken.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: tokenPrefetch.test.ts
                      type: file
                    - name: tokenRenewal.test.ts
                      type: file
        - name: setup.ts
          type: file
        - name: vitest
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: deleteFields.test.ts
                      type: file
                    - name: getField.test.ts
                      type: file
                    - name: getFieldUsage.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                    - name: getFieldsUsage.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
            - name: unit
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: auth
                  type: directory
                  children:
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: retryOn401.test.ts
                      type: file
                    - name: two401s.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: deleteFields.test.ts
                      type: file
                    - name: getField.test.ts
                      type: file
                    - name: getFieldUsage.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                    - name: getFieldsUsage.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
                - name: umd.test.ts
                  type: file
    - name: text.txt
      type: file
    - name: tools
      type: directory
      children:
        - name: log-gen.ts
          type: file
        - name: log-gen.yaml
          type: file
        - name: openapi-jars
          type: directory
          children:
            - name: openapi-generator-cli-7.12.0.jar
              type: file
    - name: tsconfig.build.json
      type: file
      contents: |-
        {
          "extends": "./tsconfig.json",
          "compilerOptions": {
            "outDir": "dist/temp",
            "noEmit": false,
            "allowImportingTsExtensions": false,
            "declaration": false,
            "sourceMap": true
          },
          "include": ["dist/temp-src/**/*"],
          "exclude": [
            "node_modules",
            "dist",
            "tests/**/*",
            "src/**/*" // Exclude original src/ to avoid confusion
          ]
        }
    - name: tsconfig.json
      type: file
      contents: |
        {
          "compilerOptions": {
            "target": "ESNext",
            "module": "ESNext",
            "moduleResolution": "bundler",
            "strict": true,
            "lib": ["ES2015", "ESNext", "DOM"],
            "types": ["node", "playwright/test", "undici-types"],
            "esModuleInterop": true,
            "resolveJsonModule": true,
            "allowImportingTsExtensions": true,
            "noEmit": true,
            "outDir": "dist",
            "rootDir": ".",
            "declaration": true,
            "sourceMap": true,
            "baseUrl": ".",
            "paths": {
              "@/*": ["src/*"],
              "@tests/*": ["tests/*"]
            }
          },
          "include": ["src/**/*", "tests/**/*", "open-api/**/*", "tools/**/*"],
          "exclude": ["node_modules", "dist/**/*", "generated/**/*", "specs"],
          "ts-node": {
            "esm": true,
            "transpileOnly": true
          }
        }
    - name: versionrc.json
      type: file
    - name: vitest.config.ts
      type: file
      contents: |
        // vitest.config.ts
        import { defineConfig } from "vitest/config";
        import path from "path";
        import dotenv from "dotenv"; // Add this import

        // Load .env variables before tests run
        dotenv.config({ path: path.resolve(__dirname, ".env") });

        export default defineConfig({
          test: {
            environment: "jsdom",
            include: ["tests/vitest/**/**/*.test.ts"],
            setupFiles: ["tests/setup.ts"], // Relative path from root
            pool: "forks",
            poolOptions: {
              forks: {
                singleFork: true, // Run tests sequentially
              },
            },
          },
          resolve: {
            alias: {
              "@": path.resolve(__dirname, "./src"), // For src/ imports
              "@tests": path.resolve(__dirname, "./tests"), // For tests/ imports
            },
          },
        });
