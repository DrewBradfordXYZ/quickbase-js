project: quickbase-js
date: 3/14/2025
root: /home/drew/Projects/quickbase-js
goals:
  - A library for interacting with the QuickBase RESTful API.
  - Use OpenAPI to generate types and methods using a proxy. Validate with tests.
  - Provide robust and intuitive temporary token support for browser environments.
  - User Tokens support both Node.js and browser environments.
  - 'Use case: JS frameworks like React, Vue, and Angular hosted in QuickBase code pages.'
  - Enable a flexible or native fetch in the browser.
  - Enable a flexible fetch framework in Node.js.
  - '#'
  - No manual updating methods when the QuickBase API changes.
  - The proxy magic dynamically maps generated methods and types.
  - '#'
  - TokenCache is defined per quickbaseClient call, so each instance has its own isolated TokenCache.
  - Each quickbase client instance has an isolated and individual token cache.
pipelineOverview:
  - 'fix-spec-main.ts: Input: Reads the latest QuickBase_RESTful*.json file from the specs/ folder and applies fixes to the parameters and paths.'
  - filters out the QB-Realm-Hostname, Authorization, and User-Agent parameters.
  - Converts parameter names to camelCase.
  - Fixes array schemas and applies custom paths.
  - Merges paths from fix-spec-paths.ts and definitions from fix-spec-definitions.ts.
  - 'Output: writes quickbase-fixed.json to src/code-generation/output/.'
  - 'Key Behavior: The merge (spec.paths = { ...spec.paths, ...paths }) preserves all origional endpoints, only overriding those defined in fix-spec-paths.ts.'
  - '#'
  - 'regenerate-client.ts: Uses quickbase-fixed.json to generate raw TypeScript-fetch files (src/generated/). including models and APIs.'
  - '#'
  - 'generate-unified-interface.ts: Uses quickbase-fixed.json to generate a unified QuickbaseClient.ts interface in src/generated-unified/.'
  - QuickbaseClient.ts includes all endpoints from src/code-generation/output/quickbase-fixed, and types from src/generated.
  - '#'
  - /specs/QuickBase_RESTful_API_*.json is over 46k lines of JSON, so it's not included in the snapshot, its too large to give to an AI.
  - which creates difficulties in understanding the structure of the API.
  - It makes it difficult to model the src/code-generation/fix-spec-*.ts files in the snapshot.
  - '#'
  - vitest unit and integration tests. Integration tests use the real QuickBase API with user token auth.
  - playwright is used to test the real QuickBase API in a browser enviornment with temporary token auth.
  - temp tokens can only be generated in a browser enviornment and can not be fetched with a user token.
  - '#'
  - getTempTokenDBID() method is wrapped to enhance temporary token generation reuse interacting with a token cache.
  - '#'
  - 'npm run fix-spec: Generates quickbase-fixed.json from the latest QuickBase_RESTful*.json file.'
  - npm run regenerate:openapi Generates raw TypeScript-fetch files in src/generated/.
  - 'npm run generate:unified: Generates a unified QuickbaseClient.ts interface in src/generated-unified/.'
tree:
  name: .
  type: directory
  children:
    - name: .env
      type: file
    - name: .gitignore
      type: file
    - name: CHANGELOG.md
      type: file
    - name: LICENSE
      type: file
    - name: README.md
      type: file
    - name: build-common.js
      type: file
    - name: build-esm.js
      type: file
    - name: build-umd.js
      type: file
    - name: dist
      type: directory
      children:
        - name: esm
          type: directory
          children:
            - name: quickbase.d.ts
              type: file
            - name: quickbase.js
              type: file
            - name: quickbase.js.map
              type: file
            - name: quickbase.min.js
              type: file
            - name: quickbase.min.js.map
              type: file
        - name: umd
          type: directory
          children:
            - name: quickbase.umd.js
              type: file
            - name: quickbase.umd.js.map
              type: file
            - name: quickbase.umd.min.js
              type: file
            - name: quickbase.umd.min.js.map
              type: file
    - name: examples
      type: directory
      children:
        - name: quicbase-jsCDN.html
          type: file
        - name: react.js
          type: file
        - name: vanillajs.html
          type: file
    - name: open-api
      type: directory
      children:
        - name: definitions
          type: directory
          children:
            - name: apps.ts
              type: file
            - name: auth.ts
              type: file
            - name: events.ts
              type: file
            - name: fields.ts
              type: file
            - name: index.ts
              type: file
            - name: records.ts
              type: file
            - name: relationships.ts
              type: file
            - name: reports.ts
              type: file
            - name: tables.ts
              type: file
        - name: fix-spec-main.ts
          type: file
          contents: |
            #!/usr/bin/env node
            import { promises as fs } from "fs";
            import path from "path";
            import { fileURLToPath } from "url";
            import * as glob from "glob";
            import { paths } from "./paths/index.ts";
            import { definitions } from "./definitions/index.ts";

            interface Parameter {
              name: string;
              in: string;
              required?: boolean;
              type?: string;
              schema?: { type?: string; items?: any; $ref?: string; properties?: any };
              example?: any;
            }

            interface Operation {
              parameters?: Parameter[];
              responses?: Record<string, { description: string; schema?: any }>;
              operationId?: string;
              summary?: string;
              tags?: string[];
            }

            interface Spec {
              paths: Record<string, Record<string, Operation>>;
              definitions?: Record<string, any>;
              operations?: any;
              groups?: any;
              components?: any;
            }

            function toCamelCase(str: string): string {
              return str
                .replace(/[-_](.)/g, (_, char) => char.toUpperCase())
                .replace(/^./, (str) => str.toLowerCase());
            }

            function fixArraySchemas(spec: Spec) {
              for (const pathKey in spec.paths) {
                for (const method in spec.paths[pathKey]) {
                  const operation = spec.paths[pathKey][method];
                  if (operation.parameters) {
                    operation.parameters.forEach((param: Parameter) => {
                      if (param.schema) {
                        if (param.schema.type === "array" && !param.schema.items) {
                          console.log(
                            `Fixing missing items in ${pathKey}(${method}).${param.name}`
                          );
                          param.schema.items =
                            pathKey === "/records" && param.name === "generated"
                              ? { $ref: "#/definitions/Record" }
                              : { type: "string" };
                        }
                        if (param.schema.properties) {
                          for (const propKey in param.schema.properties) {
                            const prop = param.schema.properties[propKey];
                            if (prop.type === "array" && !prop.items) {
                              console.log(
                                `Fixing nested array in ${pathKey}(${method}).${param.name}.${propKey}`
                              );
                              prop.items =
                                propKey === "data" && pathKey === "/records"
                                  ? { $ref: "#/definitions/Record" }
                                  : { type: "string" };
                            }
                          }
                        }
                      }
                    });
                  }
                  if (operation.responses) {
                    for (const status in operation.responses) {
                      const response = operation.responses[status];
                      if (response.schema) {
                        if (response.schema.type === "array" && !response.schema.items) {
                          console.log(
                            `Fixing missing items in ${pathKey}(${method}).responses.${status}`
                          );
                          response.schema.items =
                            pathKey === "/records"
                              ? { $ref: "#/definitions/Upsert200Response" }
                              : { type: "string" };
                        }
                        if (response.schema.properties) {
                          for (const propKey in response.schema.properties) {
                            const prop = response.schema.properties[propKey];
                            if (prop.type === "array" && !prop.items) {
                              console.log(
                                `Fixing nested array in ${pathKey}(${method}).responses.${status}.${propKey}`
                              );
                              prop.items =
                                propKey === "data" && pathKey === "/records"
                                  ? { $ref: "#/definitions/Upsert200Response" }
                                  : { type: "string" };
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            async function fixQuickBaseSpec(): Promise<void> {
              try {
                const CODEGEN_DIR = path.dirname(fileURLToPath(import.meta.url));
                const SPECS_DIR = path.join(CODEGEN_DIR, "..", "specs");
                const OUTPUT_DIR = path.join(CODEGEN_DIR, "output");
                console.log("Finding latest QuickBase RESTful API spec...");
                const specFiles = glob.sync(
                  path.join(SPECS_DIR, "QuickBase_RESTful_*.json")
                );
                if (specFiles.length === 0) {
                  console.error(
                    "No QuickBase_RESTful_*.json files found in specs/ folder."
                  );
                  process.exit(1);
                }
                const inputFile = specFiles.sort().pop() as string;
                const outputFile = path.join(OUTPUT_DIR, "quickbase-fixed.json");

                console.log(`Reading ${path.basename(inputFile)} from specs/...`);
                const specContent = await fs.readFile(inputFile, "utf8");
                const spec: Spec = JSON.parse(specContent);

                console.log("Fixing parameters...");
                for (const pathKey in spec.paths) {
                  for (const method in spec.paths[pathKey]) {
                    const operation = spec.paths[pathKey][method];
                    if (operation.parameters) {
                      operation.parameters = operation.parameters
                        .filter(
                          (param) =>
                            !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                              param.name
                            )
                        )
                        .map((param: Parameter) => {
                          param.name = toCamelCase(param.name);
                          if ("example" in param) delete param.example;
                          if ("schema" in param && param.in !== "body") delete param.schema;
                          if (!param.type && param.in !== "body") param.type = "string";
                          return param;
                        });
                    }
                  }
                }

                console.log("Applying endpoint fixes...");
                spec.paths = { ...spec.paths, ...paths }; // Merge original and custom paths

                console.log("Fixing array schemas...");
                fixArraySchemas(spec);

                console.log("Applying definitions...");
                spec.definitions = { ...spec.definitions, ...definitions }; // Merge definitions

                console.log("Removing unexpected top-level attributes...");
                delete spec.operations;
                delete spec.groups;
                delete spec.components;

                console.log(`Writing fixed spec to ${path.basename(outputFile)}...`);
                await fs.mkdir(OUTPUT_DIR, { recursive: true });
                await fs.writeFile(outputFile, JSON.stringify(spec, null, 2), "utf8");
                console.log("Spec fixed successfully! Output written to:", outputFile);
              } catch (error) {
                console.error("Failed to fix spec:", error);
                process.exit(1);
              }
            }

            fixQuickBaseSpec();
        - name: generate-unified-interface.ts
          type: file
          contents: |
            // open-api/generate-unified-interface.ts
            import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
            import { join, dirname } from "path";
            import { fileURLToPath } from "url";
            import { OpenAPIV2 } from "openapi-types";
            import { simplifyName } from "../src/utils.ts"; // Add this import

            const __dirname = dirname(fileURLToPath(import.meta.url));
            const SPEC_FILE = join(__dirname, "output", "quickbase-fixed.json");
            const OUTPUT_DIR = join(__dirname, "..", "src", "generated-unified");
            const OUTPUT_FILE = join(OUTPUT_DIR, "QuickbaseClient.ts");

            // Remove the local simplifyName function
            // (The rest of the file remains unchanged)

            function generateInterface() {
              if (!existsSync(SPEC_FILE)) {
                console.error(
                  `Spec file ${SPEC_FILE} not found. Run 'npm run fix-spec' first.`
                );
                process.exit(1);
              }

              console.log("Generating unified QuickbaseClient interface...");
              const spec = JSON.parse(
                readFileSync(SPEC_FILE, "utf8")
              ) as OpenAPIV2.Document;
              const { paths } = spec;

              const modelImports = new Set<string>();
              const methods: string[] = [];

              for (const [path, methodsObj] of Object.entries(
                paths as OpenAPIV2.PathsObject
              )) {
                if (!methodsObj) continue;

                for (const [method, operation] of Object.entries(
                  methodsObj as OpenAPIV2.PathItemObject
                )) {
                  const op = operation as OpenAPIV2.OperationObject | undefined;
                  if (!op || !op.operationId) continue;

                  const opId = simplifyName(op.operationId);
                  const params = (op.parameters || [])
                    .filter((p) => {
                      const param = p as OpenAPIV2.Parameter;
                      return !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                        "name" in param ? param.name : ""
                      );
                    })
                    .map((p) => {
                      const param = p as OpenAPIV2.Parameter;
                      if (!("name" in param)) return "";

                      const type =
                        "type" in param && param.type
                          ? mapOpenApiTypeToTs(param.type)
                          : "schema" in param && param.schema
                          ? mapRefToType(param.schema, modelImports)
                          : "any";
                      return `${param.name}${param.required ? "" : "?"}: ${type}`;
                    })
                    .filter((param) => param !== "")
                    .join("; ");

                  const successResponses = ["200", "207"]
                    .map((code) => ({
                      code,
                      response: op.responses?.[code] as
                        | OpenAPIV2.ResponseObject
                        | undefined,
                    }))
                    .filter(({ response }) => response?.schema);
                  const returnTypes = successResponses.map(({ response }) =>
                    mapRefToType(response!.schema, modelImports)
                  );
                  const uniqueReturnTypes = [...new Set(returnTypes)];
                  const returnType =
                    uniqueReturnTypes.length > 0 ? uniqueReturnTypes.join(" | ") : "void";

                  methods.push(
                    `  ${opId}: (params: { ${params} }) => Promise<${returnType}>;`
                  );
                }
              }

              const importStatement =
                modelImports.size > 0
                  ? `import { ${Array.from(modelImports)
                      .sort()
                      .join(", ")} } from "../generated/models";`
                  : "";

              const interfaceContent = `// Generated on ${new Date().toISOString()}\n${importStatement}\n\nexport interface QuickbaseClient {\n${methods.join(
                "\n"
              )}\n}\n`;

              if (!existsSync(OUTPUT_DIR)) {
                mkdirSync(OUTPUT_DIR, { recursive: true });
              }
              writeFileSync(OUTPUT_FILE, interfaceContent, "utf8");
              console.log(`Generated ${OUTPUT_FILE}`);
            }

            function mapOpenApiTypeToTs(
              openApiType: string | string[] | undefined
            ): string {
              const type = Array.isArray(openApiType)
                ? openApiType[0]
                : openApiType || "any";
              switch (type.toLowerCase()) {
                case "integer":
                case "int":
                  return "number";
                case "string":
                  return "string";
                case "boolean":
                  return "boolean";
                default:
                  return "any";
              }
            }

            function mapRefToType(
              schema: OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject | undefined,
              modelImports: Set<string>
            ): string {
              if (!schema) return "any";

              // Handle ReferenceObject
              if ("$ref" in schema && schema.$ref) {
                const model = schema.$ref.split("/").pop()!;
                modelImports.add(model);
                return model;
              }

              // At this point, we know it's a SchemaObject (not a ReferenceObject)
              // But we still need to check for 'type' existence for TypeScript
              if (!("type" in schema)) return "any";

              if (schema.type === "array" && schema.items) {
                const items = schema.items as
                  | OpenAPIV2.SchemaObject
                  | OpenAPIV2.ReferenceObject;
                const itemType =
                  "$ref" in items && items.$ref
                    ? items.$ref.split("/").pop()!
                    : mapOpenApiTypeToTs("type" in items ? items.type : undefined);
                if ("$ref" in items && items.$ref) modelImports.add(itemType);
                return `${itemType}[]`;
              }

              if (schema.type === "object" && schema.additionalProperties) {
                const additionalProps = schema.additionalProperties as
                  | OpenAPIV2.SchemaObject
                  | OpenAPIV2.ReferenceObject
                  | boolean;
                if (typeof additionalProps === "boolean") {
                  return "{ [key: string]: any }";
                }
                const valueType =
                  "$ref" in additionalProps && additionalProps.$ref
                    ? additionalProps.$ref.split("/").pop()!
                    : mapOpenApiTypeToTs(
                        "type" in additionalProps ? additionalProps.type : undefined
                      );
                if ("$ref" in additionalProps && additionalProps.$ref)
                  modelImports.add(valueType);
                return `{ [key: string]: ${valueType} }`;
              }

              return mapOpenApiTypeToTs(schema.type);
            }

            try {
              generateInterface();
            } catch (error) {
              console.error("Generation failed:", error);
              process.exit(1);
            }
        - name: output
          type: directory
          children:
            - name: quickbase-fixed.json
              type: file
        - name: paths
          type: directory
          children:
            - name: apps.ts
              type: file
            - name: auth.ts
              type: file
            - name: events.ts
              type: file
            - name: fields.ts
              type: file
            - name: index.ts
              type: file
            - name: records.ts
              type: file
            - name: relationships.ts
              type: file
            - name: reports.ts
              type: file
            - name: tables.ts
              type: file
        - name: regenerate-client.ts
          type: file
          contents: |
            #!/usr/bin/env node
            import { execSync } from "child_process";
            import { existsSync } from "fs";
            import { join } from "path";
            import { fileURLToPath } from "url";
            import fetch from "node-fetch";
            import readline from "readline";

            const CURRENT_JAR_VERSION = "7.12.0";
            const MAVEN_METADATA_URL =
              "https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/maven-metadata.xml";
            const CODEGEN_DIR = join(fileURLToPath(import.meta.url), ".."); // open-api/
            const JARS_DIR = join(CODEGEN_DIR, "..", "tools", "openapi-jars"); // Updated to tools/openapi-jars/
            const SPEC_INPUT = join(CODEGEN_DIR, "output", "quickbase-fixed.json"); // Relative to open-api/
            const OUTPUT_DIR = join(CODEGEN_DIR, "..", "src", "generated"); // Up to root, then into src/generated/

            async function getLatestVersion(): Promise<string> {
              const response = await fetch(MAVEN_METADATA_URL);
              if (!response.ok)
                throw new Error(`Failed to fetch Maven metadata: ${response.statusText}`);
              const text = await response.text();
              const match = text.match(/<latest>(.*?)<\/latest>/);
              if (!match)
                throw new Error("Couldn’t parse latest version from Maven metadata");
              return match[1];
            }

            async function checkAndPromptForUpdate(messages: string[]): Promise<string> {
              const latestVersion = await getLatestVersion();
              if (latestVersion === CURRENT_JAR_VERSION) {
                messages.push(`Current version (${CURRENT_JAR_VERSION}) is the latest.`);
                return CURRENT_JAR_VERSION;
              }

              messages.push(
                `Newer version available: ${latestVersion} (current: ${CURRENT_JAR_VERSION})`
              );
              const rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout,
              });

              return new Promise((resolve) => {
                const prompt = "Do you want to update to the latest version? (y/n): ";
                messages.push(prompt);
                rl.question(prompt, (answer) => {
                  rl.close();
                  if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
                    messages.push(`Switching to version ${latestVersion}...`);
                    resolve(latestVersion);
                  } else {
                    messages.push(`Sticking with version ${CURRENT_JAR_VERSION}.`);
                    resolve(CURRENT_JAR_VERSION);
                  }
                });
              });
            }

            async function ensureJarExists(
              version: string,
              messages: string[]
            ): Promise<string> {
              const jarPath = join(JARS_DIR, `openapi-generator-cli-${version}.jar`);
              const jarUrl = `https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${version}/openapi-generator-cli-${version}.jar`;

              if (!existsSync(jarPath)) {
                messages.push(`Downloading OpenAPI Generator CLI v${version}...`);
                try {
                  execSync(`curl -L -o ${jarPath} ${jarUrl}`, { stdio: "inherit" });
                  messages.push(`Downloaded ${jarPath}`);
                } catch (error) {
                  messages.push("Failed to download JAR.");
                  throw error;
                }
              } else {
                messages.push(`Using existing ${jarPath}`);
              }
              return jarPath;
            }

            function regenerateClient(jarPath: string, messages: string[]) {
              messages.push("Regenerating client from spec...");
              const command = `java -jar ${jarPath} generate -i ${SPEC_INPUT} -g typescript-fetch -o ${OUTPUT_DIR}`;
              try {
                execSync(command, { stdio: "inherit" });
                messages.push("Client regeneration complete.");
              } catch (error) {
                messages.push("Regeneration failed.");
                throw error;
              }
            }

            async function main() {
              const messages: string[] = [];
              try {
                const versionToUse = await checkAndPromptForUpdate(messages);
                const jarPath = await ensureJarExists(versionToUse, messages);
                regenerateClient(jarPath, messages);
              } catch (error) {
                console.error("Error occurred during process:", error);
              } finally {
                console.log("\n--- Key Messages ---");
                messages.forEach((msg) => console.log(msg));
              }
            }

            main().catch((error) => {
              console.error("Error in regeneration process:", error);
              process.exit(1);
            });
    - name: openapitools.json
      type: file
    - name: package-lock.json
      type: file
    - name: package.json
      type: file
      contents: |
        {
          "name": "quickbase-js",
          "version": "1.1.0-beta.6",
          "description": "QuickBase JavaScript client for frameworks and vanilla JS",
          "type": "module",
          "main": "dist/esm/quickbase.js",
          "module": "dist/esm/quickbase.js",
          "types": "dist/esm/quickbase.d.ts",
          "publishConfig": {
            "access": "public"
          },
          "exports": {
            ".": {
              "import": {
                "minified": "./dist/esm/quickbase.min.js",
                "default": "./dist/esm/quickbase.js"
              },
              "require": {
                "minified": "./dist/umd/quickbase.umd.min.js",
                "default": "./dist/umd/quickbase.umd.js"
              },
              "types": "./dist/esm/quickbase.d.ts",
              "umd:types": "./dist/umd/quickbase.umd.d.ts"
            }
          },
          "scripts": {
            "build": "npm run build:esm && npm run build:umd",
            "build:esm": "rimraf dist/esm dist/temp dist/temp-src && node --loader ts-node/esm build-esm.js",
            "build:umd": "rimraf dist/umd dist/temp dist/temp-src && node --loader ts-node/esm build-umd.js",
            "release": "standard-version",
            "release:beta": "standard-version --prerelease beta",
            "release:alpha": "standard-version --prerelease alpha",
            "release:push": "npm run release:beta && git push --follow-tags origin main",
            "release:publish": "npm run release:push && npm publish --tag beta",
            "release:stable": "standard-version && git push --follow-tags origin main && npm publish",
            "fix-spec": "node --loader ts-node/esm open-api/fix-spec-main.ts",
            "regenerate:openapi": "rimraf src/generated && node --loader ts-node/esm open-api/regenerate-client.ts",
            "regenerate:unified": "node --loader ts-node/esm open-api/generate-unified-interface.ts",
            "regenerate:all": "npm run fix-spec && npm run regenerate:openapi && npm run regenerate:unified",
            "log-gen": "node --loader ts-node/esm tools/log-gen.ts",
            "test:all": "vitest run tests/vitest/**/**/*.test.ts --reporter=basic && playwright test tests/playwright/qb --config playwright.config.ts --reporter=dot --quiet",
            "test:pw:qb:all": "playwright test tests/playwright/qb --config playwright.config.ts",
            "test:vitest:all": "vitest run tests/vitest/**/**/*.test.ts",
            "test:vitest:qb": "vitest run tests/vitest/qb/**/*.test.ts",
            "test:vitest:unit": "vitest run tests/vitest/unit/**/*.test.ts",
            "test:vitest:qb:apps": "vitest run tests/vitest/qb/apps/**/*.test.ts",
            "test:vitest:qb:auth": "vitest run tests/vitest/qb/auth/**/*.test.ts",
            "test:vitest:qb:fields": "vitest run tests/vitest/qb/fields/**/*.test.ts",
            "test:vitest:qb:records": "vitest run tests/vitest/qb/records/**/*.test.ts",
            "test:vitest:qb:tables": "vitest run tests/vitest/qb/tables/**/*.test.ts",
            "test:vitest:unit:apps": "vitest run tests/vitest/unit/apps/**/*.test.ts",
            "test:vitest:unit:auth": "vitest run tests/vitest/unit/auth/**/*.test.ts",
            "test:vitest:unit:fields": "vitest run tests/vitest/unit/fields/**/*.test.ts",
            "test:vitest:unit:records": "vitest run tests/vitest/unit/records/**/*.test.ts",
            "test:vitest:unit:tables": "vitest run tests/vitest/unit/tables/**/*.test.ts",
            "test:pw:qb:auth": "playwright test tests/playwright/qb/auth"
          },
          "dependencies": {
            "typescript": "^5.8.2"
          },
          "devDependencies": {
            "@openapitools/openapi-generator-cli": "^2.17.0",
            "@playwright/test": "^1.51.0",
            "@rollup/plugin-commonjs": "^28.0.3",
            "@rollup/plugin-node-resolve": "^16.0.0",
            "@rollup/plugin-terser": "^0.4.4",
            "@rollup/plugin-typescript": "^12.1.2",
            "@types/js-yaml": "^4.0.9",
            "@types/node": "^22.13.10",
            "dotenv": "^16.4.7",
            "glob": "^11.0.1",
            "js-yaml": "^4.1.0",
            "jsdom": "^26.0.0",
            "node-fetch": "^3.3.2",
            "openapi-types": "^12.1.3",
            "rimraf": "^5.0.10",
            "rollup": "^4.35.0",
            "rollup-plugin-dts": "^6.1.1",
            "standard-version": "^9.5.0",
            "ts-morph": "^25.0.1",
            "ts-node": "^10.9.2",
            "tslib": "^2.8.1",
            "undici-types": "^7.5.0",
            "vitest": "^3.0.8"
          }
        }
    - name: playwright.config.ts
      type: file
    - name: regenerate_output.log
      type: file
    - name: rollup.config.js
      type: file
      contents: |
        import terser from "@rollup/plugin-terser";
        import nodeResolve from "@rollup/plugin-node-resolve";
        import commonjs from "@rollup/plugin-commonjs";
        import dts from "rollup-plugin-dts";
        import typescript from "@rollup/plugin-typescript";

        const isProd = process.env.NODE_ENV === "production";

        // External dependencies for both ESM and UMD builds
        const external = [
          "node:http",
          "node:https",
          "node:zlib",
          "node:stream",
          "node:buffer",
          "node:util",
          "node:url",
          "node:net",
          "node:fs",
          "node:path",
          "node-fetch",
        ];

        // Global mappings for UMD (browser) build
        const globals = {
          "node-fetch": "fetch", // Map node-fetch to window.fetch in browsers
        };

        export default [
          // ESM Build
          {
            input: "src/quickbaseClient.ts",
            output: {
              dir: "dist/esm",
              format: "esm",
              sourcemap: true,
              entryFileNames: "quickbase.js",
            },
            external,
            plugins: [
              nodeResolve({ preferBuiltins: true }), // Node.js resolution
              commonjs(), // Convert CommonJS to ESM
              typescript({
                tsconfig: "./tsconfig.json",
                noEmitOnError: true, // Fail on TypeScript errors
                // Use Rollup to emit JavaScript, overriding noEmit for this build
              }),
              isProd && terser(), // Minification for production
            ],
          },
          // UMD Build
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/umd/quickbase.umd.js",
              format: "umd",
              name: "QuickbaseJS", // Global name for browser
              sourcemap: true,
              globals,
            },
            external,
            plugins: [
              nodeResolve({ preferBuiltins: true, browser: true }), // Browser-first resolution
              commonjs(), // Convert CommonJS to UMD
              typescript({
                tsconfig: "./tsconfig.json",
                noEmitOnError: true, // Fail on TypeScript errors
                // Use Rollup to emit JavaScript, overriding noEmit for this build
              }),
              isProd && terser(), // Minification for production
            ],
          },
          // ESM Declarations
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/esm/quickbase.d.ts",
              format: "esm",
            },
            plugins: [
              dts({
                tsconfig: "./tsconfig.json",
                respectExternal: true, // Include external dependencies in declarations
              }),
            ],
          },
          // UMD Declarations
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/umd/quickbase.umd.d.ts",
              format: "umd",
            },
            plugins: [
              dts({
                tsconfig: "./tsconfig.json",
                respectExternal: true, // Include external dependencies in declarations
              }),
            ],
          },
        ].map((config) => ({
          ...config,
          onwarn(warning, warn) {
            // Suppress TypeScript plugin warnings
            if (
              warning.code === "PLUGIN_WARNING" &&
              warning.plugin === "typescript" &&
              warning.message.includes("TS5096")
            ) {
              return;
            }
            warn(warning);
          },
        }));
    - name: src
      type: directory
      children:
        - name: generated
          type: directory
          children:
            - name: .openapi-generator
              type: directory
              children:
                - name: FILES
                  type: file
                - name: VERSION
                  type: file
            - name: .openapi-generator-ignore
              type: file
            - name: apis
              type: directory
              children:
                - name: AppsApi.ts
                  type: file
                - name: AuditApi.ts
                  type: file
                - name: AuthApi.ts
                  type: file
                - name: DocumentTemplatesApi.ts
                  type: file
                - name: EventsApi.ts
                  type: file
                - name: FieldsApi.ts
                  type: file
                - name: FilesApi.ts
                  type: file
                - name: FormulasApi.ts
                  type: file
                - name: PlatformAnalyticsApi.ts
                  type: file
                - name: RecordsApi.ts
                  type: file
                - name: RelationshipsApi.ts
                  type: file
                - name: ReportsApi.ts
                  type: file
                - name: SolutionsApi.ts
                  type: file
                - name: TablesApi.ts
                  type: file
                - name: UserTokenApi.ts
                  type: file
                - name: UsersApi.ts
                  type: file
                - name: index.ts
                  type: file
            - name: index.ts
              type: file
            - name: models
              type: directory
              children:
                - name: AddMembersToGroup200Response.ts
                  type: file
                - name: AddSubgroupsToGroup200Response.ts
                  type: file
                - name: App.ts
                  type: file
                - name: AppEvent.ts
                  type: file
                - name: AppMemoryInfo.ts
                  type: file
                - name: AppSecurityProperties.ts
                  type: file
                - name: Audit200Response.ts
                  type: file
                - name: Audit202Response.ts
                  type: file
                - name: AuditRequest.ts
                  type: file
                - name: CloneUserToken200Response.ts
                  type: file
                - name: CloneUserTokenRequest.ts
                  type: file
                - name: CopyApp200Response.ts
                  type: file
                - name: CopyAppRequest.ts
                  type: file
                - name: CopyAppRequestProperties.ts
                  type: file
                - name: CreateApp200Response.ts
                  type: file
                - name: CreateAppRequest.ts
                  type: file
                - name: CreateAppRequestVariablesInner.ts
                  type: file
                - name: CreateField200Response.ts
                  type: file
                - name: CreateFieldRequest.ts
                  type: file
                - name: CreateRelationship200Response.ts
                  type: file
                - name: CreateRelationshipRequest.ts
                  type: file
                - name: CreateTableRequest.ts
                  type: file
                - name: DeactivateUserToken200Response.ts
                  type: file
                - name: DeleteApp200Response.ts
                  type: file
                - name: DeleteAppRequest.ts
                  type: file
                - name: DeleteFields200Response.ts
                  type: file
                - name: DeleteFieldsRequest.ts
                  type: file
                - name: DeleteFile200Response.ts
                  type: file
                - name: DeleteRecords200Response.ts
                  type: file
                - name: DeleteRecordsRequest.ts
                  type: file
                - name: DeleteRelationship200Response.ts
                  type: file
                - name: DeleteTableResponse.ts
                  type: file
                - name: DenyUsers200Response.ts
                  type: file
                - name: EventOwner.ts
                  type: file
                - name: ExchangeSsoToken200Response.ts
                  type: file
                - name: ExchangeSsoTokenRequest.ts
                  type: file
                - name: Field.ts
                  type: file
                - name: FieldPermissionsInner.ts
                  type: file
                - name: FieldProperties.ts
                  type: file
                - name: FieldUsage.ts
                  type: file
                - name: FieldUsageField.ts
                  type: file
                - name: FieldUsageUsage.ts
                  type: file
                - name: GenerateDocument200Response.ts
                  type: file
                - name: GetRelationships200Response.ts
                  type: file
                - name: GetRelationships200ResponseMetadata.ts
                  type: file
                - name: GetReport200Response.ts
                  type: file
                - name: GetTempTokenDBID200Response.ts
                  type: file
                - name: GetUsers200Response.ts
                  type: file
                - name: GetUsersRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200Response.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: file
                - name: PlatformAnalyticReads200Response.ts
                  type: file
                - name: Record.ts
                  type: file
                - name: RecordValue.ts
                  type: file
                - name: Relationship.ts
                  type: file
                - name: RelationshipField.ts
                  type: file
                - name: RemoveMembersFromGroup200Response.ts
                  type: file
                - name: RemoveSubgroupsFromGroup200Response.ts
                  type: file
                - name: ReportRunResponse.ts
                  type: file
                - name: RunFormula200Response.ts
                  type: file
                - name: RunFormulaRequest.ts
                  type: file
                - name: RunQueryRequest.ts
                  type: file
                - name: RunQueryRequestGroupByInner.ts
                  type: file
                - name: RunQueryRequestOptions.ts
                  type: file
                - name: RunQueryRequestSortByInner.ts
                  type: file
                - name: RunQueryResponse.ts
                  type: file
                - name: RunQueryResponseFieldsInner.ts
                  type: file
                - name: RunQueryResponseMetadata.ts
                  type: file
                - name: Table.ts
                  type: file
                - name: TransferUserToken200Response.ts
                  type: file
                - name: TransferUserTokenRequest.ts
                  type: file
                - name: UndenyUsers200Response.ts
                  type: file
                - name: UpdateRelationshipRequest.ts
                  type: file
                - name: UpdateTableRequest.ts
                  type: file
                - name: Upsert200Response.ts
                  type: file
                - name: Upsert200ResponseDataInnerValue.ts
                  type: file
                - name: Upsert200ResponseMetadata.ts
                  type: file
                - name: Upsert207Response.ts
                  type: file
                - name: Upsert207ResponseMetadata.ts
                  type: file
                - name: UpsertRequest.ts
                  type: file
                - name: UsageCount.ts
                  type: file
                - name: index.ts
                  type: file
            - name: runtime.ts
              type: file
        - name: generated-unified
          type: directory
          children:
            - name: QuickbaseClient.ts
              type: file
        - name: index.ts
          type: file
        - name: quickbaseClient.ts
          type: file
          contents: |
            // src/quickbaseClient.ts
            import { QuickbaseClient as IQuickbaseClient } from "./generated-unified/QuickbaseClient";
            import { Configuration, HTTPHeaders, ResponseError } from "./generated/runtime";
            import * as apis from "./generated/apis";
            import { TokenCache } from "./tokenCache";
            import { simplifyName } from "./utils.ts"; // Add this import

            // Re-export all model types from generated/models
            export * from "./generated/models";

            // Remove the local simplifyName function
            // (The rest of the file remains unchanged)

            export interface QuickbaseClient extends IQuickbaseClient {}

            export interface QuickbaseConfig {
              realm: string;
              userToken?: string;
              tempToken?: string;
              useTempTokens?: boolean;
              debug?: boolean;
              fetchApi?: typeof fetch;
            }

            export interface TempTokenParams {
              appId?: string;
              tableId?: string;
              dbid?: string;
            }

            type ApiMethod<K extends keyof QuickbaseClient> = (
              requestParameters: Parameters<QuickbaseClient[K]>[0],
              initOverrides?: RequestInit
            ) => Promise<ReturnType<QuickbaseClient[K]>>;

            interface MethodInfo<K extends keyof QuickbaseClient> {
              api: any;
              method: ApiMethod<K>;
              paramMap: string[];
            }

            type MethodMap = { [K in keyof QuickbaseClient]: MethodInfo<K> };

            const getParamNames = (fn: (...args: any[]) => any): string[] =>
              fn
                .toString()
                .slice(fn.toString().indexOf("(") + 1, fn.toString().indexOf(")"))
                .split(",")
                .map((p) => p.trim().split("=")[0].trim())
                .filter((p) => p && !p.match(/^\{/) && p !== "options");

            const extractDbid = (
              params: Partial<TempTokenParams>,
              errorMessage: string
            ): string => {
              const dbid = params.dbid || params.tableId || params.appId;
              if (!dbid) {
                throw new Error(errorMessage);
              }
              return dbid;
            };

            export function quickbase(config: QuickbaseConfig): QuickbaseClient {
              const {
                realm,
                userToken,
                tempToken: initialTempToken,
                useTempTokens,
                fetchApi,
                debug,
              } = config;
              const baseUrl = `https://api.quickbase.com/v1`;

              const tokenCache = new TokenCache();

              const baseHeaders: HTTPHeaders = {
                "QB-Realm-Hostname": `${realm}.quickbase.com`,
                "Content-Type": "application/json",
              };

              if (initialTempToken) {
                baseHeaders["Authorization"] = `QB-TEMP-TOKEN ${initialTempToken}`;
              } else if (userToken && !useTempTokens) {
                baseHeaders["Authorization"] = `QB-USER-TOKEN ${userToken}`;
              }

              const defaultFetch: typeof fetch | undefined =
                typeof globalThis.window !== "undefined"
                  ? globalThis.window.fetch.bind(globalThis.window)
                  : undefined;
              const configuration = new Configuration({
                basePath: baseUrl,
                headers: { ...baseHeaders },
                fetchApi: fetchApi || defaultFetch,
                credentials: "omit", // Default to "omit" for all requests
              });

              if (!configuration.fetchApi && typeof globalThis.window === "undefined") {
                throw new Error(
                  "fetchApi must be provided in non-browser environments (e.g., Node.js)"
                );
              }

              const apiInstances = Object.fromEntries(
                Object.entries(apis)
                  .filter(([name]) => name.endsWith("Api"))
                  .map(([name, ApiClass]) => [
                    name.replace("Api", "").toLowerCase(),
                    new ApiClass(configuration),
                  ])
              );

              const methodMap = buildMethodMap();

              function buildMethodMap(): MethodMap {
                const methodMap: Partial<MethodMap> = {};
                const isValidMethod = (name: string) =>
                  !name.startsWith("_") &&
                  name !== "constructor" &&
                  !["Middleware", "Pre", "Post", "Raw"].some((s) => name.includes(s));

                for (const [apiName, api] of Object.entries(apiInstances)) {
                  Object.getOwnPropertyNames(Object.getPrototypeOf(api))
                    .filter(
                      (name) =>
                        isValidMethod(name) &&
                        typeof api[name as keyof typeof api] === "function"
                    )
                    .forEach((rawMethodName) => {
                      const simplifiedName = simplifyName(
                        rawMethodName
                      ) as keyof QuickbaseClient;
                      const method = api[rawMethodName as keyof typeof api];
                      const boundMethod = method.bind(api as any) as unknown;
                      if (typeof boundMethod === "function" && boundMethod.length <= 2) {
                        methodMap[simplifiedName] = {
                          api,
                          method: boundMethod as ApiMethod<typeof simplifiedName>,
                          paramMap: getParamNames(method),
                        };
                      }
                    });
                }
                return methodMap as MethodMap;
              }

              const fetchTempToken = async (dbid: string): Promise<string> => {
                const effectiveFetch = fetchApi || defaultFetch;
                if (!effectiveFetch) {
                  throw new Error(
                    "No fetch implementation available for fetching temp token"
                  );
                }

                const response = await effectiveFetch(
                  `https://api.quickbase.com/v1/auth/temporary/${dbid}`,
                  {
                    method: "GET",
                    headers: { ...baseHeaders },
                    credentials: "include", // Explicitly include credentials for token fetch
                  }
                );

                if (!response.ok) {
                  const errorBody: { message?: string } = await response.json();
                  throw new Error(
                    `API Error: ${errorBody.message || "Unknown error"} (Status: ${
                      response.status
                    })`
                  );
                }

                const tokenResult = await response.json();
                const token = tokenResult.temporaryAuthorization;
                if (!token) {
                  throw new Error("No temporary token returned from API");
                }
                tokenCache.set(dbid, token);
                if (debug) {
                  console.log(
                    `Fetched and cached new token for dbid: ${dbid}`,
                    token,
                    `Expires at: ${new Date(
                      Date.now() + (4 * 60 + 50) * 1000
                    ).toISOString()}`
                  );
                }
                return token;
              };

              async function invokeMethod<K extends keyof QuickbaseClient>(
                methodName: K,
                params: Parameters<QuickbaseClient[K]>[0] & Partial<TempTokenParams>,
                retryCount: number = 0
              ): Promise<ReturnType<QuickbaseClient[K]>> {
                const methodInfo = methodMap[methodName];
                if (!methodInfo) {
                  throw new Error(`Method ${methodName} not found`);
                }

                const requestParameters =
                  methodInfo.paramMap.length === 1 &&
                  methodInfo.paramMap[0] === "requestParameters"
                    ? { requestParameters: params }
                    : params;
                let requestOptions: RequestInit = {
                  credentials: "omit", // Explicitly set to "omit" for API calls
                };

                const selectedToken =
                  initialTempToken || (userToken && !useTempTokens ? userToken : undefined);

                if (methodName === "getTempTokenDBID" && useTempTokens) {
                  const dbid = extractDbid(params, "No dbid provided for getTempTokenDBID");
                  const cachedToken = tokenCache.get(dbid);
                  if (cachedToken) {
                    return { temporaryAuthorization: cachedToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                }

                let authorizationToken = selectedToken;
                if (useTempTokens && !authorizationToken) {
                  const dbid = extractDbid(
                    params,
                    `No dbid found in params for ${methodName} to fetch temp token`
                  );
                  const cachedToken = tokenCache.get(dbid);
                  authorizationToken = cachedToken || (await fetchTempToken(dbid));
                  if (methodName === "getTempTokenDBID") {
                    return { temporaryAuthorization: authorizationToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                  };
                } else if (authorizationToken) {
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-USER-TOKEN ${authorizationToken}`,
                  };
                }

                try {
                  return await methodInfo.method(requestParameters, requestOptions);
                } catch (error) {
                  if (
                    error instanceof ResponseError &&
                    error.response.status === 401 &&
                    retryCount < 1 &&
                    useTempTokens
                  ) {
                    if (debug) {
                      console.log(
                        `Authorization error for ${methodName}, refreshing token:`,
                        error.message
                      );
                    }
                    const dbid = extractDbid(
                      params,
                      `No dbid to refresh token after authorization error`
                    );
                    authorizationToken = await fetchTempToken(dbid);
                    requestOptions.headers = {
                      ...baseHeaders,
                      Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                    };
                    if (debug) {
                      console.log(`Retrying ${methodName} with new token`);
                    }
                    return invokeMethod(methodName, params, retryCount + 1);
                  }
                  if (error instanceof ResponseError) {
                    let errorMessage = error.message;
                    try {
                      const errorBody: { message?: string } = await error.response.json();
                      if (debug) {
                        console.log(`Error response body for ${methodName}:`, errorBody);
                      }
                      errorMessage = errorBody.message || errorMessage;
                    } catch (e) {
                      // Silent fail on parse error
                    }
                    throw new Error(
                      `API Error: ${errorMessage} (Status: ${error.response.status})`
                    );
                  }
                  throw error;
                }
              }

              const proxy = new Proxy<QuickbaseClient>({} as QuickbaseClient, {
                get: (_, prop: string): ((params: any) => Promise<any>) | undefined => {
                  if (prop in methodMap) {
                    const methodName = prop as keyof QuickbaseClient;
                    return (params: Parameters<QuickbaseClient[typeof methodName]>[0]) =>
                      invokeMethod(methodName, params);
                  }
                  return undefined;
                },
              });

              return proxy;
            }
        - name: tokenCache.ts
          type: file
          contents: |
            interface CachedToken {
              token: string;
              expiresAt: number; // Timestamp in milliseconds
            }

            export class TokenCache {
              private cache: Map<string, CachedToken>;
              private readonly lifespan: number; // Token lifespan in milliseconds

              constructor(lifespan: number = 4 * 60 * 1000 + 50 * 1000) {
                // Default 4:50
                this.cache = new Map<string, CachedToken>();
                this.lifespan = lifespan;
              }

              get(dbid: string): string | undefined {
                const entry = this.cache.get(dbid);
                const now = Date.now();
                if (entry && entry.expiresAt > now) {
                  return entry.token;
                }
                return undefined; // Expired or not found
              }

              // New method to get full entry
              getEntry(dbid: string): CachedToken | undefined {
                const entry = this.cache.get(dbid);
                const now = Date.now();
                if (entry && entry.expiresAt > now) {
                  return entry;
                }
                return undefined; // Expired or not found
              }

              set(dbid: string, token: string): void {
                const now = Date.now();
                this.cache.set(dbid, {
                  token,
                  expiresAt: now + this.lifespan,
                });
              }

              dump(): [string, CachedToken][] {
                return Array.from(this.cache.entries());
              }

              // New method to clear the cache
              clear(): void {
                this.cache.clear();
              }
            }
        - name: utils.ts
          type: file
    - name: test-artifacts
      type: directory
      children:
        - name: .last-run.json
          type: file
        - name: test-results.json
          type: file
    - name: test-esm.js
      type: file
    - name: test-results.json
      type: file
    - name: test-umd.js
      type: file
    - name: test.ts
      type: file
    - name: tests
      type: directory
      children:
        - name: playwright
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: auth
                  type: directory
                  children:
                    - name: cacheSwitching.test.ts
                      type: file
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getAppWithTempToken.test.ts
                      type: file
                    - name: getAppWithUserToken.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: tokenPrefetch.test.ts
                      type: file
                    - name: tokenRenewal.test.ts
                      type: file
        - name: setup.ts
          type: file
        - name: vitest
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: deleteFields.test.ts
                      type: file
                    - name: getField.test.ts
                      type: file
                    - name: getFieldUsage.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                    - name: getFieldsUsage.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
            - name: unit
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: auth
                  type: directory
                  children:
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: retryOn401.test.ts
                      type: file
                    - name: two401s.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: deleteFields.test.ts
                      type: file
                    - name: getField.test.ts
                      type: file
                    - name: getFieldUsage.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                    - name: getFieldsUsage.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
                - name: umd.test.ts
                  type: file
    - name: text.txt
      type: file
    - name: tools
      type: directory
      children:
        - name: log-gen.ts
          type: file
        - name: log-gen.yaml
          type: file
        - name: openapi-jars
          type: directory
          children:
            - name: openapi-generator-cli-7.12.0.jar
              type: file
    - name: tsconfig.build.json
      type: file
      contents: |-
        {
          "extends": "./tsconfig.json",
          "compilerOptions": {
            "outDir": "dist/temp",
            "noEmit": false,
            "allowImportingTsExtensions": false,
            "declaration": false,
            "sourceMap": true
          },
          "include": ["dist/temp-src/**/*"],
          "exclude": [
            "node_modules",
            "dist",
            "tests/**/*",
            "src/**/*" // Exclude original src/ to avoid confusion
          ]
        }
    - name: tsconfig.json
      type: file
      contents: |
        {
          "compilerOptions": {
            "target": "ESNext",
            "module": "ESNext",
            "moduleResolution": "bundler",
            "strict": true,
            "lib": ["ES2015", "ESNext", "DOM"],
            "types": ["node", "playwright/test", "undici-types"],
            "esModuleInterop": true,
            "resolveJsonModule": true,
            "allowImportingTsExtensions": true,
            "noEmit": true,
            "outDir": "dist",
            "rootDir": ".",
            "declaration": true,
            "sourceMap": true,
            "baseUrl": ".",
            "paths": {
              "@/*": ["src/*"],
              "@tests/*": ["tests/*"]
            }
          },
          "include": ["src/**/*", "tests/**/*", "open-api/**/*", "tools/**/*"],
          "exclude": ["node_modules", "dist/**/*", "generated/**/*", "specs"],
          "ts-node": {
            "esm": true,
            "transpileOnly": true
          }
        }
    - name: versionrc.json
      type: file
    - name: vitest.config.ts
      type: file
      contents: |
        // vitest.config.ts
        import { defineConfig } from "vitest/config";
        import path from "path";
        import dotenv from "dotenv"; // Add this import

        // Load .env variables before tests run
        dotenv.config({ path: path.resolve(__dirname, ".env") });

        export default defineConfig({
          test: {
            environment: "jsdom",
            include: ["tests/vitest/**/**/*.test.ts"],
            setupFiles: ["tests/setup.ts"], // Relative path from root
            pool: "forks",
            poolOptions: {
              forks: {
                singleFork: true, // Run tests sequentially
              },
            },
          },
          resolve: {
            alias: {
              "@": path.resolve(__dirname, "./src"), // For src/ imports
              "@tests": path.resolve(__dirname, "./tests"), // For tests/ imports
            },
          },
        });
