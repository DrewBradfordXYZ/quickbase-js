project: >-
  quickbase-js
date: >-
  3/20/2025
root: >-
  /home/drew/Projects/quickbase-js
goals:
  - >-
    A
    library
    for
    interacting
    with
    the
    QuickBase
    RESTful
    API.
  - >-
    Use
    OpenAPI
    to
    generate
    types
    and
    methods
    using
    a
    proxy.
    Validate
    with
    tests.
  - >-
    Provide
    robust
    and
    intuitive
    temporary
    token
    support
    for
    browser
    environments.
  - >-
    User
    Tokens
    support
    both
    Node.js
    and
    browser
    environments.
  - >-
    Use
    case:
    JS
    frameworks
    like
    React,
    Vue,
    and
    Angular
    hosted
    in
    QuickBase
    code
    pages.
  - >-
    Enable
    a
    flexible
    or
    native
    fetch
    in
    the
    browser.
  - >-
    Enable
    a
    flexible
    fetch
    framework
    in
    Node.js.
  - >-
    #
  - >-
    No
    manual
    updating
    methods
    when
    the
    QuickBase
    API
    changes.
  - >-
    The
    proxy
    magic
    dynamically
    maps
    generated
    methods
    and
    types.
  - >-
    #
  - >-
    TokenCache
    is
    defined
    per
    quickbaseClient
    call,
    so
    each
    instance
    has
    its
    own
    isolated
    TokenCache.
  - >-
    Each
    quickbase
    client
    instance
    has
    an
    isolated
    and
    individual
    token
    cache.
pipelineOverview:
  - >-
    What
    I’m
    Trying
    to
    Do
  - >-
    My
    approach
    is
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById
    so
    QuickbaseClient.ts
    can
    map
    it
    to
    client.getApp.
    Steps
    include:
  - >-
    Fix
    fix-spec.ts:
  - >-
    Add
    tags:
    ["Apps"]
    to
    /apps/*
    endpoints
    to
    group
    them
    into
    AppsApi.ts.
  - >-
    Ensure
    all
    endpoints
    and
    models
    are
    correctly
    defined
    and
    typed.
  - >-
    Debug
    regenerate-client.ts:
  - >-
    Enhance
    logging
    to
    catch
    why
    AppsApi.ts
    isn’t
    generated.
  - >-
    Test
    if
    getAppById
    appears
    in
    another
    file
    (e.g.,
    DefaultApi.ts).
  - >-
    Update
    QuickbaseClient.ts:
  - >-
    Adjust
    imports
    to
    use
    the
    correct
    API
    class
    once
    generated.
  - >-
    Test
    and
    Iterate:
  - >-
    Run
    npm
    run
    fix-spec,
    npm
    run
    regenerate,
    and
    npm
    run
    test
    to
    verify
    AppsApi.ts
    exists
    and
    test.ts
    works.
  - >-
    The
    latest
    fix-spec.ts
    with
    tags
    aims
    to
    force
    the
    generator
    to
    create
    AppsApi.ts,
    addressing
    the
    missing
    file
    issue.
  - >-
    Relevant
    Project
    Files
  - >-
    Here’s
    a
    list
    of
    files
    that
    would
    help
    understand
    and
    resolve
    this
    problem,
    along
    with
    their
    roles:
  - >-
    src/code-generation/fix-spec.ts:
  - >-
    Role:
    Modifies
    the
    original
    QuickBase
    spec
    (e.g.,
    QuickBase_RESTful_*.json)
    to
    create
    quickbase-fixed.json
    with
    required
    endpoints
    (e.g.,
    /apps/{appId}).
  - >-
    Relevance:
    Defines
    the
    spec
    fed
    to
    the
    generator;
    errors
    here
    affect
    generation.
  - >-
    src/code-generation/quickbase-fixed.json:
  - >-
    Role:
    The
    processed
    OpenAPI
    spec
    used
    by
    regenerate-client.ts
    to
    generate
    code.
  - >-
    Relevance:
    Confirms
    if
    /apps/{appId}
    is
    correctly
    structured
    with
    operationId:
    "getAppById".
  - >-
    src/code-generation/regenerate-client.ts:
  - >-
    Role:
    Runs
    OpenAPI
    Generator
    to
    produce
    src/generated/
    files
    (APIs
    and
    models)
    and
    fixes
    .ts
    extensions
    with
    ts-morph.
  - >-
    Relevance:
    Controls
    the
    generation
    process;
    logs
    reveal
    why
    AppsApi.ts
    is
    missing.
  - >-
    src/generated/apis/AppsApi.ts
    (if
    exists):
  - >-
    Role:
    Should
    contain
    getAppById
    method
    for
    /apps/{appId}
    GET.
  - >-
    Relevance:
    Missing
    file
    is
    the
    core
    issue;
    its
    absence
    breaks
    QuickbaseClient.ts.
  - >-
    src/generated/apis/DefaultApi.ts:
  - >-
    Role:
    Default
    API
    class
    for
    untagged
    operations.
  - >-
    Relevance:
    Might
    contain
    getAppById
    if
    tags
    are
    misconfigured.
  - >-
    src/QuickbaseClient.ts:
  - >-
    Role:
    Wraps
    generated
    API
    classes
    (e.g.,
    AppsApi)
    in
    a
    Proxy
    for
    ergonomic
    calls
    (e.g.,
    client.getApp).
  - >-
    Relevance:
    Fails
    to
    import
    AppsApi.ts,
    causing
    the
    runtime
    error.
  - >-
    src/test.ts:
  - >-
    Role:
    Test
    script
    calling
    client.getApp({
    appId
    }).
  - >-
    Relevance:
    Final
    validation
    point;
    shows
    if
    the
    fix
    works.
  - >-
    .env.development:
  - >-
    Role:
    Stores
    QB_REALM,
    QB_USER_TOKEN,
    QB_APP_ID
    for
    API
    authentication.
  - >-
    Relevance:
    Ensures
    the
    API
    call
    has
    valid
    credentials
    (not
    the
    current
    issue,
    but
    critical
    for
    success).
  - >-
    src/specs/QuickBase_RESTful_API_2025-03-04T06_22_39.725Z.json
    (or
    similar):
  - >-
    Role:
    Original
    QuickBase
    API
    spec
    before
    fix-spec.ts
    processing.
  - >-
    Relevance:
    Shows
    how
    /apps/{appId}
    was
    originally
    defined,
    helping
    identify
    conflicts.
  - >-
    package.json:
  - >-
    Role:
    Defines
    scripts
    (fix-spec,
    regenerate,
    test)
    and
    dependencies
    (e.g.,
    ts-node,
    openapi-generator-cli).
  - >-
    Relevance:
    Confirms
    script
    commands
    and
    versions
    align
    with
    our
    process.
  - >-
    What
    We
    Achieved
  - >-
    Goal
    Met:
    You
    can
    now
    call
    client.getApp({
    appId:
    "buwai2zpe"
    })
    and
    get
    the
    app
    details
    {
    id:
    'buwai2zpe',
    name:
    'qb-copy'
    }.
  - >-
    Fixes
    Applied:
  - >-
    Added
    tags:
    ["Apps"]
    in
    fix-spec.ts
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById.
  - >-
    Updated
    QuickbaseClient.ts
    to:
  - >-
    Use
    prototype
    methods
    via
    Object.getOwnPropertyNames.
  - >-
    Bind
    methods
    to
    preserve
    context
    with
    .bind(api).
  - >-
    Handle
    getAppById’s
    direct
    JSON
    return
    instead
    of
    a
    Response
    object.
  - >-
    Result:
    The
    ergonomic
    API
    you
    wanted
    (client.getApp)
    works
    seamlessly
    with
    the
    generated
    AppsApi.ts.
  - >-
    Why
    It
    Works
    Now
  - >-
    fix-spec.ts:
  - >-
    Correctly
    defined
    /apps/{appId}
    with
    operationId:
    "getAppById"
    and
    tags:
    ["Apps"],
    ensuring
    AppsApi.ts
    generation.
  - >-
    regenerate-client.ts:
  - >-
    Successfully
    ran
    OpenAPI
    Generator
    to
    produce
    AppsApi.ts
    with
    getAppById.
  - >-
    QuickbaseClient.ts:
  - >-
    buildMethodMap
    now
    captures
    getAppById
    and
    maps
    it
    to
    getApp.
  - >-
    invokeMethod
    passes
    {
    appId:
    'buwai2zpe'
    }
    as
    requestParameters
    and
    handles
    the
    JSON
    response
    directly.
  - >-
    test.ts:
  - >-
    Calls
    client.getApp
    and
    logs
    the
    result,
    proving
    the
    end-to-end
    flow.
tree:
  name: >-
    .
  type: >-
    directory
  children:
    - name: >-
        .env
      type: >-
        file
    - name: >-
        .gitignore
      type: >-
        file
    - name: >-
        CHANGELOG.md
      type: >-
        file
    - name: >-
        LICENSE
      type: >-
        file
    - name: >-
        README.md
      type: >-
        file
    - name: >-
        api-examples.md
      type: >-
        file
    - name: >-
        build-common.js
      type: >-
        file
    - name: >-
        build-esm.js
      type: >-
        file
    - name: >-
        build-umd.js
      type: >-
        file
    - name: >-
        dist
      type: >-
        directory
      children:
        - name: >-
            esm
          type: >-
            directory
          children:
            - name: >-
                quickbase.d.ts
              type: >-
                file
            - name: >-
                quickbase.js
              type: >-
                file
            - name: >-
                quickbase.js.map
              type: >-
                file
            - name: >-
                quickbase.min.js
              type: >-
                file
            - name: >-
                quickbase.min.js.map
              type: >-
                file
        - name: >-
            umd
          type: >-
            directory
          children:
            - name: >-
                quickbase.umd.js
              type: >-
                file
            - name: >-
                quickbase.umd.js.map
              type: >-
                file
            - name: >-
                quickbase.umd.min.js
              type: >-
                file
            - name: >-
                quickbase.umd.min.js.map
              type: >-
                file
    - name: >-
        docs
      type: >-
        directory
      children:
        - name: >-
            .vitepress
          type: >-
            directory
          children:
            - name: >-
                cache
              type: >-
                directory
              children:
                - name: >-
                    deps
                  type: >-
                    directory
                  children:
                    - name: >-
                        @theme_index.js
                      type: >-
                        file
                    - name: >-
                        @theme_index.js.map
                      type: >-
                        file
                    - name: >-
                        _metadata.json
                      type: >-
                        file
                    - name: >-
                        chunk-5A67QEFC.js
                      type: >-
                        file
                    - name: >-
                        chunk-5A67QEFC.js.map
                      type: >-
                        file
                    - name: >-
                        chunk-7D4P4MMP.js
                      type: >-
                        file
                    - name: >-
                        chunk-7D4P4MMP.js.map
                      type: >-
                        file
                    - name: >-
                        package.json
                      type: >-
                        file
                    - name: >-
                        vitepress___@vue_devtools-api.js
                      type: >-
                        file
                    - name: >-
                        vitepress___@vue_devtools-api.js.map
                      type: >-
                        file
                    - name: >-
                        vitepress___@vueuse_core.js
                      type: >-
                        file
                    - name: >-
                        vitepress___@vueuse_core.js.map
                      type: >-
                        file
                    - name: >-
                        vue.js
                      type: >-
                        file
                    - name: >-
                        vue.js.map
                      type: >-
                        file
            - name: >-
                config.mts
              type: >-
                file
            - name: >-
                dist
              type: >-
                directory
              children:
                - name: >-
                    404.html
                  type: >-
                    file
                - name: >-
                    api-examples.html
                  type: >-
                    file
                - name: >-
                    assets
                  type: >-
                    directory
                  children:
                    - name: >-
                        api-examples.md.CRRh3xeI.js
                      type: >-
                        file
                    - name: >-
                        api-examples.md.CRRh3xeI.lean.js
                      type: >-
                        file
                    - name: >-
                        app.Yv9tMCdR.js
                      type: >-
                        file
                    - name: >-
                        chunks
                      type: >-
                        directory
                      children:
                        - name: >-
                            framework.Dh1jimFm.js
                          type: >-
                            file
                        - name: >-
                            theme.CDm2W-g2.js
                          type: >-
                            file
                    - name: >-
                        index.md.Mlz2-sGG.js
                      type: >-
                        file
                    - name: >-
                        index.md.Mlz2-sGG.lean.js
                      type: >-
                        file
                    - name: >-
                        inter-italic-cyrillic-ext.r48I6akx.woff2
                      type: >-
                        file
                    - name: >-
                        inter-italic-cyrillic.By2_1cv3.woff2
                      type: >-
                        file
                    - name: >-
                        inter-italic-greek-ext.1u6EdAuj.woff2
                      type: >-
                        file
                    - name: >-
                        inter-italic-greek.DJ8dCoTZ.woff2
                      type: >-
                        file
                    - name: >-
                        inter-italic-latin-ext.CN1xVJS-.woff2
                      type: >-
                        file
                    - name: >-
                        inter-italic-latin.C2AdPX0b.woff2
                      type: >-
                        file
                    - name: >-
                        inter-italic-vietnamese.BSbpV94h.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-cyrillic-ext.BBPuwvHQ.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-cyrillic.C5lxZ8CY.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-greek-ext.CqjqNYQ-.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-greek.BBVDIX6e.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-latin-ext.4ZJIpNVo.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-latin.Di8DUHzh.woff2
                      type: >-
                        file
                    - name: >-
                        inter-roman-vietnamese.BjW4sHH5.woff2
                      type: >-
                        file
                    - name: >-
                        markdown-examples.md.ediKJOVO.js
                      type: >-
                        file
                    - name: >-
                        markdown-examples.md.ediKJOVO.lean.js
                      type: >-
                        file
                    - name: >-
                        style.BXK1qnoW.css
                      type: >-
                        file
                - name: >-
                    hashmap.json
                  type: >-
                    file
                - name: >-
                    index.html
                  type: >-
                    file
                - name: >-
                    markdown-examples.html
                  type: >-
                    file
                - name: >-
                    vp-icons.css
                  type: >-
                    file
        - name: >-
            api-examples.md
          type: >-
            file
        - name: >-
            index.md
          type: >-
            file
        - name: >-
            markdown-examples.md
          type: >-
            file
        - name: >-
            node_modules
          type: >-
            directory
          children: []
    - name: >-
        docs-data
      type: >-
        directory
      children:
        - name: >-
            api-docs.json
          type: >-
            file
    - name: >-
        examples
      type: >-
        directory
      children:
        - name: >-
            quicbase-jsCDN.html
          type: >-
            file
        - name: >-
            react.js
          type: >-
            file
        - name: >-
            vanillajs.html
          type: >-
            file
    - name: >-
        index.md
      type: >-
        file
    - name: >-
        markdown-examples.md
      type: >-
        file
    - name: >-
        open-api
      type: >-
        directory
      children:
        - name: >-
            fix-spec-main.ts
          type: >-
            file
        - name: >-
            generate-unified-interface.ts
          type: >-
            file
        - name: >-
            regenerate-client.ts
          type: >-
            file
        - name: >-
            schema
          type: >-
            directory
          children:
            - name: >-
                enhance-general.ts
              type: >-
                file
            - name: >-
                fix-arrays.ts
              type: >-
                file
            - name: >-
                tags
              type: >-
                directory
              children:
                - name: >-
                    apps.ts
                  type: >-
                    file
                  contents: >
                    //
                    schema/tags/apps.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";


                    export
                    function
                    enhanceApps(
                      spec: Spec,
                      pathKey: string,
                      method: string,
                      operation: Operation
                    ):
                    void
                    {
                      const opId =
                        operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;
                      if (operation.parameters && operation.tags?.includes("Apps")) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.in === "body") {
                            if (!param.schema) param.schema = {};
                            let requestName =
                              param.schema.$ref?.split("/").pop() || `${opId}Request`;
                            requestName = normalizeDefinitionName(requestName);

                            if (
                              !spec.definitions[requestName] ||
                              !spec.definitions[requestName].type ||
                              Object.keys(spec.definitions[requestName]?.properties || {})
                                .length === 0
                            ) {
                              console.log(
                                `Defining schema for ${requestName} in ${pathKey}(${method})`
                              );
                              let properties;
                              if (pathKey.includes("/copy") && method === "post") {
                                properties = {
                                  name: { type: "string", description: "The name of the new app." },
                                  description: {
                                    type: "string",
                                    description: "A description for the new app.",
                                  },
                                  properties: {
                                    type: "object",
                                    properties: {
                                      keepData: {
                                        type: "boolean",
                                        description: "Whether to copy data.",
                                      },
                                      excludeFiles: {
                                        type: "boolean",
                                        description: "Whether to exclude files.",
                                      },
                                      usersAndRoles: {
                                        type: "boolean",
                                        description: "Whether to copy users and roles.",
                                      },
                                      assignUserToken: {
                                        type: "boolean",
                                        description: "Whether to assign the user token.",
                                      },
                                    },
                                    description: "Options for customizing the app copy process.",
                                  },
                                };
                              } else {
                                properties = {
                                  name: { type: "string", description: "The name of the app." },
                                  description: {
                                    type: "string",
                                    description: "A description for the app.",
                                  },
                                  assignToken: {
                                    type: "boolean",
                                    description: "Whether to assign the user token.",
                                  },
                                };
                              }
                              spec.definitions[requestName] = {
                                type: "object",
                                properties,
                                required: Object.keys(properties).filter(
                                  (key) => key !== "description" && key !== "properties"
                                ),
                                description: operation.summary || `Request body for ${opId}`,
                              };
                            }
                            param.schema = { $ref: `#/definitions/${requestName}` };
                            console.log(
                              `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                            );
                          }
                        });
                      }
                    }
                - name: >-
                    fields.ts
                  type: >-
                    file
                  contents: >
                    //
                    schema/tags/fields.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";


                    export
                    function
                    enhanceFields(
                      spec: Spec,
                      pathKey: string,
                      method: string,
                      operation: Operation
                    ):
                    void
                    {
                      const opId =
                        operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;
                      if (operation.parameters && operation.tags?.includes("Fields")) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.in === "body") {
                            if (!param.schema) param.schema = {};
                            let requestName =
                              param.schema.$ref?.split("/").pop() || `${opId}Request`;
                            requestName = normalizeDefinitionName(requestName);

                            if (
                              !spec.definitions[requestName] ||
                              !spec.definitions[requestName].type ||
                              Object.keys(spec.definitions[requestName]?.properties || {})
                                .length === 0
                            ) {
                              console.log(
                                `Defining schema for ${requestName} in ${pathKey}(${method})`
                              );
                              let properties;
                              let requiredFields: string[];

                              if (method === "delete") {
                                // DELETE /fields (deleteFields)
                                properties = {
                                  fieldIds: { type: "array", items: { type: "integer" } },
                                };
                                requiredFields = ["fieldIds"];
                              } else {
                                // Common properties for createField and updateField
                                properties = {
                                  label: { type: "string", description: "The label of the field" },
                                  fieldType: {
                                    type: "string",
                                    description: "The type of the field",
                                    enum: [
                                      "text",
                                      "text-multiple-choice",
                                      "text-multi-line",
                                      "rich-text",
                                      "numeric",
                                      "currency",
                                      "percent",
                                      "rating",
                                      "date",
                                      "date-time",
                                      "time-of-day",
                                      "duration",
                                      "checkbox",
                                      "user",
                                      "multi-user",
                                      "address",
                                      "email",
                                      "phone",
                                      "url",
                                      "file",
                                      "record-id",
                                    ],
                                  },
                                  fieldHelp: {
                                    type: "string",
                                    description: "Help text for the field",
                                    nullable: true,
                                  },
                                  addToForms: {
                                    type: "boolean",
                                    description: "Whether to add the field to forms",
                                    nullable: true,
                                  },
                                  permissions: {
                                    anyOf: [
                                      {
                                        type: "array",
                                        items: { $ref: "#/definitions/Permission" },
                                      },
                                      { type: "null" },
                                    ],
                                    description: "Custom permissions for the field",
                                  },
                                  required: {
                                    type: "boolean",
                                    description: "Whether the field is required",
                                    nullable: true,
                                  },
                                  unique: {
                                    type: "boolean",
                                    description: "Whether the field must have unique values",
                                    nullable: true,
                                  },
                                  noWrap: {
                                    type: "boolean",
                                    description: "Whether text wrapping is disabled",
                                    nullable: true,
                                  },
                                  bold: {
                                    type: "boolean",
                                    description: "Whether the field is bolded",
                                    nullable: true,
                                  },
                                  appearsByDefault: {
                                    type: "boolean",
                                    description: "Whether the field appears by default in reports",
                                    nullable: true,
                                  },
                                  findEnabled: {
                                    type: "boolean",
                                    description: "Whether the field is searchable",
                                    nullable: true,
                                  },
                                  doesDataCopy: {
                                    type: "boolean",
                                    description: "Whether the field copies data",
                                    nullable: true,
                                  },
                                  audited: {
                                    type: "boolean",
                                    description: "Whether changes to the field are audited",
                                    nullable: true,
                                  },
                                  properties: {
                                    type: "object",
                                    description: "Specific field properties",
                                    properties: {
                                      numLines: {
                                        type: "integer",
                                        description:
                                          "The number of lines shown in QuickBase for this text field",
                                      },
                                      maxLength: {
                                        type: "integer",
                                        description:
                                          "The maximum number of characters allowed for entry",
                                      },
                                      appendOnly: {
                                        type: "boolean",
                                        description: "Whether this field is append-only",
                                      },
                                      sortAsGiven: {
                                        type: "boolean",
                                        description:
                                          "Indicates if the listed entries sort as entered vs alphabetically",
                                      },
                                      allowMentions: {
                                        type: "boolean",
                                        description:
                                          "If someone can @mention users in the rich text field",
                                      },
                                      comments: {
                                        type: "string",
                                        description:
                                          "The comments entered on the field properties by an administrator",
                                      },
                                      doesTotal: {
                                        type: "boolean",
                                        description:
                                          "Whether this field totals in reports within the product",
                                      },
                                      autoSave: {
                                        type: "boolean",
                                        description: "Whether the link field will auto save",
                                      },
                                      defaultValueLuid: {
                                        type: "integer",
                                        description: "Default user id value",
                                      },
                                      useI18NFormat: {
                                        type: "boolean",
                                        description:
                                          "Whether phone numbers should be in E.164 standard international format",
                                      },
                                      maxVersions: {
                                        type: "integer",
                                        description:
                                          "The maximum number of versions configured for a file attachment",
                                      },
                                      format: {
                                        type: "integer",
                                        description: "The format to display time",
                                      },
                                      carryChoices: {
                                        type: "boolean",
                                        description:
                                          "Whether the field should carry its multiple choice fields when copied",
                                      },
                                      linkText: {
                                        type: "string",
                                        description:
                                          "The configured text value that replaces the URL users see",
                                      },
                                      parentFieldId: {
                                        type: "integer",
                                        description:
                                          "The id of the parent composite field, when applicable",
                                      },
                                      displayTimezone: {
                                        type: "boolean",
                                        description:
                                          "Indicates whether to display the timezone within the product",
                                      },
                                      summaryTargetFieldId: {
                                        type: "integer",
                                        description:
                                          "The id of the field used to aggregate values from the child",
                                      },
                                      allowNewChoices: {
                                        type: "boolean",
                                        description:
                                          "Indicates if users can add new choices to a selection list",
                                      },
                                      defaultToday: {
                                        type: "boolean",
                                        description:
                                          "Indicates if the field value is defaulted today for new records",
                                      },
                                      units: {
                                        type: "string",
                                        description: "The units label",
                                      },
                                      openTargetIn: {
                                        type: "string",
                                        enum: ["sameWindow", "newWindow", "popup"],
                                        description:
                                          "Indicates which target the URL should open in when clicked",
                                      },
                                      lookupTargetFieldId: {
                                        type: "integer",
                                        description:
                                          "The id of the field that is the target on the parent table for this lookup",
                                      },
                                      summaryFunction: {
                                        type: "string",
                                        enum: [
                                          "AVG",
                                          "SUM",
                                          "MAX",
                                          "MIN",
                                          "STD-DEV",
                                          "COUNT",
                                          "COMBINED-TEXT",
                                          "COMBINED-USER",
                                          "DISTINCT-COUNT",
                                        ],
                                        description: "The accumulation type for the summary field",
                                      },
                                      sourceFieldId: {
                                        type: "integer",
                                        description: "The id of the source field",
                                      },
                                      doesAverage: {
                                        type: "boolean",
                                        description:
                                          "Whether this field averages in reports within the product",
                                      },
                                      formula: {
                                        type: "string",
                                        description:
                                          "The formula of the field as configured in QuickBase",
                                      },
                                      decimalPlaces: {
                                        type: "integer",
                                        description:
                                          "The number of decimal places displayed in the product",
                                      },
                                      defaultCountryCode: {
                                        type: "string",
                                        description:
                                          "Controls the default country shown on international phone widgets",
                                      },
                                      displayMonth: {
                                        type: "string",
                                        description: "How to display months",
                                      },
                                      seeVersions: {
                                        type: "boolean",
                                        description:
                                          "Indicates if users can see other versions of a file attachment",
                                      },
                                      defaultKind: {
                                        type: "string",
                                        description: "The user default type",
                                      },
                                      displayEmail: {
                                        type: "string",
                                        description: "How the email is displayed",
                                      },
                                      coverText: {
                                        type: "string",
                                        description:
                                          "Alternate user-friendly text for displaying a link",
                                      },
                                      currencySymbol: {
                                        type: "string",
                                        description:
                                          "The currency symbol used when displaying field values",
                                      },
                                      summaryQuery: {
                                        type: "string",
                                        description: "The summary query",
                                      },
                                      targetFieldId: {
                                        type: "integer",
                                        description: "The id of the target field",
                                      },
                                      displayUser: {
                                        type: "string",
                                        description: "The configured option for how users display",
                                      },
                                      blankIsZero: {
                                        type: "boolean",
                                        description:
                                          "Whether a blank value is treated as 0 in calculations",
                                      },
                                      exact: {
                                        type: "boolean",
                                        description:
                                          "Whether an exact match is required for a report link",
                                      },
                                      defaultDomain: {
                                        type: "string",
                                        description: "Default email domain",
                                      },
                                      defaultValue: {
                                        type: "string",
                                        description: "The default value configured for a field",
                                      },
                                      abbreviate: {
                                        type: "boolean",
                                        description:
                                          "Don't show the URL protocol when showing the URL",
                                      },
                                      numberFormat: {
                                        type: "integer",
                                        description:
                                          "The format used for displaying numeric values",
                                      },
                                      targetTableName: {
                                        type: "string",
                                        description: "The field's target table name",
                                      },
                                      appearsAs: {
                                        type: "string",
                                        description:
                                          "The link text; if empty, the URL will be used",
                                      },
                                      width: {
                                        type: "integer",
                                        description: "The field's HTML input width in the product",
                                      },
                                      currencyFormat: {
                                        type: "string",
                                        enum: ["left", "right", "middle"],
                                        description:
                                          "The currency format used when displaying field values",
                                      },
                                      displayDayOfWeek: {
                                        type: "boolean",
                                        description:
                                          "Indicates whether to display the day of the week",
                                      },
                                      summaryReferenceFieldId: {
                                        type: "integer",
                                        description:
                                          "The id of the field that is the reference in the relationship",
                                      },
                                      commaStart: {
                                        type: "integer",
                                        description: "The number of digits before commas display",
                                      },
                                      choices: {
                                        type: "array",
                                        items: { type: "string" },
                                        description:
                                          "An array of entries that exist for a field offering choices",
                                      },
                                      targetTableId: {
                                        type: "string",
                                        description: "The id of the target table",
                                      },
                                      displayRelative: {
                                        type: "boolean",
                                        description: "Whether to display time as relative",
                                      },
                                      compositeFields: {
                                        type: "array",
                                        items: { type: "object", additionalProperties: true },
                                        description:
                                          "An array of fields that make up a composite field (e.g., address)",
                                      },
                                      displayCheckboxAsText: {
                                        type: "boolean",
                                        description:
                                          "Indicates whether checkbox values are shown as text in reports",
                                      },
                                      versionMode: {
                                        type: "string",
                                        enum: ["keepallversions", "keeplastversions"],
                                        description: "Version modes for files",
                                      },
                                      snapFieldId: {
                                        type: "integer",
                                        description: "The id of the field used to snapshot values",
                                      },
                                      hours24: {
                                        type: "boolean",
                                        description:
                                          "Indicates whether to display time in 24-hour format",
                                      },
                                      sortAlpha: {
                                        type: "boolean",
                                        description:
                                          "Whether to sort alphabetically (default is by record ID)",
                                      },
                                      hasExtension: {
                                        type: "boolean",
                                        description: "Whether this field has a phone extension",
                                      },
                                      useNewWindow: {
                                        type: "boolean",
                                        description:
                                          "Indicates if the file should open a new window when clicked",
                                      },
                                      displayAsLink: {
                                        type: "boolean",
                                        description:
                                          "Indicates if the field should be shown as a hyperlink",
                                      },
                                      lookupReferenceFieldId: {
                                        type: "integer",
                                        description:
                                          "The id of the field that is the reference for this lookup",
                                      },
                                    },
                                    nullable: true,
                                  },
                                };

                                // Adjust required fields based on operation
                                if (pathKey.includes("{fieldId}") && method === "post") {
                                  // UpdateField (POST /fields/{fieldId})
                                  requiredFields = ["label"]; // fieldType is not allowed in updates
                                } else {
                                  // CreateField (POST /fields)
                                  requiredFields = ["label", "fieldType"];
                                }
                              }

                              spec.definitions[requestName] = {
                                type: "object",
                                properties,
                                required: requiredFields,
                                description: operation.summary || `Request body for ${opId}`,
                              };
                            }
                            param.schema = { $ref: `#/definitions/${requestName}` };
                            console.log(
                              `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                            );
                          }
                        });
                      }
                    }
                - name: >-
                    groups.ts
                  type: >-
                    file
                  contents: >
                    //
                    schema/tags/groups.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";


                    export
                    function
                    enhanceGroups(
                      spec: Spec,
                      pathKey: string,
                      method: string,
                      operation: Operation
                    ):
                    void
                    {
                      const opId =
                        operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;
                      if (
                        operation.parameters &&
                        operation.tags?.includes("Groups") &&
                        operation.summary?.toLowerCase().includes("subgroup")
                      ) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.in === "body") {
                            if (!param.schema) param.schema = {};
                            let requestName =
                              param.schema.$ref?.split("/").pop() || `${opId}Request`;
                            requestName = normalizeDefinitionName(requestName);

                            if (
                              !spec.definitions[requestName] ||
                              !spec.definitions[requestName].type ||
                              Object.keys(spec.definitions[requestName]?.properties || {})
                                .length === 0
                            ) {
                              console.log(
                                `Defining schema for ${requestName} in ${pathKey}(${method})`
                              );
                              const properties = {
                                groupIds: { type: "array", items: { type: "string" } },
                              };
                              spec.definitions[requestName] = {
                                type: "object",
                                properties,
                                required: Object.keys(properties),
                                description: operation.summary || `Request body for ${opId}`,
                              };
                            }
                            param.schema = { $ref: `#/definitions/${requestName}` };
                            console.log(
                              `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                            );
                          }
                        });
                      }
                    }
                - name: >-
                    index.ts
                  type: >-
                    file
                  contents: >
                    //
                    open-api/schema/tags/index.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";

                    import
                    {
                    enhanceUsers
                    }
                    from
                    "./users.ts";

                    import
                    {
                    enhanceGroups
                    }
                    from
                    "./groups.ts";

                    import
                    {
                    enhanceRecords
                    }
                    from
                    "./records.ts";

                    import
                    {
                    enhanceApps
                    }
                    from
                    "./apps.ts";

                    import
                    {
                    enhanceFields
                    }
                    from
                    "./fields.ts";

                    import
                    {
                    enhanceTables
                    }
                    from
                    "./tables.ts";


                    export
                    function
                    enhanceTags(spec:
                    Spec):
                    void
                    {
                      console.log("enhanceTags version: 2025-03-16-fix-applied"); // Confirmation log

                      for (const pathKey in spec.paths) {
                        for (const method in spec.paths[pathKey]) {
                          const operation: Operation = spec.paths[pathKey][method];
                          const opId =
                            operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;

                          if (operation.parameters) {
                            operation.parameters.forEach((param: Parameter) => {
                              if (param.in === "body") {
                                if (!param.schema) param.schema = {};
                                let requestName =
                                  param.schema.$ref?.split("/").pop() || `${opId}Request`;
                                requestName = normalizeDefinitionName(requestName);

                                if (spec.definitions[requestName]?.type === "array") {
                                  console.log(
                                    `Wrapping array schema for ${requestName} in ${pathKey}(${method})`
                                  );
                                  const arraySchema = spec.definitions[requestName];
                                  let wrapperPropName = operation.tags?.includes("Users")
                                    ? "userIds"
                                    : "items";
                                  if (
                                    operation.tags?.includes("Groups") &&
                                    operation.summary?.toLowerCase().includes("subgroup")
                                  ) {
                                    wrapperPropName = "groupIds";
                                  }
                                  spec.definitions[requestName] = {
                                    type: "object",
                                    properties: { [wrapperPropName]: arraySchema },
                                    required: arraySchema.minItems > 0 ? [wrapperPropName] : [],
                                    description:
                                      arraySchema.description || `Request body for ${opId}`,
                                  };
                                  param.schema = { $ref: `#/definitions/${requestName}` };
                                  console.log(
                                    `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                                  );
                                }
                              }
                            });
                          }

                          enhanceUsers(spec, pathKey, method, operation);
                          enhanceGroups(spec, pathKey, method, operation);
                          enhanceRecords(spec, pathKey, method, operation);
                          enhanceApps(spec, pathKey, method, operation);
                          enhanceFields(spec, pathKey, method, operation);
                          enhanceTables(spec, pathKey, method, operation);
                        }
                      }
                    }
                - name: >-
                    records.ts
                  type: >-
                    file
                  contents: >
                    //
                    open-api/schema/tags/records.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";
                    //
                    Ensure
                    this
                    import
                    is
                    present


                    export
                    function
                    enhanceRecords(
                      spec: Spec,
                      pathKey: string,
                      method: string,
                      operation: Operation
                    ):
                    void
                    {
                      const opId =
                        operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;
                      if (operation.parameters && operation.tags?.includes("Records")) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.in === "body") {
                            if (!param.schema) param.schema = {};
                            let requestName =
                              param.schema.$ref?.split("/").pop() || `${opId}Request`;
                            requestName = normalizeDefinitionName(requestName);

                            if (
                              !spec.definitions[requestName] ||
                              !spec.definitions[requestName].type ||
                              Object.keys(spec.definitions[requestName]?.properties || {})
                                .length === 0
                            ) {
                              console.log(
                                `Defining schema for ${requestName} in ${pathKey}(${method})`
                              );
                              let properties;
                              // Upsert endpoint (/records)
                              if (pathKey === "/records" && method === "post") {
                                properties = {
                                  data: { type: "array", items: { $ref: "#/definitions/Record" } },
                                  to: { type: "string" },
                                  fieldsToReturn: { type: "array", items: { type: "integer" } },
                                };
                              }
                              // Query endpoint (/records/query)
                              else if (pathKey === "/records/query" && method === "post") {
                                properties = {
                                  from: { type: "string", description: "The table identifier." },
                                  select: {
                                    type: "array",
                                    items: { type: "integer" },
                                    description: "An array of field ids...",
                                  },
                                  where: {
                                    type: "string",
                                    description:
                                      "The filter, using the Quickbase query language...",
                                  },
                                  sortBy: {
                                    type: "array",
                                    items: {
                                      type: "object",
                                      properties: {
                                        fieldId: { type: "integer" },
                                        order: {
                                          type: "string",
                                          enum: ["ASC", "DESC", "equal-values"],
                                        },
                                      },
                                      required: ["fieldId", "order"],
                                    },
                                    description: "An array of field IDs and sort directions...",
                                  },
                                  groupBy: {
                                    type: "array",
                                    items: {
                                      type: "object",
                                      properties: {
                                        fieldId: { type: "integer" },
                                        grouping: { type: "string", enum: ["equal-values"] },
                                      },
                                      required: ["fieldId", "grouping"],
                                    },
                                    description:
                                      "An array that contains the fields to group the records by.",
                                  },
                                  options: {
                                    type: "object",
                                    properties: {
                                      skip: { type: "integer" },
                                      top: { type: "integer" },
                                      compareWithAppLocalTime: { type: "boolean" },
                                    },
                                    description: "Additional query options.",
                                  },
                                };
                              }
                              // Delete endpoint (/records)
                              else if (method === "delete") {
                                properties = {
                                  from: { type: "string" },
                                  where: { type: "string" },
                                };
                              }
                              if (properties) {
                                spec.definitions[requestName] = {
                                  type: "object",
                                  properties,
                                  required: ["from"], // Only 'from' is required per the spec
                                  description: operation.summary || `Request body for ${opId}`,
                                };
                              }
                            }
                            param.schema = { $ref: `#/definitions/${requestName}` };
                            console.log(
                              `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                            );
                          }
                        });
                      }
                    }
                - name: >-
                    tables.ts
                  type: >-
                    file
                  contents: >
                    //
                    schema/tags/tables.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";


                    export
                    function
                    enhanceTables(
                      spec: Spec,
                      pathKey: string,
                      method: string,
                      operation: Operation
                    ):
                    void
                    {
                      const opId =
                        operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;
                      if (operation.parameters && operation.tags?.includes("Tables")) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.in === "body") {
                            if (!param.schema) param.schema = {};
                            let requestName =
                              param.schema.$ref?.split("/").pop() || `${opId}Request`;
                            requestName = normalizeDefinitionName(requestName);

                            if (
                              !spec.definitions[requestName] ||
                              !spec.definitions[requestName].type ||
                              Object.keys(spec.definitions[requestName]?.properties || {})
                                .length === 0
                            ) {
                              console.log(
                                `Defining schema for ${requestName} in ${pathKey}(${method})`
                              );
                              let properties;

                              // Existing logic for other endpoints remains unchanged
                              if (pathKey === "/tables" && method === "post") {
                                properties = {
                                  name: {
                                    type: "string",
                                    description: "The name for the table.",
                                    minLength: 1,
                                  },
                                  description: {
                                    type: "string",
                                    description: "The description for the table...",
                                  },
                                  singleRecordName: {
                                    type: "string",
                                    description: "The singular noun for records...",
                                  },
                                  pluralRecordName: {
                                    type: "string",
                                    description: "The plural noun for records...",
                                  },
                                };
                              } else if (pathKey === "/tables/{tableId}" && method === "post") {
                                properties = {
                                  name: {
                                    type: "string",
                                    description: "The updated name of the table.",
                                  },
                                  description: {
                                    type: "string",
                                    description: "The updated description for the table.",
                                  },
                                };
                              }
                              // Add minimal fix for relationship endpoints
                              else if (
                                pathKey === "/tables/{tableId}/relationship" &&
                                method === "post"
                              ) {
                                requestName = "CreateRelationshipRequest"; // Force correct name
                                if (!spec.definitions[requestName]) {
                                  properties = {
                                    parentTableId: {
                                      type: "string",
                                      description: "The parent table id for the relationship.",
                                    },
                                    foreignKeyField: {
                                      type: "object",
                                      properties: {
                                        label: {
                                          type: "string",
                                          description: "The label for the foreign key field.",
                                        },
                                      },
                                      additionalProperties: true,
                                    },
                                    lookupFieldIds: {
                                      type: "array",
                                      items: { type: "integer" },
                                      description: "Array of field ids...",
                                    },
                                    summaryFields: {
                                      type: "array",
                                      items: {
                                        type: "object",
                                        properties: {
                                          summaryFid: {
                                            type: "number",
                                            description: "The field id to summarize.",
                                          },
                                          label: {
                                            type: "string",
                                            description: "The label for the summary field.",
                                          },
                                          accumulationType: {
                                            type: "string",
                                            enum: [
                                              "AVG",
                                              "SUM",
                                              "MAX",
                                              "MIN",
                                              "STD-DEV",
                                              "COUNT",
                                              "COMBINED-TEXT",
                                              "COMBINED-USER",
                                              "DISTINCT-COUNT",
                                            ],
                                            description: "The accumulation type...",
                                          },
                                          where: { type: "string", description: "The filter..." },
                                        },
                                        required: ["accumulationType"],
                                        additionalProperties: true,
                                      },
                                      description: "Array of summary field objects...",
                                    },
                                  };
                                }
                              } else if (
                                pathKey === "/tables/{tableId}/relationship/{relationshipId}" &&
                                method === "post"
                              ) {
                                requestName = "UpdateRelationshipRequest"; // Force correct name
                                if (!spec.definitions[requestName]) {
                                  properties = {
                                    parentTableId: {
                                      type: "string",
                                      description: "The updated parent table id...",
                                    },
                                    foreignKeyField: {
                                      type: "object",
                                      properties: {
                                        label: {
                                          type: "string",
                                          description: "The updated label...",
                                        },
                                      },
                                      additionalProperties: true,
                                    },
                                    lookupFieldIds: {
                                      type: "array",
                                      items: { type: "integer" },
                                      description: "Updated array of field ids...",
                                    },
                                    summaryFields: {
                                      type: "array",
                                      items: {
                                        type: "object",
                                        properties: {
                                          summaryFid: { type: "number" },
                                          label: { type: "string" },
                                          accumulationType: {
                                            type: "string",
                                            enum: [
                                              "AVG",
                                              "SUM",
                                              "MAX",
                                              "MIN",
                                              "STD-DEV",
                                              "COUNT",
                                              "COMBINED-TEXT",
                                              "COMBINED-USER",
                                              "DISTINCT-COUNT",
                                            ],
                                          },
                                          where: { type: "string" },
                                        },
                                        required: ["accumulationType"],
                                        additionalProperties: true,
                                      },
                                    },
                                  };
                                }
                              }

                              if (properties) {
                                spec.definitions[requestName] = {
                                  type: "object",
                                  properties,
                                  required:
                                    pathKey.includes("relationship") &&
                                    pathKey.endsWith("/relationship")
                                      ? ["parentTableId"]
                                      : pathKey === "/tables"
                                      ? ["name"]
                                      : [],
                                  additionalProperties: pathKey.includes("relationship")
                                    ? false
                                    : true, // Match raw spec
                                  description: operation.summary || `Request body for ${opId}`,
                                };
                              }
                            }
                            param.schema = { $ref: `#/definitions/${requestName}` };
                            console.log(
                              `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                            );
                          }
                        });
                      }
                    }
                - name: >-
                    users.ts
                  type: >-
                    file
                  contents: >
                    //
                    schema/tags/users.ts

                    import
                    {
                    Operation,
                    Parameter,
                    Spec
                    }
                    from
                    "../../types/spec.ts";

                    import
                    {
                    normalizeDefinitionName
                    }
                    from
                    "../../utils/naming.ts";


                    export
                    function
                    enhanceUsers(
                      spec: Spec,
                      pathKey: string,
                      method: string,
                      operation: Operation
                    ):
                    void
                    {
                      const opId =
                        operation.operationId || `${method}${pathKey.replace(/\W/g, "")}`;
                      if (operation.parameters && operation.tags?.includes("Users")) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.in === "body") {
                            if (!param.schema) param.schema = {};
                            let requestName =
                              param.schema.$ref?.split("/").pop() || `${opId}Request`;
                            requestName = normalizeDefinitionName(requestName);

                            if (
                              !spec.definitions[requestName] ||
                              !spec.definitions[requestName].type ||
                              Object.keys(spec.definitions[requestName]?.properties || {})
                                .length === 0
                            ) {
                              console.log(
                                `Defining schema for ${requestName} in ${pathKey}(${method})`
                              );
                              const properties = {
                                userIds: { type: "array", items: { type: "string" } },
                              };
                              spec.definitions[requestName] = {
                                type: "object",
                                properties,
                                required: Object.keys(properties),
                                description: operation.summary || `Request body for ${opId}`,
                              };
                            }
                            param.schema = { $ref: `#/definitions/${requestName}` };
                            console.log(
                              `Ensured ${requestName} in definitions for ${pathKey}(${method})`
                            );
                          }
                        });
                      }
                    }
        - name: >-
            types
          type: >-
            directory
          children:
            - name: >-
                spec.ts
              type: >-
                file
        - name: >-
            utils
          type: >-
            directory
          children:
            - name: >-
                generateDocsJson.ts
              type: >-
                file
            - name: >-
                generateJsDoc.ts
              type: >-
                file
            - name: >-
                infer-schema.ts
              type: >-
                file
            - name: >-
                naming.ts
              type: >-
                file
    - name: >-
        openapitools.json
      type: >-
        file
    - name: >-
        package-lock.json
      type: >-
        file
    - name: >-
        package.json
      type: >-
        file
    - name: >-
        playwright.config.ts
      type: >-
        file
    - name: >-
        rollup.config.js
      type: >-
        file
    - name: >-
        src
      type: >-
        directory
      children:
        - name: >-
            RateLimitError.ts
          type: >-
            file
        - name: >-
            ThrottleBucket.ts
          type: >-
            file
        - name: >-
            authorizationStrategy.ts
          type: >-
            file
        - name: >-
            generated
          type: >-
            directory
          children:
            - name: >-
                .openapi-generator
              type: >-
                directory
              children:
                - name: >-
                    FILES
                  type: >-
                    file
                - name: >-
                    VERSION
                  type: >-
                    file
            - name: >-
                .openapi-generator-ignore
              type: >-
                file
            - name: >-
                apis
              type: >-
                directory
              children:
                - name: >-
                    AppsApi.ts
                  type: >-
                    file
                - name: >-
                    AuditApi.ts
                  type: >-
                    file
                - name: >-
                    AuthApi.ts
                  type: >-
                    file
                - name: >-
                    DocumentTemplatesApi.ts
                  type: >-
                    file
                - name: >-
                    FieldsApi.ts
                  type: >-
                    file
                - name: >-
                    FilesApi.ts
                  type: >-
                    file
                - name: >-
                    FormulasApi.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticsApi.ts
                  type: >-
                    file
                - name: >-
                    RecordsApi.ts
                  type: >-
                    file
                - name: >-
                    ReportsApi.ts
                  type: >-
                    file
                - name: >-
                    SolutionsApi.ts
                  type: >-
                    file
                - name: >-
                    TablesApi.ts
                  type: >-
                    file
                - name: >-
                    UserTokenApi.ts
                  type: >-
                    file
                - name: >-
                    UsersApi.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                models
              type: >-
                directory
              children:
                - name: >-
                    AddManagersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddManagersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    Audit200Response.ts
                  type: >-
                    file
                - name: >-
                    Audit202Response.ts
                  type: >-
                    file
                - name: >-
                    AuditRequest.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInnerChangesInnerInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CloneUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    CloneUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateField200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInnerAppsInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    DeactivateUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteApp200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteAppRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFields200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteFieldsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFile200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecords200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecordsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteTable200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroups200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroupsRequest.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    DownloadFile200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoToken200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    GenerateDocument200Response.ts
                  type: >-
                    file
                - name: >-
                    GetApp200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppEvents200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppTables200Response.ts
                  type: >-
                    file
                - name: >-
                    GetField200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFields200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldsUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetRelationships200Response.ts
                  type: >-
                    file
                - name: >-
                    GetReport200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTable200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTableReports200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTempTokenDBID200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    Permission.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200Response.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequest.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticReads200Response.ts
                  type: >-
                    file
                - name: >-
                    Record.ts
                  type: >-
                    file
                - name: >-
                    RecordValue.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RunFormula200Response.ts
                  type: >-
                    file
                - name: >-
                    RunFormulaRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQuery200Response.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestGroupByInner.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestOptions.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestSortByInner.ts
                  type: >-
                    file
                - name: >-
                    RunReport200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateField200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    Upsert200Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert207Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert400Response.ts
                  type: >-
                    file
                - name: >-
                    UpsertRequest.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                runtime.ts
              type: >-
                file
        - name: >-
            generated-unified
          type: >-
            directory
          children:
            - name: >-
                QuickbaseClient.ts
              type: >-
                file
            - name: >-
                missing-types-report.json
              type: >-
                file
        - name: >-
            index.ts
          type: >-
            file
        - name: >-
            invokeMethod.ts
          type: >-
            file
        - name: >-
            quickbaseClient.ts
          type: >-
            file
        - name: >-
            rateLimiter.ts
          type: >-
            file
        - name: >-
            tokenCache.ts
          type: >-
            file
        - name: >-
            utils.ts
          type: >-
            file
    - name: >-
        test-artifacts
      type: >-
        directory
      children:
        - name: >-
            .last-run.json
          type: >-
            file
    - name: >-
        tests
      type: >-
        directory
      children:
        - name: >-
            playwright
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        cacheSwitching.test.ts
                      type: >-
                        file
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithUserToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        tempTokenPrefetch.test.ts
                      type: >-
                        file
                    - name: >-
                        tempTokenRenewal.test.ts
                      type: >-
                        file
        - name: >-
            setup.ts
          type: >-
            file
        - name: >-
            vitest
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        mockQuickbaseServer.ts
                      type: >-
                        file
                    - name: >-
                        retryUserToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        ssoTokenIntegrationWithServer.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    formulas
                  type: >-
                    directory
                  children:
                    - name: >-
                        runFormula.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
            - name: >-
                unit
              type: >-
                directory
              children:
                - name: >-
                    ThrottleBucket.test.ts
                  type: >-
                    file
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        retryTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        retryTempTokenMaxRetries.test.ts
                      type: >-
                        file
                    - name: >-
                        retryUserToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        ssoTokenRefresh.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    formulas
                  type: >-
                    directory
                  children:
                    - name: >-
                        runFormula.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    inferHttpMethod.test.ts
                  type: >-
                    file
                - name: >-
                    rateLimit.test.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
                - name: >-
                    tokenLifespan.test.ts
                  type: >-
                    file
                - name: >-
                    umd.test.ts
                  type: >-
                    file
    - name: >-
        tools
      type: >-
        directory
      children:
        - name: >-
            log-gen.ts
          type: >-
            file
        - name: >-
            log-gen.yaml
          type: >-
            file
        - name: >-
            openapi-jars
          type: >-
            directory
          children:
            - name: >-
                openapi-generator-cli-7.12.0.jar
              type: >-
                file
    - name: >-
        tsconfig.build.json
      type: >-
        file
    - name: >-
        tsconfig.json
      type: >-
        file
    - name: >-
        versionrc.json
      type: >-
        file
    - name: >-
        vitest.config.ts
      type: >-
        file
