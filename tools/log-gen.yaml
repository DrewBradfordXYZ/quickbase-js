project: >-
  quickbase-js
date: >-
  3/16/2025
root: >-
  /home/drew/Projects/quickbase-js
goals:
  - >-
    A
    library
    for
    interacting
    with
    the
    QuickBase
    RESTful
    API.
  - >-
    Use
    OpenAPI
    to
    generate
    types
    and
    methods
    using
    a
    proxy.
    Validate
    with
    tests.
  - >-
    Provide
    robust
    and
    intuitive
    temporary
    token
    support
    for
    browser
    environments.
  - >-
    User
    Tokens
    support
    both
    Node.js
    and
    browser
    environments.
  - >-
    Use
    case:
    JS
    frameworks
    like
    React,
    Vue,
    and
    Angular
    hosted
    in
    QuickBase
    code
    pages.
  - >-
    Enable
    a
    flexible
    or
    native
    fetch
    in
    the
    browser.
  - >-
    Enable
    a
    flexible
    fetch
    framework
    in
    Node.js.
  - >-
    #
  - >-
    No
    manual
    updating
    methods
    when
    the
    QuickBase
    API
    changes.
  - >-
    The
    proxy
    magic
    dynamically
    maps
    generated
    methods
    and
    types.
  - >-
    #
  - >-
    TokenCache
    is
    defined
    per
    quickbaseClient
    call,
    so
    each
    instance
    has
    its
    own
    isolated
    TokenCache.
  - >-
    Each
    quickbase
    client
    instance
    has
    an
    isolated
    and
    individual
    token
    cache.
pipelineOverview:
  - >-
    What
    I’m
    Trying
    to
    Do
  - >-
    My
    approach
    is
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById
    so
    QuickbaseClient.ts
    can
    map
    it
    to
    client.getApp.
    Steps
    include:
  - >-
    Fix
    fix-spec.ts:
  - >-
    Add
    tags:
    ["Apps"]
    to
    /apps/*
    endpoints
    to
    group
    them
    into
    AppsApi.ts.
  - >-
    Ensure
    all
    endpoints
    and
    models
    are
    correctly
    defined
    and
    typed.
  - >-
    Debug
    regenerate-client.ts:
  - >-
    Enhance
    logging
    to
    catch
    why
    AppsApi.ts
    isn’t
    generated.
  - >-
    Test
    if
    getAppById
    appears
    in
    another
    file
    (e.g.,
    DefaultApi.ts).
  - >-
    Update
    QuickbaseClient.ts:
  - >-
    Adjust
    imports
    to
    use
    the
    correct
    API
    class
    once
    generated.
  - >-
    Test
    and
    Iterate:
  - >-
    Run
    npm
    run
    fix-spec,
    npm
    run
    regenerate,
    and
    npm
    run
    test
    to
    verify
    AppsApi.ts
    exists
    and
    test.ts
    works.
  - >-
    The
    latest
    fix-spec.ts
    with
    tags
    aims
    to
    force
    the
    generator
    to
    create
    AppsApi.ts,
    addressing
    the
    missing
    file
    issue.
  - >-
    Relevant
    Project
    Files
  - >-
    Here’s
    a
    list
    of
    files
    that
    would
    help
    understand
    and
    resolve
    this
    problem,
    along
    with
    their
    roles:
  - >-
    src/code-generation/fix-spec.ts:
  - >-
    Role:
    Modifies
    the
    original
    QuickBase
    spec
    (e.g.,
    QuickBase_RESTful_*.json)
    to
    create
    quickbase-fixed.json
    with
    required
    endpoints
    (e.g.,
    /apps/{appId}).
  - >-
    Relevance:
    Defines
    the
    spec
    fed
    to
    the
    generator;
    errors
    here
    affect
    generation.
  - >-
    src/code-generation/quickbase-fixed.json:
  - >-
    Role:
    The
    processed
    OpenAPI
    spec
    used
    by
    regenerate-client.ts
    to
    generate
    code.
  - >-
    Relevance:
    Confirms
    if
    /apps/{appId}
    is
    correctly
    structured
    with
    operationId:
    "getAppById".
  - >-
    src/code-generation/regenerate-client.ts:
  - >-
    Role:
    Runs
    OpenAPI
    Generator
    to
    produce
    src/generated/
    files
    (APIs
    and
    models)
    and
    fixes
    .ts
    extensions
    with
    ts-morph.
  - >-
    Relevance:
    Controls
    the
    generation
    process;
    logs
    reveal
    why
    AppsApi.ts
    is
    missing.
  - >-
    src/generated/apis/AppsApi.ts
    (if
    exists):
  - >-
    Role:
    Should
    contain
    getAppById
    method
    for
    /apps/{appId}
    GET.
  - >-
    Relevance:
    Missing
    file
    is
    the
    core
    issue;
    its
    absence
    breaks
    QuickbaseClient.ts.
  - >-
    src/generated/apis/DefaultApi.ts:
  - >-
    Role:
    Default
    API
    class
    for
    untagged
    operations.
  - >-
    Relevance:
    Might
    contain
    getAppById
    if
    tags
    are
    misconfigured.
  - >-
    src/QuickbaseClient.ts:
  - >-
    Role:
    Wraps
    generated
    API
    classes
    (e.g.,
    AppsApi)
    in
    a
    Proxy
    for
    ergonomic
    calls
    (e.g.,
    client.getApp).
  - >-
    Relevance:
    Fails
    to
    import
    AppsApi.ts,
    causing
    the
    runtime
    error.
  - >-
    src/test.ts:
  - >-
    Role:
    Test
    script
    calling
    client.getApp({
    appId
    }).
  - >-
    Relevance:
    Final
    validation
    point;
    shows
    if
    the
    fix
    works.
  - >-
    .env.development:
  - >-
    Role:
    Stores
    QB_REALM,
    QB_USER_TOKEN,
    QB_APP_ID
    for
    API
    authentication.
  - >-
    Relevance:
    Ensures
    the
    API
    call
    has
    valid
    credentials
    (not
    the
    current
    issue,
    but
    critical
    for
    success).
  - >-
    src/specs/QuickBase_RESTful_API_2025-03-04T06_22_39.725Z.json
    (or
    similar):
  - >-
    Role:
    Original
    QuickBase
    API
    spec
    before
    fix-spec.ts
    processing.
  - >-
    Relevance:
    Shows
    how
    /apps/{appId}
    was
    originally
    defined,
    helping
    identify
    conflicts.
  - >-
    package.json:
  - >-
    Role:
    Defines
    scripts
    (fix-spec,
    regenerate,
    test)
    and
    dependencies
    (e.g.,
    ts-node,
    openapi-generator-cli).
  - >-
    Relevance:
    Confirms
    script
    commands
    and
    versions
    align
    with
    our
    process.
  - >-
    What
    We
    Achieved
  - >-
    Goal
    Met:
    You
    can
    now
    call
    client.getApp({
    appId:
    "buwai2zpe"
    })
    and
    get
    the
    app
    details
    {
    id:
    'buwai2zpe',
    name:
    'qb-copy'
    }.
  - >-
    Fixes
    Applied:
  - >-
    Added
    tags:
    ["Apps"]
    in
    fix-spec.ts
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById.
  - >-
    Updated
    QuickbaseClient.ts
    to:
  - >-
    Use
    prototype
    methods
    via
    Object.getOwnPropertyNames.
  - >-
    Bind
    methods
    to
    preserve
    context
    with
    .bind(api).
  - >-
    Handle
    getAppById’s
    direct
    JSON
    return
    instead
    of
    a
    Response
    object.
  - >-
    Result:
    The
    ergonomic
    API
    you
    wanted
    (client.getApp)
    works
    seamlessly
    with
    the
    generated
    AppsApi.ts.
  - >-
    Why
    It
    Works
    Now
  - >-
    fix-spec.ts:
  - >-
    Correctly
    defined
    /apps/{appId}
    with
    operationId:
    "getAppById"
    and
    tags:
    ["Apps"],
    ensuring
    AppsApi.ts
    generation.
  - >-
    regenerate-client.ts:
  - >-
    Successfully
    ran
    OpenAPI
    Generator
    to
    produce
    AppsApi.ts
    with
    getAppById.
  - >-
    QuickbaseClient.ts:
  - >-
    buildMethodMap
    now
    captures
    getAppById
    and
    maps
    it
    to
    getApp.
  - >-
    invokeMethod
    passes
    {
    appId:
    'buwai2zpe'
    }
    as
    requestParameters
    and
    handles
    the
    JSON
    response
    directly.
  - >-
    test.ts:
  - >-
    Calls
    client.getApp
    and
    logs
    the
    result,
    proving
    the
    end-to-end
    flow.
tree:
  name: >-
    .
  type: >-
    directory
  children:
    - name: >-
        .env
      type: >-
        file
    - name: >-
        .gitignore
      type: >-
        file
    - name: >-
        CHANGELOG.md
      type: >-
        file
    - name: >-
        LICENSE
      type: >-
        file
    - name: >-
        README.md
      type: >-
        file
    - name: >-
        build-common.js
      type: >-
        file
    - name: >-
        build-esm.js
      type: >-
        file
    - name: >-
        build-umd.js
      type: >-
        file
    - name: >-
        debug.log
      type: >-
        file
    - name: >-
        dist
      type: >-
        directory
      children:
        - name: >-
            esm
          type: >-
            directory
          children:
            - name: >-
                quickbase.d.ts
              type: >-
                file
            - name: >-
                quickbase.js
              type: >-
                file
            - name: >-
                quickbase.js.map
              type: >-
                file
            - name: >-
                quickbase.min.js
              type: >-
                file
            - name: >-
                quickbase.min.js.map
              type: >-
                file
        - name: >-
            umd
          type: >-
            directory
          children:
            - name: >-
                quickbase.umd.js
              type: >-
                file
            - name: >-
                quickbase.umd.js.map
              type: >-
                file
            - name: >-
                quickbase.umd.min.js
              type: >-
                file
            - name: >-
                quickbase.umd.min.js.map
              type: >-
                file
    - name: >-
        examples
      type: >-
        directory
      children:
        - name: >-
            quicbase-jsCDN.html
          type: >-
            file
        - name: >-
            react.js
          type: >-
            file
        - name: >-
            vanillajs.html
          type: >-
            file
    - name: >-
        gen-no-overrides.log
      type: >-
        file
    - name: >-
        notes.txt
      type: >-
        file
    - name: >-
        open-api
      type: >-
        directory
      children:
        - name: >-
            fix-spec-array-fixer.ts
          type: >-
            file
        - name: >-
            fix-spec-main.ts
          type: >-
            file
        - name: >-
            fix-spec-schema-enhancer.ts
          type: >-
            file
        - name: >-
            fix-spec-types.ts
          type: >-
            file
        - name: >-
            fix-spec-utils.ts
          type: >-
            file
        - name: >-
            generate-unified-interface.ts
          type: >-
            file
        - name: >-
            old-definitions
          type: >-
            directory
          children:
            - name: >-
                apps.ts
              type: >-
                file
            - name: >-
                auth.ts
              type: >-
                file
            - name: >-
                events.ts
              type: >-
                file
            - name: >-
                fields.ts
              type: >-
                file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                records.ts
              type: >-
                file
            - name: >-
                relationships.ts
              type: >-
                file
            - name: >-
                reports.ts
              type: >-
                file
            - name: >-
                tables.ts
              type: >-
                file
        - name: >-
            old-paths
          type: >-
            directory
          children:
            - name: >-
                apps.ts
              type: >-
                file
            - name: >-
                auth.ts
              type: >-
                file
            - name: >-
                events.ts
              type: >-
                file
            - name: >-
                fields.ts
              type: >-
                file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                records.ts
              type: >-
                file
            - name: >-
                relationships.ts
              type: >-
                file
            - name: >-
                reports.ts
              type: >-
                file
            - name: >-
                tables.ts
              type: >-
                file
        - name: >-
            output
          type: >-
            directory
          children:
            - name: >-
                override-report.json
              type: >-
                file
            - name: >-
                quickbase-fixed.json
              type: >-
                file
        - name: >-
            regenerate-client.ts
          type: >-
            file
    - name: >-
        openapitools.json
      type: >-
        file
    - name: >-
        output.log
      type: >-
        file
    - name: >-
        package-lock.json
      type: >-
        file
    - name: >-
        package.json
      type: >-
        file
    - name: >-
        playwright.config.ts
      type: >-
        file
    - name: >-
        regenerate_output.log
      type: >-
        file
    - name: >-
        rollup.config.js
      type: >-
        file
    - name: >-
        src
      type: >-
        directory
      children:
        - name: >-
            generated
          type: >-
            directory
          children:
            - name: >-
                .openapi-generator
              type: >-
                directory
              children:
                - name: >-
                    FILES
                  type: >-
                    file
                - name: >-
                    VERSION
                  type: >-
                    file
            - name: >-
                .openapi-generator-ignore
              type: >-
                file
            - name: >-
                apis
              type: >-
                directory
              children:
                - name: >-
                    AppsApi.ts
                  type: >-
                    file
                - name: >-
                    AuditApi.ts
                  type: >-
                    file
                - name: >-
                    AuthApi.ts
                  type: >-
                    file
                - name: >-
                    DocumentTemplatesApi.ts
                  type: >-
                    file
                - name: >-
                    FieldsApi.ts
                  type: >-
                    file
                - name: >-
                    FilesApi.ts
                  type: >-
                    file
                - name: >-
                    FormulasApi.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticsApi.ts
                  type: >-
                    file
                - name: >-
                    RecordsApi.ts
                  type: >-
                    file
                - name: >-
                    ReportsApi.ts
                  type: >-
                    file
                - name: >-
                    SolutionsApi.ts
                  type: >-
                    file
                - name: >-
                    TablesApi.ts
                  type: >-
                    file
                - name: >-
                    UserTokenApi.ts
                  type: >-
                    file
                - name: >-
                    UsersApi.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                models
              type: >-
                directory
              children:
                - name: >-
                    AddManagersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddManagersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    Audit200Response.ts
                  type: >-
                    file
                - name: >-
                    Audit202Response.ts
                  type: >-
                    file
                - name: >-
                    AuditRequest.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInnerChangesInnerInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionRequest.ts
                  type: >-
                    file
                - name: >-
                    CloneUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    CloneUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateField200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInnerAppsInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    DeactivateUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteApp200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteAppRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFields200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteFieldsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFile200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecords200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecordsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteTable200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroups200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroupsRequest.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    DownloadFile200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoToken200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    GenerateDocument200Response.ts
                  type: >-
                    file
                - name: >-
                    GetApp200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppEvents200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppTables200Response.ts
                  type: >-
                    file
                - name: >-
                    GetField200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFields200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldsUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetRelationships200Response.ts
                  type: >-
                    file
                - name: >-
                    GetReport200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTable200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTableReports200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTempTokenDBID200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200Response.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequest.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticReads200Response.ts
                  type: >-
                    file
                - name: >-
                    Record.ts
                  type: >-
                    file
                - name: >-
                    RecordValue.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RunFormula200Response.ts
                  type: >-
                    file
                - name: >-
                    RunFormulaRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQuery200Response.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequest.ts
                  type: >-
                    file
                - name: >-
                    RunReport200Response.ts
                  type: >-
                    file
                - name: >-
                    RunReportRequest.ts
                  type: >-
                    file
                - name: >-
                    TransferUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateField200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    Upsert200Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert207Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert400Response.ts
                  type: >-
                    file
                - name: >-
                    UpsertRequest.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                runtime.ts
              type: >-
                file
              contents: >
                /*
                tslint:disable
                */

                /*
                eslint-disable
                */

                /**
                 * Quick Base API
                 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
                 *
                 * The version of the OpenAPI document: 1.0.0
                 * 
                 *
                 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                 * https://openapi-generator.tech
                 * Do not edit the class manually.
                 */


                export
                const
                BASE_PATH
                =
                "https://api.quickbase.com/v1".replace(/\/+$/,
                "");


                export
                interface
                ConfigurationParameters
                {
                    basePath?: string; // override base path
                    fetchApi?: FetchAPI; // override for fetch implementation
                    middleware?: Middleware[]; // middleware to apply before/after fetch requests
                    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings
                    username?: string; // parameter for basic security
                    password?: string; // parameter for basic security
                    apiKey?: string | Promise<string> | ((name: string) => string | Promise<string>); // parameter for apiKey security
                    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string | Promise<string>); // parameter for oauth2 security
                    headers?: HTTPHeaders; //header params we want to use on every request
                    credentials?: RequestCredentials; //value for the credentials param we want to use on each request
                }


                export
                class
                Configuration
                {
                    constructor(private configuration: ConfigurationParameters = {}) {}

                    set config(configuration: Configuration) {
                        this.configuration = configuration;
                    }

                    get basePath(): string {
                        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
                    }

                    get fetchApi(): FetchAPI | undefined {
                        return this.configuration.fetchApi;
                    }

                    get middleware(): Middleware[] {
                        return this.configuration.middleware || [];
                    }

                    get queryParamsStringify(): (params: HTTPQuery) => string {
                        return this.configuration.queryParamsStringify || querystring;
                    }

                    get username(): string | undefined {
                        return this.configuration.username;
                    }

                    get password(): string | undefined {
                        return this.configuration.password;
                    }

                    get apiKey(): ((name: string) => string | Promise<string>) | undefined {
                        const apiKey = this.configuration.apiKey;
                        if (apiKey) {
                            return typeof apiKey === 'function' ? apiKey : () => apiKey;
                        }
                        return undefined;
                    }

                    get accessToken(): ((name?: string, scopes?: string[]) => string | Promise<string>) | undefined {
                        const accessToken = this.configuration.accessToken;
                        if (accessToken) {
                            return typeof accessToken === 'function' ? accessToken : async () => accessToken;
                        }
                        return undefined;
                    }

                    get headers(): HTTPHeaders | undefined {
                        return this.configuration.headers;
                    }

                    get credentials(): RequestCredentials | undefined {
                        return this.configuration.credentials;
                    }
                }


                export
                const
                DefaultConfig
                =
                new
                Configuration();


                /**
                 * This is the base class for all generated API classes.
                 */
                export
                class
                BaseAPI
                {

                    private static readonly jsonRegex = new RegExp('^(:?application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(:?;.*)?$', 'i');
                    private middleware: Middleware[];

                    constructor(protected configuration = DefaultConfig) {
                        this.middleware = configuration.middleware;
                    }

                    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {
                        const next = this.clone<T>();
                        next.middleware = next.middleware.concat(...middlewares);
                        return next;
                    }

                    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {
                        const middlewares = preMiddlewares.map((pre) => ({ pre }));
                        return this.withMiddleware<T>(...middlewares);
                    }

                    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {
                        const middlewares = postMiddlewares.map((post) => ({ post }));
                        return this.withMiddleware<T>(...middlewares);
                    }

                    /**
                     * Check if the given MIME is a JSON MIME.
                     * JSON MIME examples:
                     *   application/json
                     *   application/json; charset=UTF8
                     *   APPLICATION/JSON
                     *   application/vnd.company+json
                     * @param mime - MIME (Multipurpose Internet Mail Extensions)
                     * @return True if the given MIME is JSON, false otherwise.
                     */
                    protected isJsonMime(mime: string | null | undefined): boolean {
                        if (!mime) {
                            return false;
                        }
                        return BaseAPI.jsonRegex.test(mime);
                    }

                    protected async request(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction): Promise<Response> {
                        const { url, init } = await this.createFetchParams(context, initOverrides);
                        const response = await this.fetchApi(url, init);
                        if (response && (response.status >= 200 && response.status < 300)) {
                            return response;
                        }
                        throw new ResponseError(response, 'Response returned an error code');
                    }

                    private async createFetchParams(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction) {
                        let url = this.configuration.basePath + context.path;
                        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
                            // only add the querystring to the URL if there are query parameters.
                            // this is done to avoid urls ending with a "?" character which buggy webservers
                            // do not handle correctly sometimes.
                            url += '?' + this.configuration.queryParamsStringify(context.query);
                        }

                        const headers = Object.assign({}, this.configuration.headers, context.headers);
                        Object.keys(headers).forEach(key => headers[key] === undefined ? delete headers[key] : {});

                        const initOverrideFn =
                            typeof initOverrides === "function"
                                ? initOverrides
                                : async () => initOverrides;

                        const initParams = {
                            method: context.method,
                            headers,
                            body: context.body,
                            credentials: this.configuration.credentials,
                        };

                        const overriddenInit: RequestInit = {
                            ...initParams,
                            ...(await initOverrideFn({
                                init: initParams,
                                context,
                            }))
                        };

                        let body: any;
                        if (isFormData(overriddenInit.body)
                            || (overriddenInit.body instanceof URLSearchParams)
                            || isBlob(overriddenInit.body)) {
                          body = overriddenInit.body;
                        } else if (this.isJsonMime(headers['Content-Type'])) {
                          body = JSON.stringify(overriddenInit.body);
                        } else {
                          body = overriddenInit.body;
                        }

                        const init: RequestInit = {
                            ...overriddenInit,
                            body
                        };

                        return { url, init };
                    }

                    private fetchApi = async (url: string, init: RequestInit) => {
                        let fetchParams = { url, init };
                        for (const middleware of this.middleware) {
                            if (middleware.pre) {
                                fetchParams = await middleware.pre({
                                    fetch: this.fetchApi,
                                    ...fetchParams,
                                }) || fetchParams;
                            }
                        }
                        let response: Response | undefined = undefined;
                        try {
                            response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
                        } catch (e) {
                            for (const middleware of this.middleware) {
                                if (middleware.onError) {
                                    response = await middleware.onError({
                                        fetch: this.fetchApi,
                                        url: fetchParams.url,
                                        init: fetchParams.init,
                                        error: e,
                                        response: response ? response.clone() : undefined,
                                    }) || response;
                                }
                            }
                            if (response === undefined) {
                              if (e instanceof Error) {
                                throw new FetchError(e, 'The request failed and the interceptors did not return an alternative response');
                              } else {
                                throw e;
                              }
                            }
                        }
                        for (const middleware of this.middleware) {
                            if (middleware.post) {
                                response = await middleware.post({
                                    fetch: this.fetchApi,
                                    url: fetchParams.url,
                                    init: fetchParams.init,
                                    response: response.clone(),
                                }) || response;
                            }
                        }
                        return response;
                    }

                    /**
                     * Create a shallow clone of `this` by constructing a new instance
                     * and then shallow cloning data members.
                     */
                    private clone<T extends BaseAPI>(this: T): T {
                        const constructor = this.constructor as any;
                        const next = new constructor(this.configuration);
                        next.middleware = this.middleware.slice();
                        return next;
                    }
                };


                function
                isBlob(value:
                any):
                value
                is
                Blob
                {
                    return typeof Blob !== 'undefined' && value instanceof Blob;
                }


                function
                isFormData(value:
                any):
                value
                is
                FormData
                {
                    return typeof FormData !== "undefined" && value instanceof FormData;
                }


                export
                class
                ResponseError
                extends
                Error
                {
                    override name: "ResponseError" = "ResponseError";
                    constructor(public response: Response, msg?: string) {
                        super(msg);
                    }
                }


                export
                class
                FetchError
                extends
                Error
                {
                    override name: "FetchError" = "FetchError";
                    constructor(public cause: Error, msg?: string) {
                        super(msg);
                    }
                }


                export
                class
                RequiredError
                extends
                Error
                {
                    override name: "RequiredError" = "RequiredError";
                    constructor(public field: string, msg?: string) {
                        super(msg);
                    }
                }


                export
                const
                COLLECTION_FORMATS
                =
                {
                    csv: ",",
                    ssv: " ",
                    tsv: "\t",
                    pipes: "|",
                };


                export
                type
                FetchAPI
                =
                WindowOrWorkerGlobalScope['fetch'];


                export
                type
                Json
                =
                any;

                export
                type
                HTTPMethod
                =
                'GET'
                |
                'POST'
                |
                'PUT'
                |
                'PATCH'
                |
                'DELETE'
                |
                'OPTIONS'
                |
                'HEAD';

                export
                type
                HTTPHeaders
                =
                {
                [key:
                string]:
                string
                };

                export
                type
                HTTPQuery
                =
                {
                [key:
                string]:
                string
                |
                number
                |
                null
                |
                boolean
                |
                Array<string
                |
                number
                |
                null
                |
                boolean>
                |
                Set<string
                |
                number
                |
                null
                |
                boolean>
                |
                HTTPQuery
                };

                export
                type
                HTTPBody
                =
                Json
                |
                FormData
                |
                URLSearchParams;

                export
                type
                HTTPRequestInit
                =
                {
                headers?:
                HTTPHeaders;
                method:
                HTTPMethod;
                credentials?:
                RequestCredentials;
                body?:
                HTTPBody
                };

                export
                type
                ModelPropertyNaming
                =
                'camelCase'
                |
                'snake_case'
                |
                'PascalCase'
                |
                'original';


                export
                type
                InitOverrideFunction
                =
                (requestContext:
                {
                init:
                HTTPRequestInit,
                context:
                RequestOpts
                })
                =>
                Promise<RequestInit>


                export
                interface
                FetchParams
                {
                    url: string;
                    init: RequestInit;
                }


                export
                interface
                RequestOpts
                {
                    path: string;
                    method: HTTPMethod;
                    headers: HTTPHeaders;
                    query?: HTTPQuery;
                    body?: HTTPBody;
                }


                export
                function
                querystring(params:
                HTTPQuery,
                prefix:
                string
                =
                ''):
                string
                {
                    return Object.keys(params)
                        .map(key => querystringSingleKey(key, params[key], prefix))
                        .filter(part => part.length > 0)
                        .join('&');
                }


                function
                querystringSingleKey(key:
                string,
                value:
                string
                |
                number
                |
                null
                |
                undefined
                |
                boolean
                |
                Array<string
                |
                number
                |
                null
                |
                boolean>
                |
                Set<string
                |
                number
                |
                null
                |
                boolean>
                |
                HTTPQuery,
                keyPrefix:
                string
                =
                ''):
                string
                {
                    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);
                    if (value instanceof Array) {
                        const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))
                            .join(`&${encodeURIComponent(fullKey)}=`);
                        return `${encodeURIComponent(fullKey)}=${multiValue}`;
                    }
                    if (value instanceof Set) {
                        const valueAsArray = Array.from(value);
                        return querystringSingleKey(key, valueAsArray, keyPrefix);
                    }
                    if (value instanceof Date) {
                        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
                    }
                    if (value instanceof Object) {
                        return querystring(value as HTTPQuery, fullKey);
                    }
                    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
                }


                export
                function
                exists(json:
                any,
                key:
                string)
                {
                    const value = json[key];
                    return value !== null && value !== undefined;
                }


                export
                function
                mapValues(data:
                any,
                fn:
                (item:
                any)
                =>
                any)
                {
                  return Object.keys(data).reduce(
                    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
                    {}
                  );
                }


                export
                function
                canConsumeForm(consumes:
                Consume[]):
                boolean
                {
                    for (const consume of consumes) {
                        if ('multipart/form-data' === consume.contentType) {
                            return true;
                        }
                    }
                    return false;
                }


                export
                interface
                Consume
                {
                    contentType: string;
                }


                export
                interface
                RequestContext
                {
                    fetch: FetchAPI;
                    url: string;
                    init: RequestInit;
                }


                export
                interface
                ResponseContext
                {
                    fetch: FetchAPI;
                    url: string;
                    init: RequestInit;
                    response: Response;
                }


                export
                interface
                ErrorContext
                {
                    fetch: FetchAPI;
                    url: string;
                    init: RequestInit;
                    error: unknown;
                    response?: Response;
                }


                export
                interface
                Middleware
                {
                    pre?(context: RequestContext): Promise<FetchParams | void>;
                    post?(context: ResponseContext): Promise<Response | void>;
                    onError?(context: ErrorContext): Promise<Response | void>;
                }


                export
                interface
                ApiResponse<T>
                {
                    raw: Response;
                    value(): Promise<T>;
                }


                export
                interface
                ResponseTransformer<T>
                {
                    (json: any): T;
                }


                export
                class
                JSONApiResponse<T>
                {
                    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}

                    async value(): Promise<T> {
                        return this.transformer(await this.raw.json());
                    }
                }


                export
                class
                VoidApiResponse
                {
                    constructor(public raw: Response) {}

                    async value(): Promise<void> {
                        return undefined;
                    }
                }


                export
                class
                BlobApiResponse
                {
                    constructor(public raw: Response) {}

                    async value(): Promise<Blob> {
                        return await this.raw.blob();
                    };
                }


                export
                class
                TextApiResponse
                {
                    constructor(public raw: Response) {}

                    async value(): Promise<string> {
                        return await this.raw.text();
                    };
                }
        - name: >-
            generated-unified
          type: >-
            directory
          children:
            - name: >-
                QuickbaseClient.ts
              type: >-
                file
              contents: >
                //
                Generated
                on
                2025-03-16T03:01:39.677Z

                import
                {
                AddManagersToGroup200Response,
                AddManagersToGroupRequest,
                AddMembersToGroup200Response,
                AddMembersToGroupRequest,
                AddSubgroupsToGroup200Response,
                AddSubgroupsToGroupRequest,
                Audit200Response,
                AuditRequest,
                ChangesetSolution200Response,
                ChangesetSolutionFromRecord200Response,
                ChangesetSolutionRequest,
                CloneUserToken200Response,
                CloneUserTokenRequest,
                CopyApp200Response,
                CopyAppRequest,
                CreateApp200Response,
                CreateAppRequest,
                CreateField200Response,
                CreateFieldRequest,
                CreateRelationship200Response,
                CreateRelationshipRequest,
                CreateSolution200Response,
                CreateSolutionFromRecord200Response,
                CreateSolutionRequest,
                CreateTable200Response,
                CreateTableRequest,
                DeactivateUserToken200Response,
                DeleteApp200Response,
                DeleteAppRequest,
                DeleteFields200Response,
                DeleteFieldsRequest,
                DeleteFile200Response,
                DeleteRecords200Response,
                DeleteRecordsRequest,
                DeleteRelationship200Response,
                DeleteTable200Response,
                DeleteUserToken200Response,
                DenyUsers200Response,
                DenyUsersAndGroups200Response,
                DenyUsersAndGroupsRequest,
                DenyUsersRequest,
                DownloadFile200Response,
                ExchangeSsoToken200Response,
                ExchangeSsoTokenRequest,
                ExportSolution200Response,
                ExportSolutionToRecord200Response,
                GenerateDocument200Response,
                GetApp200Response,
                GetAppEvents200Response,
                GetAppTables200Response,
                GetField200Response,
                GetFieldUsage200Response,
                GetFields200Response,
                GetFieldsUsage200Response,
                GetRelationships200Response,
                GetReport200Response,
                GetTable200Response,
                GetTableReports200Response,
                GetTempTokenDBID200Response,
                GetUsers200Response,
                GetUsersRequest,
                PlatformAnalyticEventSummaries200Response,
                PlatformAnalyticEventSummariesRequest,
                PlatformAnalyticReads200Response,
                RemoveManagersFromGroup200Response,
                RemoveManagersFromGroupRequest,
                RemoveMembersFromGroup200Response,
                RemoveMembersFromGroupRequest,
                RemoveSubgroupsFromGroup200Response,
                RemoveSubgroupsFromGroupRequest,
                RunFormula200Response,
                RunFormulaRequest,
                RunQuery200Response,
                RunQueryRequest,
                RunReport200Response,
                RunReportRequest,
                TransferUserToken200Response,
                TransferUserTokenRequest,
                UndenyUsers200Response,
                UndenyUsersRequest,
                UpdateApp200Response,
                UpdateAppRequest,
                UpdateField200Response,
                UpdateFieldRequest,
                UpdateRelationship200Response,
                UpdateRelationshipRequest,
                UpdateSolution200Response,
                UpdateSolutionRequest,
                UpdateSolutionToRecord200Response,
                UpdateTable200Response,
                UpdateTableRequest,
                Upsert200Response,
                Upsert207Response,
                UpsertRequest
                }
                from
                "../generated/models";


                export
                interface
                QuickbaseClient
                {
                  /**
                   * Create an app
                   * @param params - Parameters for the createApp operation
                   * @returns A promise resolving to the createApp response
                   */
                  createApp: (params: { body?: CreateAppRequest }) => Promise<CreateApp200Response>;
                  /**
                   * Get an app
                   * @param params - Parameters for the getApp operation
                   * @returns A promise resolving to the getApp response
                   */
                  getApp: (params: { appId: string }) => Promise<GetApp200Response>;
                  /**
                   * Update an app
                   * @param params - Parameters for the updateApp operation
                   * @returns A promise resolving to the updateApp response
                   */
                  updateApp: (params: { appId: string; body?: UpdateAppRequest }) => Promise<UpdateApp200Response>;
                  /**
                   * Delete an app
                   * @param params - Parameters for the deleteApp operation
                   * @returns A promise resolving to the deleteApp response
                   */
                  deleteApp: (params: { appId: string; body?: DeleteAppRequest }) => Promise<DeleteApp200Response>;
                  /**
                   * Get app events
                   * @param params - Parameters for the getAppEvents operation
                   * @returns A promise resolving to the getAppEvents response
                   */
                  getAppEvents: (params: { appId: string }) => Promise<GetAppEvents200Response>;
                  /**
                   * Copy an app
                   * @param params - Parameters for the copyApp operation
                   * @returns A promise resolving to the copyApp response
                   */
                  copyApp: (params: { appId: string; body?: CopyAppRequest }) => Promise<CopyApp200Response>;
                  /**
                   * Create a table
                   * @param params - Parameters for the createTable operation
                   * @returns A promise resolving to the createTable response
                   */
                  createTable: (params: { appId: string; body?: CreateTableRequest }) => Promise<CreateTable200Response>;
                  /**
                   * Get tables for an app
                   * @param params - Parameters for the getAppTables operation
                   * @returns A promise resolving to the getAppTables response
                   */
                  getAppTables: (params: { appId: string }) => Promise<GetAppTables200Response>;
                  /**
                   * Get a table
                   * @param params - Parameters for the getTable operation
                   * @returns A promise resolving to the getTable response
                   */
                  getTable: (params: { appId: string; tableId: string }) => Promise<GetTable200Response>;
                  /**
                   * Update a table
                   * @param params - Parameters for the updateTable operation
                   * @returns A promise resolving to the updateTable response
                   */
                  updateTable: (params: { appId: string; tableId: string; body?: UpdateTableRequest }) => Promise<UpdateTable200Response>;
                  /**
                   * Delete a table
                   * @param params - Parameters for the deleteTable operation
                   * @returns A promise resolving to the deleteTable response
                   */
                  deleteTable: (params: { appId: string; tableId: string }) => Promise<DeleteTable200Response>;
                  /**
                   * Get all relationships
                   * @param params - Parameters for the getRelationships operation
                   * @returns A promise resolving to the getRelationships response
                   */
                  getRelationships: (params: { skip?: number; tableId: string }) => Promise<GetRelationships200Response>;
                  /**
                   * Create a relationship
                   * @param params - Parameters for the createRelationship operation
                   * @returns A promise resolving to the createRelationship response
                   */
                  createRelationship: (params: { tableId: string; body?: CreateRelationshipRequest }) => Promise<CreateRelationship200Response>;
                  /**
                   * Update a relationship
                   * @param params - Parameters for the updateRelationship operation
                   * @returns A promise resolving to the updateRelationship response
                   */
                  updateRelationship: (params: { tableId: string; relationshipId: number; body?: UpdateRelationshipRequest }) => Promise<UpdateRelationship200Response>;
                  /**
                   * Delete a relationship
                   * @param params - Parameters for the deleteRelationship operation
                   * @returns A promise resolving to the deleteRelationship response
                   */
                  deleteRelationship: (params: { tableId: string; relationshipId: number }) => Promise<DeleteRelationship200Response>;
                  /**
                   * Get reports for a table
                   * @param params - Parameters for the getTableReports operation
                   * @returns A promise resolving to the getTableReports response
                   */
                  getTableReports: (params: { tableId: string }) => Promise<GetTableReports200Response>;
                  /**
                   * Get a report
                   * @param params - Parameters for the getReport operation
                   * @returns A promise resolving to the getReport response
                   */
                  getReport: (params: { tableId: string; reportId: string }) => Promise<GetReport200Response>;
                  /**
                   * Run a report
                   * @param params - Parameters for the runReport operation
                   * @returns A promise resolving to the runReport response
                   */
                  runReport: (params: { tableId: string; skip?: number; top?: number; reportId: string; body?: RunReportRequest }) => Promise<RunReport200Response>;
                  /**
                   * Get fields for a table
                   * @param params - Parameters for the getFields operation
                   * @returns A promise resolving to the getFields response
                   */
                  getFields: (params: { tableId: string; includeFieldPerms?: boolean }) => Promise<GetFields200Response>;
                  /**
                   * Create a field
                   * @param params - Parameters for the createField operation
                   * @returns A promise resolving to the createField response
                   */
                  createField: (params: { tableId: string; body?: CreateFieldRequest }) => Promise<CreateField200Response>;
                  /**
                   * Delete field(s)
                   * @param params - Parameters for the deleteFields operation
                   * @returns A promise resolving to the deleteFields response
                   */
                  deleteFields: (params: { tableId: string; body?: DeleteFieldsRequest }) => Promise<DeleteFields200Response>;
                  /**
                   * Get field
                   * @param params - Parameters for the getField operation
                   * @returns A promise resolving to the getField response
                   */
                  getField: (params: { tableId: string; includeFieldPerms?: boolean; fieldId: number }) => Promise<GetField200Response>;
                  /**
                   * Update a field
                   * @param params - Parameters for the updateField operation
                   * @returns A promise resolving to the updateField response
                   */
                  updateField: (params: { tableId: string; fieldId: number; body?: UpdateFieldRequest }) => Promise<UpdateField200Response>;
                  /**
                   * Get usage for all fields
                   * @param params - Parameters for the getFieldsUsage operation
                   * @returns A promise resolving to the getFieldsUsage response
                   */
                  getFieldsUsage: (params: { tableId: string; skip?: number; top?: number }) => Promise<GetFieldsUsage200Response>;
                  /**
                   * Get usage for a field
                   * @param params - Parameters for the getFieldUsage operation
                   * @returns A promise resolving to the getFieldUsage response
                   */
                  getFieldUsage: (params: { tableId: string; fieldId: number }) => Promise<GetFieldUsage200Response>;
                  /**
                   * Run a formula
                   * @param params - Parameters for the runFormula operation
                   * @returns A promise resolving to the runFormula response
                   */
                  runFormula: (params: { body?: RunFormulaRequest }) => Promise<RunFormula200Response>;
                  /**
                   * Insert/Update record(s)
                   * @param params - Parameters for the upsert operation
                   * @returns A promise resolving to the upsert response
                   */
                  upsert: (params: { body?: UpsertRequest }) => Promise<Upsert200Response | Upsert207Response>;
                  /**
                   * Delete record(s)
                   * @param params - Parameters for the deleteRecords operation
                   * @returns A promise resolving to the deleteRecords response
                   */
                  deleteRecords: (params: { body?: DeleteRecordsRequest }) => Promise<DeleteRecords200Response>;
                  /**
                   * Query for data
                   * @param params - Parameters for the runQuery operation
                   * @returns A promise resolving to the runQuery response
                   */
                  runQuery: (params: { body?: RunQueryRequest }) => Promise<RunQuery200Response>;
                  /**
                   * Get a temporary token for a dbid
                   * @param params - Parameters for the getTempTokenDBID operation
                   * @returns A promise resolving to the getTempTokenDBID response
                   */
                  getTempTokenDBID: (params: { dbid: string; qBAppToken?: string }) => Promise<GetTempTokenDBID200Response>;
                  /**
                   * Exchange an SSO token
                   * @param params - Parameters for the exchangeSsoToken operation
                   * @returns A promise resolving to the exchangeSsoToken response
                   */
                  exchangeSsoToken: (params: { body?: ExchangeSsoTokenRequest }) => Promise<ExchangeSsoToken200Response>;
                  /**
                   * Clone a user token
                   * @param params - Parameters for the cloneUserToken operation
                   * @returns A promise resolving to the cloneUserToken response
                   */
                  cloneUserToken: (params: { body?: CloneUserTokenRequest }) => Promise<CloneUserToken200Response>;
                  /**
                   * Transfer a user token
                   * @param params - Parameters for the transferUserToken operation
                   * @returns A promise resolving to the transferUserToken response
                   */
                  transferUserToken: (params: { body?: TransferUserTokenRequest }) => Promise<TransferUserToken200Response>;
                  /**
                   * Deactivate a user token
                   * @param params - Parameters for the deactivateUserToken operation
                   * @returns A promise resolving to the deactivateUserToken response
                   */
                  deactivateUserToken: (params: {  }) => Promise<DeactivateUserToken200Response>;
                  /**
                   * Delete a user token
                   * @param params - Parameters for the deleteUserToken operation
                   * @returns A promise resolving to the deleteUserToken response
                   */
                  deleteUserToken: (params: {  }) => Promise<DeleteUserToken200Response>;
                  /**
                   * Download file
                   * @param params - Parameters for the downloadFile operation
                   * @returns A promise resolving to the downloadFile response
                   */
                  downloadFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<DownloadFile200Response>;
                  /**
                   * Delete file
                   * @param params - Parameters for the deleteFile operation
                   * @returns A promise resolving to the deleteFile response
                   */
                  deleteFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<DeleteFile200Response>;
                  /**
                   * Get users
                   * @param params - Parameters for the getUsers operation
                   * @returns A promise resolving to the getUsers response
                   */
                  getUsers: (params: { accountId?: number; body?: GetUsersRequest }) => Promise<GetUsers200Response>;
                  /**
                   * Deny users
                   * @param params - Parameters for the denyUsers operation
                   * @returns A promise resolving to the denyUsers response
                   */
                  denyUsers: (params: { accountId?: number; body?: DenyUsersRequest }) => Promise<DenyUsers200Response>;
                  /**
                   * Deny and remove users from groups
                   * @param params - Parameters for the denyUsersAndGroups operation
                   * @returns A promise resolving to the denyUsersAndGroups response
                   */
                  denyUsersAndGroups: (params: { accountId?: number; shouldDeleteFromGroups: boolean; body?: DenyUsersAndGroupsRequest }) => Promise<DenyUsersAndGroups200Response>;
                  /**
                   * Undeny users
                   * @param params - Parameters for the undenyUsers operation
                   * @returns A promise resolving to the undenyUsers response
                   */
                  undenyUsers: (params: { accountId?: number; body?: UndenyUsersRequest }) => Promise<UndenyUsers200Response>;
                  /**
                   * Add members
                   * @param params - Parameters for the addMembersToGroup operation
                   * @returns A promise resolving to the addMembersToGroup response
                   */
                  addMembersToGroup: (params: { gid: number; body?: AddMembersToGroupRequest }) => Promise<AddMembersToGroup200Response>;
                  /**
                   * Remove members
                   * @param params - Parameters for the removeMembersFromGroup operation
                   * @returns A promise resolving to the removeMembersFromGroup response
                   */
                  removeMembersFromGroup: (params: { gid: number; body?: RemoveMembersFromGroupRequest }) => Promise<RemoveMembersFromGroup200Response>;
                  /**
                   * Add managers
                   * @param params - Parameters for the addManagersToGroup operation
                   * @returns A promise resolving to the addManagersToGroup response
                   */
                  addManagersToGroup: (params: { gid: number; body?: AddManagersToGroupRequest }) => Promise<AddManagersToGroup200Response>;
                  /**
                   * Remove managers
                   * @param params - Parameters for the removeManagersFromGroup operation
                   * @returns A promise resolving to the removeManagersFromGroup response
                   */
                  removeManagersFromGroup: (params: { gid: number; body?: RemoveManagersFromGroupRequest }) => Promise<RemoveManagersFromGroup200Response>;
                  /**
                   * Add child groups
                   * @param params - Parameters for the addSubgroupsToGroup operation
                   * @returns A promise resolving to the addSubgroupsToGroup response
                   */
                  addSubgroupsToGroup: (params: { gid: number; body?: AddSubgroupsToGroupRequest }) => Promise<AddSubgroupsToGroup200Response>;
                  /**
                   * Remove child groups
                   * @param params - Parameters for the removeSubgroupsFromGroup operation
                   * @returns A promise resolving to the removeSubgroupsFromGroup response
                   */
                  removeSubgroupsFromGroup: (params: { gid: number; body?: RemoveSubgroupsFromGroupRequest }) => Promise<RemoveSubgroupsFromGroup200Response>;
                  /**
                   * Get audit logs
                   * @param params - Parameters for the audit operation
                   * @returns A promise resolving to the audit response
                   */
                  audit: (params: { body?: AuditRequest }) => Promise<Audit200Response>;
                  /**
                   * Get read summaries
                   * @param params - Parameters for the platformAnalyticReads operation
                   * @returns A promise resolving to the platformAnalyticReads response
                   */
                  platformAnalyticReads: (params: { day?: string }) => Promise<PlatformAnalyticReads200Response>;
                  /**
                   * Get event summaries
                   * @param params - Parameters for the platformAnalyticEventSummaries operation
                   * @returns A promise resolving to the platformAnalyticEventSummaries response
                   */
                  platformAnalyticEventSummaries: (params: { accountId?: number; body?: PlatformAnalyticEventSummariesRequest }) => Promise<PlatformAnalyticEventSummaries200Response>;
                  /**
                   * Export a solution
                   * @param params - Parameters for the exportSolution operation
                   * @returns A promise resolving to the exportSolution response
                   */
                  exportSolution: (params: { solutionId: string; qBLVersion?: string }) => Promise<ExportSolution200Response>;
                  /**
                   * Update a solution
                   * @param params - Parameters for the updateSolution operation
                   * @returns A promise resolving to the updateSolution response
                   */
                  updateSolution: (params: { solutionId: string; body?: UpdateSolutionRequest; xQBLErrorsAsSuccess?: boolean }) => Promise<UpdateSolution200Response>;
                  /**
                   * Create a solution
                   * @param params - Parameters for the createSolution operation
                   * @returns A promise resolving to the createSolution response
                   */
                  createSolution: (params: { body?: CreateSolutionRequest; xQBLErrorsAsSuccess?: boolean }) => Promise<CreateSolution200Response>;
                  /**
                   * Export solution to record
                   * @param params - Parameters for the exportSolutionToRecord operation
                   * @returns A promise resolving to the exportSolutionToRecord response
                   */
                  exportSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; xQBLErrorsAsSuccess?: boolean; qBLVersion?: string }) => Promise<ExportSolutionToRecord200Response>;
                  /**
                   * Create solution from record
                   * @param params - Parameters for the createSolutionFromRecord operation
                   * @returns A promise resolving to the createSolutionFromRecord response
                   */
                  createSolutionFromRecord: (params: { tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<CreateSolutionFromRecord200Response>;
                  /**
                   * Update solution from record
                   * @param params - Parameters for the updateSolutionToRecord operation
                   * @returns A promise resolving to the updateSolutionToRecord response
                   */
                  updateSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<UpdateSolutionToRecord200Response>;
                  /**
                   * List solution changes
                   * @param params - Parameters for the changesetSolution operation
                   * @returns A promise resolving to the changesetSolution response
                   */
                  changesetSolution: (params: { solutionId: string; body?: ChangesetSolutionRequest; xQBLErrorsAsSuccess?: boolean }) => Promise<ChangesetSolution200Response>;
                  /**
                   * List solution changes from record
                   * @param params - Parameters for the changesetSolutionFromRecord operation
                   * @returns A promise resolving to the changesetSolutionFromRecord response
                   */
                  changesetSolutionFromRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<ChangesetSolutionFromRecord200Response>;
                  /**
                   * Generate a document
                   * @param params - Parameters for the generateDocument operation
                   * @returns A promise resolving to the generateDocument response
                   */
                  generateDocument: (params: { templateId: number; tableId: string; recordId?: number; filename: string; accept?: string; format?: string; margin?: string; unit?: string; pageSize?: string; orientation?: string; realm?: string }) => Promise<GenerateDocument200Response>;
                }
            - name: >-
                missing-types-report.json
              type: >-
                file
        - name: >-
            index.ts
          type: >-
            file
        - name: >-
            quickbaseClient.ts
          type: >-
            file
          contents: >
            //
            src/quickbaseClient.ts


            import
            {
            QuickbaseClient
            as
            IQuickbaseClient
            }
            from
            "./generated-unified/QuickbaseClient";

            import
            {
            Configuration,
            HTTPHeaders,
            ResponseError
            }
            from
            "./generated/runtime";

            import
            *
            as
            apis
            from
            "./generated/apis";

            import
            {
            TokenCache
            }
            from
            "./tokenCache";

            import
            {
            simplifyName
            }
            from
            "./utils.ts";


            export
            *
            from
            "./generated/models/index";


            export
            interface
            QuickbaseClient
            extends
            IQuickbaseClient
            {}


            export
            interface
            QuickbaseConfig
            {
              realm: string;
              userToken?: string;
              tempToken?: string;
              useTempTokens?: boolean;
              debug?: boolean;
              fetchApi?: typeof fetch;
              convertDates?: boolean; // New flag to control date string conversion, defaults to true
            }


            export
            interface
            TempTokenParams
            {
              appId?: string;
              tableId?: string;
              dbid?: string;
            }


            type
            ApiMethod<K
            extends
            keyof
            QuickbaseClient>
            =
            (
              requestParameters: Parameters<QuickbaseClient[K]>[0],
              initOverrides?: RequestInit
            )
            =>
            Promise<ReturnType<QuickbaseClient[K]>>;


            interface
            MethodInfo<K
            extends
            keyof
            QuickbaseClient>
            {
              api: any;
              method: ApiMethod<K>;
              paramMap: string[];
            }


            type
            MethodMap
            =
            {
              [K in keyof QuickbaseClient]: MethodInfo<K>;
            };


            const
            getParamNames
            =
            (fn:
            (...args:
            any[])
            =>
            any):
            string[]
            =>
              fn
                .toString()
                .slice(fn.toString().indexOf("(") + 1, fn.toString().indexOf(")"))
                .split(",")
                .map((p) => p.trim().split("=")[0]?.trim())
                .filter((p) => p && !p.match(/^\{/) && p !== "options");

            const
            extractDbid
            =
            (
              params: Partial<TempTokenParams>,
              errorMessage: string
            ):
            string
            =>
            {
              const dbid = params.dbid || params.tableId || params.appId;
              if (!dbid) {
                throw new Error(errorMessage);
              }
              return dbid;
            };


            //
            Utility
            to
            convert
            ISO
            date
            strings
            to
            Date
            objects
            recursively,
            with
            optional
            conversion

            function
            transformDates(obj:
            any,
            convertStringsToDates:
            boolean
            =
            true):
            any
            {
              if (obj === null || obj === undefined) return obj;
              // If it's already a Date object, return it as-is
              if (obj instanceof Date) return obj;
              // Convert strings to Date objects if enabled
              if (
                convertStringsToDates &&
                typeof obj === "string" &&
                /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?/.test(
                  obj
                )
              ) {
                return new Date(obj);
              }
              if (Array.isArray(obj)) {
                return obj.map((item) => transformDates(item, convertStringsToDates));
              }
              if (typeof obj === "object") {
                return Object.fromEntries(
                  Object.entries(obj).map(([key, value]) => [
                    key,
                    transformDates(value, convertStringsToDates),
                  ])
                );
              }
              return obj;
            }


            export
            function
            quickbase(config:
            QuickbaseConfig):
            QuickbaseClient
            {
              const {
                realm,
                userToken,
                tempToken: initialTempToken,
                useTempTokens,
                fetchApi,
                debug,
                convertDates = true, // Default to true for backward compatibility
              } = config;
              const baseUrl = `https://api.quickbase.com/v1`;

              const tokenCache = new TokenCache();

              const baseHeaders: HTTPHeaders = {
                "QB-Realm-Hostname": `${realm}.quickbase.com`,
                "Content-Type": "application/json",
              };

              if (initialTempToken) {
                baseHeaders["Authorization"] = `QB-TEMP-TOKEN ${initialTempToken}`;
              } else if (userToken && !useTempTokens) {
                baseHeaders["Authorization"] = `QB-USER-TOKEN ${userToken}`;
              }

              const defaultFetch: typeof fetch | undefined =
                typeof globalThis.window !== "undefined"
                  ? globalThis.window.fetch.bind(globalThis.window)
                  : undefined;
              const configuration = new Configuration({
                basePath: baseUrl,
                headers: { ...baseHeaders },
                fetchApi: fetchApi || defaultFetch,
                credentials: "omit",
              });

              if (!configuration.fetchApi && typeof globalThis.window === "undefined") {
                throw new Error(
                  "fetchApi must be provided in non-browser environments (e.g., Node.js)"
                );
              }

              const apiInstances = Object.fromEntries(
                Object.entries(apis)
                  .filter(([name]) => name.endsWith("Api"))
                  .map(([name, ApiClass]) => [
                    name.replace("Api", "").toLowerCase(),
                    new ApiClass(configuration),
                  ])
              );

              const methodMap = buildMethodMap();

              function buildMethodMap(): MethodMap {
                const methodMap: Partial<MethodMap> = {};
                const isValidMethod = (name: string) =>
                  !name.startsWith("_") &&
                  name !== "constructor" &&
                  !["Middleware", "Pre", "Post", "Raw"].some((s) => name.includes(s));

                for (const [apiName, api] of Object.entries(apiInstances)) {
                  Object.getOwnPropertyNames(Object.getPrototypeOf(api))
                    .filter(
                      (name) =>
                        isValidMethod(name) &&
                        typeof api[name as keyof typeof api] === "function"
                    )
                    .forEach((rawMethodName) => {
                      const simplifiedName = simplifyName(
                        rawMethodName
                      ) as keyof QuickbaseClient;
                      const method = api[rawMethodName as keyof typeof api];
                      const boundMethod = method.bind(api as any) as unknown;
                      if (typeof boundMethod === "function" && boundMethod.length <= 2) {
                        methodMap[simplifiedName] = {
                          api,
                          method: boundMethod as ApiMethod<typeof simplifiedName>,
                          paramMap: getParamNames(method),
                        };
                      }
                    });
                }
                return methodMap as MethodMap;
              }

              const fetchTempToken = async (dbid: string): Promise<string> => {
                const effectiveFetch = fetchApi || defaultFetch;
                if (!effectiveFetch) {
                  throw new Error(
                    "No fetch implementation available for fetching temp token"
                  );
                }

                const response = await effectiveFetch(
                  `https://api.quickbase.com/v1/auth/temporary/${dbid}`,
                  {
                    method: "GET",
                    headers: { ...baseHeaders },
                    credentials: "include",
                  }
                );

                if (!response.ok) {
                  const errorBody: { message?: string } = await response.json();
                  throw new Error(
                    `API Error: ${errorBody.message || "Unknown error"} (Status: ${
                      response.status
                    })`
                  );
                }

                const tokenResult = await response.json();
                const token = tokenResult.temporaryAuthorization;
                if (!token) {
                  throw new Error("No temporary token returned from API");
                }
                tokenCache.set(dbid, token);
                if (debug) {
                  console.log(`Fetched and cached new token for dbid: ${dbid}`, token);
                }
                return token;
              };

              async function invokeMethod<K extends keyof QuickbaseClient>(
                methodName: K,
                params: Parameters<QuickbaseClient[K]>[0] & Partial<TempTokenParams>,
                retryCount: number = 0
              ): Promise<ReturnType<QuickbaseClient[K]>> {
                const methodInfo = methodMap[methodName];
                if (!methodInfo) {
                  throw new Error(`Method ${methodName} not found`);
                }

                const requestParameters: any = {
                  ...params,
                  generated: "body" in params ? { ...params.body } : undefined,
                };

                let requestOptions: RequestInit = {
                  credentials: "omit",
                };

                const selectedToken =
                  initialTempToken || (userToken && !useTempTokens ? userToken : undefined);

                if (methodName === "getTempTokenDBID" && useTempTokens) {
                  const dbid = extractDbid(params, "No dbid provided for getTempTokenDBID");
                  const cachedToken = tokenCache.get(dbid);
                  if (cachedToken) {
                    return { temporaryAuthorization: cachedToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                }

                let authorizationToken = selectedToken;
                if (useTempTokens && !authorizationToken) {
                  const dbid = extractDbid(
                    params,
                    `No dbid found in params for ${methodName} to fetch temp token`
                  );
                  const cachedToken = tokenCache.get(dbid);
                  authorizationToken = cachedToken || (await fetchTempToken(dbid));
                  if (methodName === "getTempTokenDBID") {
                    return { temporaryAuthorization: authorizationToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                  };
                } else if (authorizationToken) {
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-USER-TOKEN ${authorizationToken}`,
                  };
                }

                if (debug) {
                  console.log(`[${methodName}] requestParameters:`, requestParameters);
                  console.log(`[${methodName}] requestOptions:`, requestOptions);
                }

                try {
                  const response = await methodInfo.method(
                    requestParameters,
                    requestOptions
                  );
                  if (debug) {
                    console.log(`[${methodName}] rawResponse:`, response);
                  }
                  if (response instanceof Response) {
                    const contentType = response.headers.get("Content-Type")?.toLowerCase();
                    if (debug) {
                      console.log(`[${methodName}] contentType:`, contentType);
                    }
                    if (contentType?.includes("application/octet-stream")) {
                      return (await response.arrayBuffer()) as ReturnType<
                        QuickbaseClient[K]
                      >;
                    } else if (
                      contentType?.includes("application/x-yaml") ||
                      contentType?.includes("text/yaml")
                    ) {
                      return (await response.text()) as ReturnType<QuickbaseClient[K]>;
                    } else if (contentType?.includes("application/json")) {
                      const jsonResponse = await response.json();
                      if (debug) {
                        console.log(`[${methodName}] jsonResponse:`, jsonResponse);
                      }
                      const transformedResponse = transformDates(
                        jsonResponse,
                        convertDates
                      );
                      if (debug) {
                        console.log(
                          `[${methodName}] transformedResponse:`,
                          transformedResponse
                        );
                      }
                      return transformedResponse as ReturnType<QuickbaseClient[K]>;
                    }
                    return response as ReturnType<QuickbaseClient[K]>;
                  } else {
                    if (debug) {
                      console.log(
                        `[${methodName}] non-Response return, applying transform:`,
                        response
                      );
                    }
                    // Handle case where the generated API returns a pre-parsed object
                    const transformedResponse = transformDates(response, convertDates);
                    if (debug) {
                      console.log(
                        `[${methodName}] transformedNonResponse:`,
                        transformedResponse
                      );
                    }
                    return transformedResponse as ReturnType<QuickbaseClient[K]>;
                  }
                } catch (error) {
                  if (
                    error instanceof ResponseError &&
                    error.response.status === 401 &&
                    retryCount < 1 &&
                    useTempTokens
                  ) {
                    if (debug) {
                      console.log(
                        `Authorization error for ${methodName}, refreshing token:`,
                        error.message
                      );
                    }
                    const dbid = extractDbid(
                      params,
                      `No dbid to refresh token after authorization error`
                    );
                    authorizationToken = await fetchTempToken(dbid);
                    requestOptions.headers = {
                      ...baseHeaders,
                      Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                    };
                    if (debug) {
                      console.log(`Retrying ${methodName} with new token`);
                    }
                    return invokeMethod(methodName, params, retryCount + 1);
                  }
                  if (error instanceof ResponseError) {
                    let errorMessage = error.message;
                    try {
                      const errorBody: { message?: string } = await error.response.json();
                      if (debug) {
                        console.log(`Error response body for ${methodName}:`, errorBody);
                      }
                      errorMessage = errorBody.message || errorMessage;
                    } catch (e) {
                      // Silent fail on parse error
                    }
                    throw new Error(
                      `API Error: ${errorMessage} (Status: ${error.response.status})`
                    );
                  }
                  throw error;
                }
              }

              const proxy = new Proxy<QuickbaseClient>({} as QuickbaseClient, {
                get: (_, prop: string): ((params: any) => Promise<any>) | undefined => {
                  if (prop in methodMap) {
                    const methodName = prop as keyof QuickbaseClient;
                    return (params: Parameters<QuickbaseClient[typeof methodName]>[0]) =>
                      invokeMethod(methodName, params);
                  }
                  return undefined;
                },
              });

              return proxy;
            }
        - name: >-
            tokenCache.ts
          type: >-
            file
        - name: >-
            utils.ts
          type: >-
            file
    - name: >-
        test-artifacts
      type: >-
        directory
      children:
        - name: >-
            .last-run.json
          type: >-
            file
        - name: >-
            test-results.json
          type: >-
            file
    - name: >-
        test-esm.js
      type: >-
        file
    - name: >-
        test-results.json
      type: >-
        file
    - name: >-
        test-umd.js
      type: >-
        file
    - name: >-
        test.ts
      type: >-
        file
    - name: >-
        tests
      type: >-
        directory
      children:
        - name: >-
            playwright
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        cacheSwitching.test.ts
                      type: >-
                        file
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithUserToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        tokenPrefetch.test.ts
                      type: >-
                        file
                    - name: >-
                        tokenRenewal.test.ts
                      type: >-
                        file
        - name: >-
            setup.ts
          type: >-
            file
        - name: >-
            vitest
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
            - name: >-
                unit
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/apps/copyApp.test.ts


                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        CopyAppRequest,
                        CopyApp200Response
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        copyApp",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has copyApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.copyApp).toBe("function");
                          });

                          it("calls copyApp successfully with user token and dates as Date objects", async () => {
                            client = createClient(mockFetch, { debug: true }); // convertDates defaults to true

                            const request: CopyAppRequest = {
                              name: "Copied App",
                              description: "A copy of the original app",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            const mockResponse: CopyApp200Response = {
                              id: "bpqe82s1",
                              name: "Copied App",
                              description: "A copy of the original app",
                              created: new Date("2025-03-11T10:00:00Z"), // Expect Date object
                              updated: new Date("2025-03-11T10:00:00Z"), // Expect Date object
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              ancestorId: "buwai2zpe",
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("calls copyApp successfully with user token and dates as strings", async () => {
                            client = createClient(mockFetch, { debug: true, convertDates: false });

                            const request: CopyAppRequest = {
                              name: "Copied App",
                              description: "A copy of the original app",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            const mockResponse = {
                              id: "bpqe82s1",
                              name: "Copied App",
                              description: "A copy of the original app",
                              created: "2025-03-11T10:00:00Z", // Expect string
                              updated: "2025-03-11T10:00:00Z", // Expect string
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              ancestorId: "buwai2zpe",
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("calls copyApp successfully with temp token and dates as Date objects", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CopyAppRequest = {
                              name: "Copied App with Temp Token",
                              description: "A copy using temp token",
                              properties: {
                                keepData: true,
                                excludeFiles: false,
                                usersAndRoles: true,
                                assignUserToken: false,
                              },
                            };

                            const mockResponse: CopyApp200Response = {
                              id: "bpqe82s2",
                              name: "Copied App with Temp Token",
                              description: "A copy using temp token",
                              created: new Date("2025-03-11T11:00:00Z"), // Expect Date object
                              updated: new Date("2025-03-11T11:00:00Z"), // Expect Date object
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: true,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("calls copyApp successfully with temp token and dates as strings", async () => {
                            client = createClient(mockFetch, {
                              useTempTokens: true,
                              debug: true,
                              convertDates: false,
                            });

                            const request: CopyAppRequest = {
                              name: "Copied App with Temp Token",
                              description: "A copy using temp token",
                              properties: {
                                keepData: true,
                                excludeFiles: false,
                                usersAndRoles: true,
                                assignUserToken: false,
                              },
                            };

                            const mockResponse = {
                              id: "bpqe82s2",
                              name: "Copied App with Temp Token",
                              description: "A copy using temp token",
                              created: "2025-03-11T11:00:00Z", // Expect string
                              updated: "2025-03-11T11:00:00Z", // Expect string
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: true,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token and dates as Date objects", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CopyAppRequest = {
                              name: "Retry Copied App",
                              description: "Retry after 401",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            const mockResponse: CopyApp200Response = {
                              id: "bpqe82s3",
                              name: "Retry Copied App",
                              description: "Retry after 401",
                              created: new Date("2025-03-11T12:00:00Z"), // Expect Date object
                              updated: new Date("2025-03-11T12:00:00Z"), // Expect Date object
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token and dates as strings", async () => {
                            client = createClient(mockFetch, {
                              useTempTokens: true,
                              debug: true,
                              convertDates: false,
                            });

                            const request: CopyAppRequest = {
                              name: "Retry Copied App",
                              description: "Retry after 401",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            const mockResponse = {
                              id: "bpqe82s3",
                              name: "Retry Copied App",
                              description: "Retry after 401",
                              created: "2025-03-11T12:00:00Z", // Expect string
                              updated: "2025-03-11T12:00:00Z", // Expect string
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CopyAppRequest = {
                              name: "",
                              description: "Invalid request",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Name is required" }),
                            });

                            await expect(
                              client.copyApp({ appId: QB_APP_ID, body: request })
                            ).rejects.toThrow("API Error: Name is required (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: JSON.stringify(request),
                              })
                            );
                          });
                        });
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/apps/createApp.test.ts


                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        CreateAppRequest,
                        CreateApp200Response
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        createApp",
                        ()
                        =>
                        {
                          console.log(
                            "Running updated createApp.test.ts - Version with full request expectation"
                          );

                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has createApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.createApp).toBe("function");
                          });

                          it("calls createApp successfully with user token and dates as Date objects", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateAppRequest = {
                              name: "New App",
                              description: "A new app for testing",
                              assignToken: true,
                            };

                            const mockResponse: CreateApp200Response = {
                              id: "new-app-id",
                              name: "New App",
                              description: "A new app for testing",
                              created: new Date("2025-03-11T10:00:00Z"),
                              updated: new Date("2025-03-11T10:00:00Z"),
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              variables: [],
                              dataClassification: "None",
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.createApp({ body: request });

                            expect(result).toEqual(mockResponse);
                            const callArgs = mockFetch.mock.calls[0];
                            const body = JSON.parse(callArgs[1].body as string);
                            console.log("Date objects test - Expected request:", request);
                            console.log("Date objects test - Actual body:", body);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: expect.any(String), // Ensure it’s a string, we’ll check content below
                                credentials: "omit",
                              })
                            );
                            expect(body).toEqual(request); // Moved outside toHaveBeenCalledWith
                          });

                          it("calls createApp successfully with user token and dates as strings", async () => {
                            client = createClient(mockFetch, { debug: true, convertDates: false });

                            const request: CreateAppRequest = {
                              name: "New App",
                              description: "A new app for testing",
                              assignToken: true,
                            };

                            const mockResponse = {
                              id: "new-app-id",
                              name: "New App",
                              description: "A new app for testing",
                              created: "2025-03-11T10:00:00Z",
                              updated: "2025-03-11T10:00:00Z",
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              variables: [],
                              dataClassification: "None",
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.createApp({ body: request });

                            expect(result).toEqual(mockResponse);
                            const callArgs = mockFetch.mock.calls[0];
                            const body = JSON.parse(callArgs[1].body as string);
                            console.log("Strings test - Expected request:", request);
                            console.log("Strings test - Actual body:", body);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: expect.any(String), // Ensure it’s a string, we’ll check content below
                                credentials: "omit",
                              })
                            );
                            expect(body).toEqual(request); // Moved outside toHaveBeenCalledWith
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateAppRequest = {
                              name: "",
                            };

                            mockFetch.mockImplementationOnce(() =>
                              Promise.resolve({
                                ok: false,
                                status: 400,
                                json: () => Promise.resolve({ message: "Name is required" }),
                              })
                            );

                            await expect(client.createApp({ body: request })).rejects.toThrow(
                              "API Error: Name is required (Status: 400)"
                            );

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });
                        });
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/apps/deleteApp.test.ts


                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        DeleteAppRequest,
                        DeleteApp200Response
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        deleteApp",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has deleteApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.deleteApp).toBe("function");
                          });

                          it("calls deleteApp successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteAppRequest = {
                              name: "App to Delete",
                            };

                            const mockResponse: DeleteApp200Response = {
                              deletedAppId: QB_APP_ID,
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.deleteApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("calls deleteApp successfully with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: DeleteAppRequest = {
                              name: "App to Delete with Temp Token",
                            };

                            const mockResponse: DeleteApp200Response = {
                              deletedAppId: QB_APP_ID,
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.deleteApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: DeleteAppRequest = {
                              name: "Retry Delete App",
                            };

                            const mockResponse: DeleteApp200Response = {
                              deletedAppId: QB_APP_ID,
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.deleteApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteAppRequest = {
                              name: "Wrong Name",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid application name" }),
                            });

                            await expect(
                              client.deleteApp({ appId: QB_APP_ID, body: request })
                            ).rejects.toThrow("API Error: Invalid application name (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });
                        });
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/apps/getApp.test.ts


                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        getApp",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has getApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.getApp).toBe("function");
                          });

                          it("calls getApp successfully with dates as Date objects", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const mockResponse = {
                              id: QB_APP_ID,
                              name: "qb-copy",
                              created: new Date("2025-02-13T18:22:33Z"), // Expect Date object
                              updated: new Date("2025-03-04T04:25:51Z"), // Expect Date object
                              description: "",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              dateFormat: "MM-DD-YYYY",
                              hasEveryoneOnTheInternet: false,
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                              ancestorId: undefined,
                              variables: undefined,
                              dataClassification: undefined,
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getApp({ appId: QB_APP_ID });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: undefined,
                                credentials: "omit",
                              })
                            );
                          });

                          it("calls getApp successfully with dates as strings", async () => {
                            client = createClient(mockFetch, { debug: true, convertDates: false });

                            const mockResponse = {
                              id: QB_APP_ID,
                              name: "qb-copy",
                              created: "2025-02-13T18:22:33Z", // Expect string
                              updated: "2025-03-04T04:25:51Z", // Expect string
                              description: "",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              dateFormat: "MM-DD-YYYY",
                              hasEveryoneOnTheInternet: false,
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                              ancestorId: undefined,
                              variables: undefined,
                              dataClassification: undefined,
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getApp({ appId: QB_APP_ID });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: undefined,
                                credentials: "omit",
                              })
                            );
                          });
                        });
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/auth/fetchTempToken401.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach,
                        vi
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        401
                        with
                        fetchTempToken
                        401",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });
                          });

                          it("fails without infinite loop when fetchTempToken returns 401 after initial 401", async () => {
                            let callCount = 0;

                            mockFetch.mockImplementation((url) => {
                              callCount++;
                              console.log(`Mock fetch call ${callCount}: ${url}`);
                              if (url.includes("auth/temporary") && callCount === 1) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () =>
                                    Promise.resolve({ temporaryAuthorization: "initial_token" }),
                                });
                              }
                              if (url.includes("fields") && callCount === 2) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  json: () => Promise.resolve({ message: "Unauthorized" }),
                                });
                              }
                              if (url.includes("auth/temporary") && callCount === 3) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  json: () =>
                                    Promise.resolve({ message: "Unauthorized in fetchTempToken" }),
                                });
                              }
                              return Promise.reject(new Error(`Unexpected fetch call: ${url}`));
                            });

                            const consoleSpy = vi.spyOn(console, "log");
                            await expect(client.getFields({ tableId: QB_TABLE_ID_1 })).rejects.toThrow(
                              "API Error: Unauthorized in fetchTempToken (Status: 401)"
                            );

                            expect(mockFetch).toHaveBeenCalledTimes(3);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`, // Removed &includeFieldPerms=false
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );

                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).not.toHaveBeenCalledWith(
                              "Retrying getFields with new token"
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/auth/getTempTokenDBID.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        getTempTokenDBID",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: false });
                          });

                          it("initializes without errors", () => {
                            expect(client).toBeDefined();
                          });

                          it("has getTempTokenDBID method", () => {
                            expect(typeof client.getTempTokenDBID).toBe("function");
                          });

                          it("fetches and caches temp token on first call", async () => {
                            const mockToken = "b123xyz_temp_token";

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                            });

                            const result = await client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 });
                            expect(result).toEqual({ temporaryAuthorization: mockToken });
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                          });

                          it("reuses cached temp token on second call", async () => {
                            const mockToken = "b123xyz_temp_token";

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                            });

                            const firstResult = await client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 });
                            expect(firstResult).toEqual({ temporaryAuthorization: mockToken });
                            expect(mockFetch).toHaveBeenCalledTimes(1);

                            mockFetch.mockClear();
                            const secondResult = await client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 });
                            expect(secondResult).toEqual({ temporaryAuthorization: mockToken });
                            expect(mockFetch).not.toHaveBeenCalled();
                          });

                          it("handles API error", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 401,
                              json: () => Promise.resolve({ message: "Unauthorized" }),
                            });

                            await expect(
                              client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 })
                            ).rejects.toSatisfy((error: Error) => {
                              expect(error).toBeInstanceOf(Error);
                              expect(error.message).toBe("API Error: Unauthorized (Status: 401)");
                              return true;
                            });
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                          });
                        });
                    - name: >-
                        retryOn401.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/auth/retryOn401.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach,
                        vi
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        401
                        Retry
                        Creates
                        New
                        Token",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });
                          });

                          it("creates a new token on 401 and retries successfully", async () => {
                            const mockToken = "new_token_456";
                            const mockFields = [{ id: 1, label: "Field1" }];
                            let callCount = 0;

                            mockFetch.mockImplementation((url) => {
                              callCount++;
                              console.log(`Mock fetch call ${callCount}: ${url}`);
                              if (url.includes("auth/temporary") && callCount === 1) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                                });
                              }
                              if (url.includes("fields") && callCount === 2) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  text: () => Promise.resolve("Unauthorized"),
                                });
                              }
                              if (url.includes("auth/temporary") && callCount === 3) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () =>
                                    Promise.resolve({ temporaryAuthorization: mockToken + "_retry" }),
                                });
                              }
                              if (url.includes("fields") && callCount === 4) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () => Promise.resolve(mockFields),
                                });
                              }
                              return Promise.reject(new Error(`Unexpected fetch call: ${url}`));
                            });

                            const consoleSpy = vi.spyOn(console, "log");
                            const result = await client.getFields({ tableId: QB_TABLE_ID_1 });

                            expect(result).toEqual(mockFields);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`, // Removed &includeFieldPerms=false
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`, // Removed &includeFieldPerms=false
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                }),
                              })
                            );

                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              `Fetched and cached new token for dbid: ${QB_TABLE_ID_1}`,
                              mockToken + "_retry",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying getFields with new token"
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                    - name: >-
                        two401s.test.ts
                      type: >-
                        file
                      contents: >
                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach,
                        vi
                        }
                        from
                        "vitest";

                        import
                        {
                        createClient,
                        mockFetch
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        -
                        Two
                        401s
                        in
                        a
                        Row",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });
                          });

                          it("logs an error after two 401s in a row", async () => {
                            const mockDbid = "mockDbid123";
                            const mockToken = "new_token_456";
                            let callCount = 0;

                            mockFetch.mockImplementation((url) => {
                              callCount++;
                              console.log(`Mock fetch call ${callCount}: ${url}`);
                              if (url.includes("auth/temporary") && callCount === 1) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                                });
                              }
                              if (url.includes("fields") && callCount === 2) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  text: () => Promise.resolve("Unauthorized"),
                                });
                              }
                              if (url.includes("auth/temporary") && callCount === 3) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () =>
                                    Promise.resolve({ temporaryAuthorization: mockToken + "_retry" }),
                                });
                              }
                              if (url.includes("fields") && callCount === 4) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  json: () => Promise.resolve({ message: "Unauthorized again" }), // Changed to json()
                                  text: () => Promise.resolve("Unauthorized again"), // Keep text() for fallback
                                });
                              }
                              return Promise.reject(new Error(`Unexpected fetch call: ${url}`));
                            });

                            const consoleSpy = vi.spyOn(console, "log");
                            await expect(client.getFields({ tableId: mockDbid })).rejects.toThrow(
                              "API Error: Unauthorized again (Status: 401)"
                            );

                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Fetched and cached new token for dbid: mockDbid123",
                              mockToken + "_retry",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying getFields with new token"
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Error response body for getFields:",
                              { message: "Unauthorized again" }
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/fields/createField.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach,
                        vi
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        CreateFieldRequest,
                        CreateField200Response
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        createField",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors and has createField method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                            expect(typeof client.createField).toBe("function");
                          });

                          it("creates a field successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateFieldRequest = {
                              label: "TestField",
                              fieldType: "text",
                              fieldHelp: "A test field",
                              addToForms: true,
                              permissions: [
                                { role: "Viewer", permissionType: "View", roleId: 10 },
                                { role: "Administrator", permissionType: "Modify", roleId: 12 },
                              ],
                            };

                            const mockResponse: CreateField200Response = {
                              id: 100,
                              label: "TestField",
                              fieldType: "text",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: true,
                              findEnabled: true,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "A test field",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [
                                { permissionType: "View", role: "Viewer", roleId: 10 },
                                { permissionType: "Modify", role: "Administrator", roleId: 12 },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: expect.any(String), // Allow any string for body
                              })
                            );

                            // Additional check to ensure the body matches the request object, ignoring property order
                            const callArgs = mockFetch.mock.calls[0];
                            const receivedBody = JSON.parse(callArgs[1].body as string);
                            expect(receivedBody).toEqual(request);
                          });

                          it("creates a field successfully with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CreateFieldRequest = {
                              label: "TempField",
                              fieldType: "numeric",
                              addToForms: false,
                            };

                            const mockResponse: CreateField200Response = {
                              id: 101,
                              label: "TempField",
                              fieldType: "numeric",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: true,
                              findEnabled: true,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CreateFieldRequest = {
                              label: "RetryField",
                              fieldType: "checkbox",
                            };

                            const mockResponse: CreateField200Response = {
                              id: 102,
                              label: "RetryField",
                              fieldType: "checkbox",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: true,
                              findEnabled: true,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const consoleSpy = vi.spyOn(console, "log");
                            const result = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for createField, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying createField with new token"
                            );
                            consoleSpy.mockRestore();
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateFieldRequest = {
                              label: "", // Invalid: label is required
                              fieldType: "text",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Label is required" }),
                            });

                            await expect(
                              client.createField({ tableId: QB_TABLE_ID_1, body: request })
                            ).rejects.toThrow("API Error: Label is required (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("handles 401 with failed temp token retry", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CreateFieldRequest = {
                              label: "FailField",
                              fieldType: "text",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () =>
                                  Promise.resolve({ message: "Unauthorized in fetchTempToken" }),
                              });

                            const consoleSpy = vi.spyOn(console, "log");
                            await expect(
                              client.createField({ tableId: QB_TABLE_ID_1, body: request })
                            ).rejects.toThrow(
                              "API Error: Unauthorized in fetchTempToken (Status: 401)"
                            );

                            expect(mockFetch).toHaveBeenCalledTimes(3);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for createField, refreshing token:",
                              expect.any(String)
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/fields/deleteFields.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                          DeleteFieldsRequest,
                          DeleteFields200Response,
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        deleteFields",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors and has deleteFields method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                            expect(typeof client.deleteFields).toBe("function");
                          });

                          it("deletes fields successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteFieldsRequest = {
                              fieldIds: [6, 7, 8],
                            };

                            const mockResponse: DeleteFields200Response = {
                              deletedFieldIds: [6, 7, 8],
                              errors: [],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.deleteFields({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });

                          it("handles partial success with errors", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteFieldsRequest = {
                              fieldIds: [6, 7, 8],
                            };

                            const mockResponse: DeleteFields200Response = {
                              deletedFieldIds: [6, 8],
                              errors: ["Error found with fid: 7"],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.deleteFields({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteFieldsRequest = {
                              fieldIds: [], // Invalid: empty fieldIds array
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () =>
                                Promise.resolve({
                                  message: "Invalid input",
                                  description: "Field IDs list cannot be empty.",
                                }),
                            });

                            await expect(
                              client.deleteFields({ tableId: QB_TABLE_ID_1, body: request })
                            ).rejects.toThrow("API Error: Invalid input (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });
                        });
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/fields/getField.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        Field
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        getField",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("initializes without errors and has getField method", () => {
                            expect(client).toBeDefined();
                            expect(typeof client.getField).toBe("function");
                          });

                          it("calls getField successfully with user token", async () => {
                            const mockResponse: Field = {
                              id: 123,
                              label: "Field1",
                              fieldType: "text",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: false,
                              findEnabled: false,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "field help",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [
                                { permissionType: "View", role: "Viewer", roleId: 10 },
                                { permissionType: "None", role: "Participant", roleId: 11 },
                                { permissionType: "Modify", role: "Administrator", roleId: 12 },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getField({
                              fieldId: 123,
                              tableId: QB_TABLE_ID_1,
                              includeFieldPerms: true,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/123?tableId=${QB_TABLE_ID_1}&includeFieldPerms=true`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("calls getField successfully with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const mockResponse: Field = {
                              id: 123,
                              label: "Field1",
                              fieldType: "text",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: false,
                              findEnabled: false,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "field help",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.getField({
                              fieldId: 123,
                              tableId: QB_TABLE_ID_1,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields/123?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("handles 404 error for non-existent field", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () => Promise.resolve({ message: "Field not found" }),
                            });

                            await expect(
                              client.getField({ fieldId: 999, tableId: QB_TABLE_ID_1 })
                            ).rejects.toThrow("API Error: Field not found (Status: 404)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/999?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/fields/getFieldUsage.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        FieldUsage
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        getFieldUsage",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { realm: QB_REALM, debug: true });
                          });

                          it("initializes without errors and has getFieldUsage method", () => {
                            expect(client).toBeDefined();
                            expect(typeof client.getFieldUsage).toBe("function");
                          });

                          it("calls getFieldUsage successfully with user token", async () => {
                            const mockResponse: FieldUsage = {
                              field: {
                                id: 6,
                                name: "name",
                                type: "text", // Match QuickBase's lowercase response
                              },
                              usage: {
                                actions: { count: 0 },
                                appHomePages: { count: 0 },
                                dashboards: { count: 2 },
                                defaultReports: { count: 1 },
                                exactForms: { count: 0 },
                                fields: { count: 0 },
                                forms: { count: 1 },
                                notifications: { count: 0 },
                                personalReports: { count: 0 },
                                pipelines: { count: 1 },
                                relationships: { count: 0 },
                                reminders: { count: 0 },
                                reports: { count: 2 },
                                roles: { count: 2 },
                                tableImports: { count: 2 },
                                tableRules: { count: 1 },
                                webhooks: { count: 0 },
                              },
                            };

                            // Mock the response as an array to match the updated API behavior
                            mockFetch.mockResolvedValueOnce(
                              new Response(JSON.stringify([mockResponse]), {
                                status: 200,
                                statusText: "OK",
                                headers: { "Content-Type": "application/json" },
                              })
                            );

                            const result = await client.getFieldUsage({
                              fieldId: 6,
                              tableId: QB_TABLE_ID_1,
                            });

                            // Expect an array and unwrap the first item
                            expect(result).toBeInstanceOf(Array);
                            expect(result).toHaveLength(1);
                            const fieldUsage = result[0];

                            expect(fieldUsage).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/usage/6?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                            expect(fieldUsage.field.id).toBe(6);
                            expect(fieldUsage.field.name).toBe("name");
                            expect(fieldUsage.usage.dashboards.count).toBe(2);
                          });

                          it("handles 404 error for non-existent field", async () => {
                            mockFetch.mockResolvedValueOnce(
                              new Response(JSON.stringify({ message: "Field not found" }), {
                                status: 404,
                                statusText: "Not Found",
                                headers: { "Content-Type": "application/json" },
                              })
                            );

                            await expect(
                              client.getFieldUsage({
                                fieldId: 999,
                                tableId: QB_TABLE_ID_1,
                              })
                            ).rejects.toThrow("API Error: Field not found (Status: 404)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/usage/999?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("handles 401 error and does not retry with user token", async () => {
                            mockFetch.mockResolvedValueOnce(
                              new Response(JSON.stringify({ message: "Unauthorized" }), {
                                status: 401,
                                statusText: "Unauthorized",
                                headers: { "Content-Type": "application/json" },
                              })
                            );

                            await expect(
                              client.getFieldUsage({
                                fieldId: 6,
                                tableId: QB_TABLE_ID_1,
                              })
                            ).rejects.toThrow("API Error: Unauthorized (Status: 401)");

                            expect(mockFetch).toHaveBeenCalledTimes(1); // No retry with user token
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/usage/6?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/fields/getFields.test.ts

                        import
                        {
                        describe,
                        it,
                        expect
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        getFields",
                        ()
                        =>
                        {
                          it("calls getFields successfully", async () => {
                            mockFetch.mockImplementation((url: string, options: any) => {
                              console.log("Mock fetch for getFields:", url, options);
                              return Promise.resolve({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve([
                                    {
                                      id: 1,
                                      label: "Field1",
                                      fieldType: "text",
                                      noWrap: false,
                                      bold: false,
                                      required: false,
                                      appearsByDefault: false,
                                      findEnabled: false,
                                      unique: false,
                                      doesDataCopy: false,
                                      fieldHelp: "field help",
                                      audited: false,
                                      properties: {
                                        primaryKey: false,
                                        foreignKey: false,
                                        numLines: 1,
                                        maxLength: 0,
                                        appendOnly: false,
                                        allowHTML: false,
                                        allowMentions: false,
                                        sortAsGiven: false,
                                        carryChoices: true,
                                        allowNewChoices: false,
                                        formula: "",
                                        defaultValue: "",
                                      },
                                      permissions: [
                                        { permissionType: "View", role: "Viewer", roleId: 10 },
                                        { permissionType: "None", role: "Participant", roleId: 11 },
                                        { permissionType: "Modify", role: "Administrator", roleId: 12 },
                                      ],
                                    },
                                  ]),
                              } as Response);
                            });

                            const client = createClient(mockFetch, { debug: true }); // Add debug: true for consistency
                            const result = await client.getFields({
                              tableId: QB_TABLE_ID_1,
                              includeFieldPerms: true,
                            });
                            console.log("getFields response:", result);
                            expect(result).toEqual(
                              expect.arrayContaining([
                                expect.objectContaining({
                                  id: 1,
                                  label: "Field1",
                                  fieldType: "text",
                                  noWrap: false,
                                  bold: false,
                                  required: false,
                                  appearsByDefault: false,
                                  findEnabled: false,
                                  unique: false,
                                  doesDataCopy: false,
                                  fieldHelp: "field help",
                                  audited: false,
                                  properties: expect.objectContaining({
                                    primaryKey: false,
                                    foreignKey: false,
                                    numLines: 1,
                                    maxLength: 0,
                                    appendOnly: false,
                                    allowHTML: false,
                                    allowMentions: false,
                                    sortAsGiven: false,
                                    carryChoices: true,
                                    allowNewChoices: false,
                                    formula: "",
                                    defaultValue: "",
                                  }),
                                  permissions: expect.arrayContaining([
                                    expect.objectContaining({
                                      permissionType: "View",
                                      role: "Viewer",
                                      roleId: 10,
                                    }),
                                    expect.objectContaining({
                                      permissionType: "None",
                                      role: "Participant",
                                      roleId: 11,
                                    }),
                                    expect.objectContaining({
                                      permissionType: "Modify",
                                      role: "Administrator",
                                      roleId: 12,
                                    }),
                                  ]),
                                }),
                              ])
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}&includeFieldPerms=true`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/fields/getFieldsUsage.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        FieldUsage
                        }
                        from
                        "@/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        getFieldsUsage",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("initializes without errors and has getFieldsUsage method", () => {
                            expect(client).toBeDefined();
                            expect(typeof client.getFieldsUsage).toBe("function");
                          });

                          it("calls getFieldsUsage successfully with user token", async () => {
                            const mockResponse: FieldUsage[] = [
                              {
                                field: {
                                  id: 6,
                                  name: "name",
                                  type: "Text",
                                },
                                usage: {
                                  actions: { count: 0 },
                                  appHomePages: { count: 0 },
                                  dashboards: { count: 2 },
                                  defaultReports: { count: 1 },
                                  exactForms: { count: 0 },
                                  fields: { count: 0 },
                                  forms: { count: 1 },
                                  notifications: { count: 0 },
                                  personalReports: { count: 0 },
                                  pipelines: { count: 1 },
                                  relationships: { count: 0 },
                                  reminders: { count: 0 },
                                  reports: { count: 2 },
                                  roles: { count: 2 },
                                  tableImports: { count: 3 },
                                  tableRules: { count: 1 },
                                  webhooks: { count: 0 },
                                },
                              },
                            ];

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getFieldsUsage({
                              tableId: QB_TABLE_ID_1,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/usage?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("calls getFieldsUsage with skip and top parameters", async () => {
                            const mockResponse: FieldUsage[] = [
                              {
                                field: {
                                  id: 7,
                                  name: "priority",
                                  type: "Text",
                                },
                                usage: {
                                  actions: { count: 1 },
                                  appHomePages: { count: 0 },
                                  dashboards: { count: 0 },
                                  defaultReports: { count: 0 },
                                  exactForms: { count: 0 },
                                  fields: { count: 1 },
                                  forms: { count: 0 },
                                  notifications: { count: 0 },
                                  personalReports: { count: 0 },
                                  pipelines: { count: 0 },
                                  relationships: { count: 0 },
                                  reminders: { count: 0 },
                                  reports: { count: 1 },
                                  roles: { count: 1 },
                                  tableImports: { count: 0 },
                                  tableRules: { count: 0 },
                                  webhooks: { count: 0 },
                                },
                              },
                            ];

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getFieldsUsage({
                              tableId: QB_TABLE_ID_1,
                              skip: 1,
                              top: 1,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/usage?tableId=${QB_TABLE_ID_1}&skip=1&top=1`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("handles 404 error for non-existent table", async () => {
                            const nonExistentTableId = "nonexistent_dbid";

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () => Promise.resolve({ message: "Table not found" }),
                            });

                            await expect(
                              client.getFieldsUsage({ tableId: nonExistentTableId })
                            ).rejects.toThrow("API Error: Table not found (Status: 404)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields/usage?tableId=${nonExistentTableId}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });
                        });
                - name: >-
                    index.ts
                  type: >-
                    file
                  contents: >
                    //
                    tests/vitest/unit/index.ts

                    //
                    Apps

                    export
                    *
                    from
                    "./apps/copyApp.test.ts";

                    export
                    *
                    from
                    "./apps/createApp.test.ts";

                    export
                    *
                    from
                    "./apps/deleteApp.test.ts";

                    export
                    *
                    from
                    "./apps/getApp.test.ts";


                    //
                    Auth

                    export
                    *
                    from
                    "./auth/fetchTempToken401.test.ts";

                    export
                    *
                    from
                    "./auth/getTempToken.test.ts";

                    export
                    *
                    from
                    "./auth/retryOn401.test.ts";

                    export
                    *
                    from
                    "./auth/two401s.test.ts";


                    //
                    Fields

                    export
                    *
                    from
                    "./fields/getFields.test.ts";

                    export
                    *
                    from
                    "./fields/getField.test.ts";

                    export
                    *
                    from
                    "./fields/createField.test.ts";

                    export
                    *
                    from
                    "./fields/deleteFields.test.ts";

                    export
                    *
                    from
                    "./fields/getFieldsUsage.test.ts";

                    export
                    *
                    from
                    "./fields/getFieldUsage.test.ts";


                    //
                    Records

                    export
                    *
                    from
                    "./records/deleteRecords.test.ts";

                    export
                    *
                    from
                    "./records/runQuery.test.ts";

                    export
                    *
                    from
                    "./records/upsert.test.ts";


                    //
                    Tables

                    export
                    *
                    from
                    "./tables/createTable.test.ts";

                    export
                    *
                    from
                    "./tables/deleteTable.test.ts";

                    export
                    *
                    from
                    "./tables/getAppTables.test.ts";

                    export
                    *
                    from
                    "./tables/getRelationships.test.ts";

                    export
                    *
                    from
                    "./tables/getTable.test.ts";

                    export
                    *
                    from
                    "./tables/updateTable.test.ts";
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/records/deleteRecords.test.ts

                        import
                        {
                        describe,
                        expect,
                        test,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        deleteRecords",
                        ()
                        =>
                        {
                          let qb: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            qb = createClient(mockFetch, { debug: true }); // Use debug: true for consistency with other tests
                          });

                          test("sends correct DELETE request and handles success", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ numberDeleted: 1 }),
                            });

                            const result = await qb.deleteRecords({
                              body: {
                                from: QB_TABLE_ID_1,
                                where: "{3.EX.'5'}", // Simulate deleting Record ID 5
                              },
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({ from: QB_TABLE_ID_1, where: "{3.EX.'5'}" }),
                              })
                            );
                            expect(result).toEqual({ numberDeleted: 1 });
                          });

                          test("handles no records deleted", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ numberDeleted: 0 }),
                            });

                            const result = await qb.deleteRecords({
                              body: {
                                from: QB_TABLE_ID_1,
                                where: "{3.EX.'999999'}", // Non-existent Record ID
                              },
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  from: QB_TABLE_ID_1,
                                  where: "{3.EX.'999999'}",
                                }),
                              })
                            );
                            expect(result).toEqual({ numberDeleted: 0 });
                          });

                          test("throws error on API failure", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid query" }),
                            });

                            await expect(() =>
                              qb.deleteRecords({
                                body: {
                                  from: QB_TABLE_ID_1,
                                  where: "{3.EX.'invalid'}",
                                },
                              })
                            ).rejects.toThrow("API Error: Invalid query (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  from: QB_TABLE_ID_1,
                                  where: "{3.EX.'invalid'}",
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/records/runQuery.test.ts

                        import
                        {
                        describe,
                        test,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        RunQueryRequest,
                        RunQueryResponse
                        }
                        from
                        "@/generated";


                        describe("QuickbaseClient
                        Unit
                        -
                        runQuery",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          test("sends correct POST request and handles successful query response", async () => {
                            const queryRequest: RunQueryRequest = {
                              from: QB_TABLE_ID_1,
                              select: [3, 6, 7],
                              where: "{6.EX.'Task 1'}",
                              sortBy: [{ fieldId: 6, order: "ASC" }],
                              groupBy: [{ fieldId: 7, grouping: "equal-values" }],
                              options: { skip: 0, top: 100, compareWithAppLocalTime: false },
                            };

                            const mockResponse: RunQueryResponse = {
                              data: [
                                { "3": { value: 1 }, "6": { value: "Task 1" }, "7": { value: "High" } },
                              ],
                              fields: [
                                { id: 3, label: "Record ID#", type: "recordid" },
                                { id: 6, label: "Task Name", type: "text" },
                                { id: 7, label: "Priority", type: "text" },
                              ],
                              metadata: {
                                numFields: 3,
                                numRecords: 1,
                                skip: 0,
                                top: 100,
                                totalRecords: 1,
                              },
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.runQuery({ body: queryRequest });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records/query",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(queryRequest),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                          });

                          test("handles API error with invalid query", async () => {
                            const invalidQueryRequest = {
                              from: QB_TABLE_ID_1,
                              select: [3],
                              where: "{999.EX.'Invalid'}", // Invalid field ID
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid query" }),
                            });

                            await expect(
                              client.runQuery({ body: invalidQueryRequest })
                            ).rejects.toThrow("API Error: Invalid query (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records/query",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(invalidQueryRequest),
                              })
                            );
                          });
                        });
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/records/upsert.test.ts

                        import
                        {
                        describe,
                        expect,
                        test,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        vi
                        }
                        from
                        "vitest";


                        //
                        Note:
                        Type
                        augmentation
                        moved
                        to
                        src/types.d.ts

                        describe("QuickbaseClient
                        Unit
                        -
                        upsert",
                        ()
                        =>
                        {
                          beforeEach(() => {
                            vi.resetModules(); // Reset module cache
                            mockFetch.mockClear();
                          });

                          test("sends correct POST request and handles successful upsert", async () => {
                            const qb = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () =>
                                Promise.resolve({
                                  data: [{ id: 1, "6": { value: "value1" } }],
                                  metadata: {
                                    createdRecordIds: [1],
                                    updatedRecordIds: [],
                                    unchangedRecordIds: [],
                                    totalNumberOfRecordsProcessed: 1,
                                  },
                                }),
                            });

                            console.log("[Test] Calling qb.upsert with:", {
                              body: { to: QB_TABLE_ID_1, data: [{ "6": { value: "value1" } }] },
                            });
                            const result = await qb.upsert({
                              body: { to: QB_TABLE_ID_1, data: [{ "6": { value: "value1" } }] },
                            });

                            console.log("[Test] mockFetch calls:", mockFetch.mock.calls);
                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "6": { value: "value1" } }],
                                }),
                              })
                            );

                            expect(result).toEqual({
                              data: [{ id: 1, "6": { value: "value1" } }],
                              metadata: {
                                createdRecordIds: [1],
                                updatedRecordIds: [],
                                unchangedRecordIds: [],
                                totalNumberOfRecordsProcessed: 1,
                              },
                            });
                          });

                          test("handles API error with invalid data", async () => {
                            const qb = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid data format" }),
                            });

                            await expect(
                              qb.upsert({
                                body: { to: QB_TABLE_ID_1, data: [{ "999": { value: "invalid" } }] },
                              })
                            ).rejects.toThrow("API Error: Invalid data format (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "999": { value: "invalid" } }],
                                }),
                              })
                            );
                          });

                          test("handles upsert with temp token", async () => {
                            const qb = createClient(mockFetch, { useTempTokens: true, debug: true });

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp-token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({
                                    data: [{ id: 2, "7": { value: "value2" } }],
                                    metadata: {
                                      createdRecordIds: [2],
                                      updatedRecordIds: [],
                                      unchangedRecordIds: [],
                                      totalNumberOfRecordsProcessed: 1,
                                    },
                                  }),
                              });

                            const result = await qb.upsert({
                              body: { to: QB_TABLE_ID_1, data: [{ "7": { value: "value2" } }] },
                              dbid: QB_TABLE_ID_1, // Use QB_TABLE_ID_1 as dbid for temp token
                            } as any); // Temporary type assertion until types.d.ts is applied

                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp-token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "7": { value: "value2" } }],
                                }),
                              })
                            );

                            expect(result).toEqual({
                              data: [{ id: 2, "7": { value: "value2" } }],
                              metadata: {
                                createdRecordIds: [2],
                                updatedRecordIds: [],
                                unchangedRecordIds: [],
                                totalNumberOfRecordsProcessed: 1,
                              },
                            });
                          });

                          test("sends correct POST request with data fields", async () => {
                            const qb = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () =>
                                Promise.resolve({
                                  data: [{ id: 1, "6": { value: "value1" } }],
                                  metadata: {
                                    createdRecordIds: [1],
                                    updatedRecordIds: [],
                                    unchangedRecordIds: [],
                                    totalNumberOfRecordsProcessed: 1,
                                  },
                                }),
                            });

                            const result = await qb.upsert({
                              body: { to: QB_TABLE_ID_1, data: [{ "6": { value: "value1" } }] },
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "6": { value: "value1" } }],
                                }),
                              })
                            );

                            if (result.data && result.data.length > 0) {
                              expect((result.data[0]["6"] as { value: any }).value).toBe("value1");
                            } else {
                              throw new Error("Expected data array to have at least one element");
                            }
                          });
                        });
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/records/createTable.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        createTable",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("calls createTable successfully with user token", async () => {
                            const mockBody = {
                              name: "TestTable",
                              description: "Unit test table",
                              singleRecordName: "Test",
                              pluralRecordName: "Tests",
                            };
                            const mockResponse = {
                              id: "newly-created-table-id-1234567890", // Changed from "buya8h9iz"
                              name: "TestTable",
                              alias: "_DBID_TESTTABLE",
                              description: "Unit test table",
                              created: new Date("2025-03-10T21:00:00.000Z"),
                              updated: new Date("2025-03-10T21:00:00.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Test",
                              pluralRecordName: "Tests",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const response = await client.createTable({
                              appId: QB_APP_ID,
                              body: mockBody,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(1);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "Content-Type": "application/json",
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                                body: JSON.stringify(mockBody),
                              })
                            );
                          });
                        });
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/records/deleteTable.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_TABLE_ID_1,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        deleteTable",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("calls deleteTable successfully with user token", async () => {
                            const mockResponse = {
                              deletedTableId: QB_TABLE_ID_1,
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const response = await client.deleteTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(1);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "Content-Type": "application/json",
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });

                          it("handles 404 error for non-existent table", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () =>
                                Promise.resolve({
                                  message: "Invalid DBID",
                                  description: "Table not found in app.",
                                }),
                            });

                            await expect(
                              client.deleteTable({ tableId: QB_TABLE_ID_1, appId: QB_APP_ID })
                            ).rejects.toThrow("API Error: Invalid DBID (Status: 404)");
                            expect(mockFetch).toHaveBeenCalledTimes(1);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "Content-Type": "application/json",
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/tables/getAppTables.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        getAppTables",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true }); // Add debug: true for consistency
                          });

                          it("calls getAppTables successfully", async () => {
                            mockFetch.mockImplementation((url: string, options: any) => {
                              console.log("Mock fetch for getAppTables:", url, options);
                              return Promise.resolve({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve([
                                    {
                                      id: "buwai2zr4",
                                      name: "Root",
                                      alias: "_DBID_ROOT",
                                      description: "",
                                      created: new Date("2025-02-13T18:22:33.000Z"),
                                      updated: new Date("2025-02-13T18:22:34.000Z"),
                                      nextRecordId: 1,
                                      nextFieldId: 6,
                                      defaultSortFieldId: 2,
                                      defaultSortOrder: "DESC",
                                      keyFieldId: 3,
                                      singleRecordName: "Root",
                                      pluralRecordName: "Roots",
                                      sizeLimit: "500 MB",
                                      spaceUsed: "0 KB",
                                      spaceRemaining: "500 MB",
                                    },
                                  ]),
                              } as Response);
                            });

                            const result = await client.getAppTables({ appId: QB_APP_ID });
                            console.log("getAppTables response:", result);
                            expect(result).toEqual(
                              expect.arrayContaining([
                                expect.objectContaining({
                                  id: "buwai2zr4",
                                  name: "Root",
                                  alias: "_DBID_ROOT",
                                  description: "",
                                  created: new Date("2025-02-13T18:22:33.000Z"),
                                  updated: new Date("2025-02-13T18:22:34.000Z"),
                                  nextRecordId: 1,
                                  nextFieldId: 6,
                                  defaultSortFieldId: 2,
                                  defaultSortOrder: "DESC",
                                  keyFieldId: 3,
                                  singleRecordName: "Root",
                                  pluralRecordName: "Roots",
                                  sizeLimit: "500 MB",
                                  spaceUsed: "0 KB",
                                  spaceRemaining: "500 MB",
                                }),
                              ])
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/relationships/getRelationships.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                          QB_TABLE_ID_2,
                        }
                        from
                        "@tests/setup.ts";

                        import
                        {
                        GetRelationships200Response
                        }
                        from
                        "/home/drew/Projects/quickbase-js/src/generated/models";


                        describe("QuickbaseClient
                        Unit
                        -
                        getRelationships",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true }); // Consistent with output
                          });

                          it("initializes without errors", () => {
                            expect(client).toBeDefined();
                          });

                          it("has getRelationships method", () => {
                            expect(typeof client.getRelationships).toBe("function");
                          });

                          it("sends correct GET request and handles successful response", async () => {
                            const mockResponse: GetRelationships200Response = {
                              metadata: {
                                numRelationships: 1,
                                skip: 0,
                                totalRelationships: 1,
                              },
                              relationships: [
                                {
                                  id: 6,
                                  parentTableId: QB_TABLE_ID_1, // Parent table
                                  childTableId: QB_TABLE_ID_2, // Child table
                                  foreignKeyField: {
                                    id: 6,
                                    label: "Related record",
                                    type: "numeric",
                                  },
                                  isCrossApp: false,
                                  lookupFields: [
                                    {
                                      id: 3,
                                      label: "Name",
                                      type: "text",
                                    },
                                  ],
                                  summaryFields: [
                                    {
                                      id: 8,
                                      label: "my summary field",
                                      type: "numeric",
                                    },
                                  ],
                                },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getRelationships({
                              tableId: QB_TABLE_ID_2,
                              skip: 0,
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                            expect(result.metadata.numRelationships).toBe(1);
                            expect(result.relationships).toHaveLength(1);
                            expect(result.relationships[0].id).toBe(6);
                            expect(result.relationships[0].foreignKeyField.label).toBe(
                              "Related record"
                            );
                          });

                          it("handles request without skip parameter", async () => {
                            const mockResponse: GetRelationships200Response = {
                              metadata: {
                                numRelationships: 1,
                                skip: 0,
                                totalRelationships: 1,
                              },
                              relationships: [
                                {
                                  id: 6,
                                  parentTableId: QB_TABLE_ID_1,
                                  childTableId: QB_TABLE_ID_2,
                                  foreignKeyField: {
                                    id: 6,
                                    label: "Related record",
                                    type: "numeric",
                                  },
                                  isCrossApp: false,
                                  lookupFields: [],
                                  summaryFields: [],
                                },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getRelationships({
                              tableId: QB_TABLE_ID_2, // Corrected from QB_TABLE_ID_1
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                          });

                          it("handles API error response", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () => Promise.resolve({ message: "Table not found" }),
                            });

                            await expect(
                              client.getRelationships({
                                tableId: QB_TABLE_ID_2, // Corrected from QB_TABLE_ID_1
                                skip: 0,
                              })
                            ).rejects.toThrow("API Error: Table not found (Status: 404)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("retries with temp token after 401", async () => {
                            const mockResponse: GetRelationships200Response = {
                              metadata: {
                                numRelationships: 1,
                                skip: 0,
                                totalRelationships: 1,
                              },
                              relationships: [
                                {
                                  id: 6,
                                  parentTableId: QB_TABLE_ID_1,
                                  childTableId: QB_TABLE_ID_2,
                                  foreignKeyField: {
                                    id: 6,
                                    label: "Related record",
                                    type: "numeric",
                                  },
                                  isCrossApp: false,
                                },
                              ],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const tempClient = createClient(mockFetch, {
                              useTempTokens: true,
                              debug: true,
                            });
                            const result = await tempClient.getRelationships({
                              tableId: QB_TABLE_ID_2,
                              skip: 0,
                            });

                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_2}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_2}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                          });
                        });
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/tables/getTable.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_TABLE_ID_1,
                          QB_REALM,
                          QB_USER_TOKEN,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        getTable",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("calls getTable successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Root",
                              alias: "_DBID_ROOT",
                              description: "",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-02-13T18:22:34.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const response = await client.getTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });

                          it("calls getTable successfully with temp token", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Root",
                              alias: "_DBID_ROOT",
                              description: "",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-02-13T18:22:34.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const response = await client.getTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                }),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Root",
                              alias: "_DBID_ROOT",
                              description: "",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-02-13T18:22:34.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const response = await client.getTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("handles 401 with failed temp token retry", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () =>
                                  Promise.resolve({ message: "Unauthorized in fetchTempToken" }),
                              });

                            await expect(
                              client.getTable({ tableId: QB_TABLE_ID_1, appId: QB_APP_ID })
                            ).rejects.toThrow(
                              "API Error: Unauthorized in fetchTempToken (Status: 401)"
                            );
                            expect(mockFetch).toHaveBeenCalledTimes(3);
                          });

                          it("handles 404 Not Found", async () => {
                            client = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () => Promise.resolve({ message: "Table not found" }),
                            });

                            await expect(
                              client.getTable({ tableId: QB_TABLE_ID_1, appId: QB_APP_ID })
                            ).rejects.toThrow("API Error: Table not found (Status: 404)");
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
                      contents: >
                        //
                        tests/vitest/unit/records/updateTable.test.ts

                        import
                        {
                        describe,
                        it,
                        expect,
                        beforeEach
                        }
                        from
                        "vitest";

                        import
                        {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_TABLE_ID_1,
                        }
                        from
                        "@tests/setup.ts";


                        describe("QuickbaseClient
                        Unit
                        -
                        updateTable",
                        ()
                        =>
                        {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("calls updateTable successfully with temp token", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            const mockBody = {
                              name: "Updated Root",
                              description: "Updated description",
                            };
                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Updated Root",
                              alias: "_DBID_ROOT",
                              description: "Updated description",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-03-10T12:00:00.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const response = await client.updateTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                              body: mockBody,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${process.env.QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(mockBody),
                              })
                            );
                          });
                        });
                - name: >-
                    umd.test.ts
                  type: >-
                    file
                  contents: >
                    //
                    tests/vitest/unit/umd.test.ts

                    import
                    {
                    test,
                    expect
                    }
                    from
                    "vitest";

                    const
                    quickbaseUMD
                    =
                    require("../../dist/umd/quickbase.umd.js");

                    const
                    {
                    quickbase:
                    quickbaseESM
                    }
                    =
                    await
                    import("../../dist/esm/quickbase.js");

                    test("UMD
                    and
                    ESM
                    builds
                    work
                    in
                    Node.js",
                    ()
                    =>
                    {
                      expect(quickbaseUMD).toBeDefined();
                      expect(quickbaseESM).toBeDefined();
                    });
    - name: >-
        text.txt
      type: >-
        file
    - name: >-
        tools
      type: >-
        directory
      children:
        - name: >-
            generate-types.ts
          type: >-
            file
        - name: >-
            log-gen.ts
          type: >-
            file
        - name: >-
            log-gen.yaml
          type: >-
            file
        - name: >-
            openapi-jars
          type: >-
            directory
          children:
            - name: >-
                openapi-generator-cli-7.12.0.jar
              type: >-
                file
        - name: >-
            openapi-schema-validator.ts
          type: >-
            file
        - name: >-
            spec-analyzer.ts
          type: >-
            file
        - name: >-
            split-spec.ts
          type: >-
            file
        - name: >-
            test-import.ts
          type: >-
            file
        - name: >-
            validate-spec.ts
          type: >-
            file
    - name: >-
        tsconfig.build.json
      type: >-
        file
    - name: >-
        tsconfig.json
      type: >-
        file
    - name: >-
        versionrc.json
      type: >-
        file
    - name: >-
        vitest.config.ts
      type: >-
        file
