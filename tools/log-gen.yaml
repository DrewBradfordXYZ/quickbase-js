project: >-
  quickbase-js
date: >-
  3/20/2025
root: >-
  /home/drew/Projects/quickbase-js
goals:
  - >-
    A
    library
    for
    interacting
    with
    the
    QuickBase
    RESTful
    API.
  - >-
    Use
    OpenAPI
    to
    generate
    types
    and
    methods
    using
    a
    proxy.
    Validate
    with
    tests.
  - >-
    Provide
    robust
    and
    intuitive
    temporary
    token
    support
    for
    browser
    environments.
  - >-
    User
    Tokens
    support
    both
    Node.js
    and
    browser
    environments.
  - >-
    Use
    case:
    JS
    frameworks
    like
    React,
    Vue,
    and
    Angular
    hosted
    in
    QuickBase
    code
    pages.
  - >-
    Enable
    a
    flexible
    or
    native
    fetch
    in
    the
    browser.
  - >-
    Enable
    a
    flexible
    fetch
    framework
    in
    Node.js.
  - >-
    #
  - >-
    No
    manual
    updating
    methods
    when
    the
    QuickBase
    API
    changes.
  - >-
    The
    proxy
    magic
    dynamically
    maps
    generated
    methods
    and
    types.
  - >-
    #
  - >-
    TokenCache
    is
    defined
    per
    quickbaseClient
    call,
    so
    each
    instance
    has
    its
    own
    isolated
    TokenCache.
  - >-
    Each
    quickbase
    client
    instance
    has
    an
    isolated
    and
    individual
    token
    cache.
pipelineOverview:
  - >-
    What
    I’m
    Trying
    to
    Do
  - >-
    My
    approach
    is
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById
    so
    QuickbaseClient.ts
    can
    map
    it
    to
    client.getApp.
    Steps
    include:
  - >-
    Fix
    fix-spec.ts:
  - >-
    Add
    tags:
    ["Apps"]
    to
    /apps/*
    endpoints
    to
    group
    them
    into
    AppsApi.ts.
  - >-
    Ensure
    all
    endpoints
    and
    models
    are
    correctly
    defined
    and
    typed.
  - >-
    Debug
    regenerate-client.ts:
  - >-
    Enhance
    logging
    to
    catch
    why
    AppsApi.ts
    isn’t
    generated.
  - >-
    Test
    if
    getAppById
    appears
    in
    another
    file
    (e.g.,
    DefaultApi.ts).
  - >-
    Update
    QuickbaseClient.ts:
  - >-
    Adjust
    imports
    to
    use
    the
    correct
    API
    class
    once
    generated.
  - >-
    Test
    and
    Iterate:
  - >-
    Run
    npm
    run
    fix-spec,
    npm
    run
    regenerate,
    and
    npm
    run
    test
    to
    verify
    AppsApi.ts
    exists
    and
    test.ts
    works.
  - >-
    The
    latest
    fix-spec.ts
    with
    tags
    aims
    to
    force
    the
    generator
    to
    create
    AppsApi.ts,
    addressing
    the
    missing
    file
    issue.
  - >-
    Relevant
    Project
    Files
  - >-
    Here’s
    a
    list
    of
    files
    that
    would
    help
    understand
    and
    resolve
    this
    problem,
    along
    with
    their
    roles:
  - >-
    src/code-generation/fix-spec.ts:
  - >-
    Role:
    Modifies
    the
    original
    QuickBase
    spec
    (e.g.,
    QuickBase_RESTful_*.json)
    to
    create
    quickbase-fixed.json
    with
    required
    endpoints
    (e.g.,
    /apps/{appId}).
  - >-
    Relevance:
    Defines
    the
    spec
    fed
    to
    the
    generator;
    errors
    here
    affect
    generation.
  - >-
    src/code-generation/quickbase-fixed.json:
  - >-
    Role:
    The
    processed
    OpenAPI
    spec
    used
    by
    regenerate-client.ts
    to
    generate
    code.
  - >-
    Relevance:
    Confirms
    if
    /apps/{appId}
    is
    correctly
    structured
    with
    operationId:
    "getAppById".
  - >-
    src/code-generation/regenerate-client.ts:
  - >-
    Role:
    Runs
    OpenAPI
    Generator
    to
    produce
    src/generated/
    files
    (APIs
    and
    models)
    and
    fixes
    .ts
    extensions
    with
    ts-morph.
  - >-
    Relevance:
    Controls
    the
    generation
    process;
    logs
    reveal
    why
    AppsApi.ts
    is
    missing.
  - >-
    src/generated/apis/AppsApi.ts
    (if
    exists):
  - >-
    Role:
    Should
    contain
    getAppById
    method
    for
    /apps/{appId}
    GET.
  - >-
    Relevance:
    Missing
    file
    is
    the
    core
    issue;
    its
    absence
    breaks
    QuickbaseClient.ts.
  - >-
    src/generated/apis/DefaultApi.ts:
  - >-
    Role:
    Default
    API
    class
    for
    untagged
    operations.
  - >-
    Relevance:
    Might
    contain
    getAppById
    if
    tags
    are
    misconfigured.
  - >-
    src/QuickbaseClient.ts:
  - >-
    Role:
    Wraps
    generated
    API
    classes
    (e.g.,
    AppsApi)
    in
    a
    Proxy
    for
    ergonomic
    calls
    (e.g.,
    client.getApp).
  - >-
    Relevance:
    Fails
    to
    import
    AppsApi.ts,
    causing
    the
    runtime
    error.
  - >-
    src/test.ts:
  - >-
    Role:
    Test
    script
    calling
    client.getApp({
    appId
    }).
  - >-
    Relevance:
    Final
    validation
    point;
    shows
    if
    the
    fix
    works.
  - >-
    .env.development:
  - >-
    Role:
    Stores
    QB_REALM,
    QB_USER_TOKEN,
    QB_APP_ID
    for
    API
    authentication.
  - >-
    Relevance:
    Ensures
    the
    API
    call
    has
    valid
    credentials
    (not
    the
    current
    issue,
    but
    critical
    for
    success).
  - >-
    src/specs/QuickBase_RESTful_API_2025-03-04T06_22_39.725Z.json
    (or
    similar):
  - >-
    Role:
    Original
    QuickBase
    API
    spec
    before
    fix-spec.ts
    processing.
  - >-
    Relevance:
    Shows
    how
    /apps/{appId}
    was
    originally
    defined,
    helping
    identify
    conflicts.
  - >-
    package.json:
  - >-
    Role:
    Defines
    scripts
    (fix-spec,
    regenerate,
    test)
    and
    dependencies
    (e.g.,
    ts-node,
    openapi-generator-cli).
  - >-
    Relevance:
    Confirms
    script
    commands
    and
    versions
    align
    with
    our
    process.
  - >-
    What
    We
    Achieved
  - >-
    Goal
    Met:
    You
    can
    now
    call
    client.getApp({
    appId:
    "buwai2zpe"
    })
    and
    get
    the
    app
    details
    {
    id:
    'buwai2zpe',
    name:
    'qb-copy'
    }.
  - >-
    Fixes
    Applied:
  - >-
    Added
    tags:
    ["Apps"]
    in
    fix-spec.ts
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById.
  - >-
    Updated
    QuickbaseClient.ts
    to:
  - >-
    Use
    prototype
    methods
    via
    Object.getOwnPropertyNames.
  - >-
    Bind
    methods
    to
    preserve
    context
    with
    .bind(api).
  - >-
    Handle
    getAppById’s
    direct
    JSON
    return
    instead
    of
    a
    Response
    object.
  - >-
    Result:
    The
    ergonomic
    API
    you
    wanted
    (client.getApp)
    works
    seamlessly
    with
    the
    generated
    AppsApi.ts.
  - >-
    Why
    It
    Works
    Now
  - >-
    fix-spec.ts:
  - >-
    Correctly
    defined
    /apps/{appId}
    with
    operationId:
    "getAppById"
    and
    tags:
    ["Apps"],
    ensuring
    AppsApi.ts
    generation.
  - >-
    regenerate-client.ts:
  - >-
    Successfully
    ran
    OpenAPI
    Generator
    to
    produce
    AppsApi.ts
    with
    getAppById.
  - >-
    QuickbaseClient.ts:
  - >-
    buildMethodMap
    now
    captures
    getAppById
    and
    maps
    it
    to
    getApp.
  - >-
    invokeMethod
    passes
    {
    appId:
    'buwai2zpe'
    }
    as
    requestParameters
    and
    handles
    the
    JSON
    response
    directly.
  - >-
    test.ts:
  - >-
    Calls
    client.getApp
    and
    logs
    the
    result,
    proving
    the
    end-to-end
    flow.
tree:
  name: >-
    .
  type: >-
    directory
  children:
    - name: >-
        .env
      type: >-
        file
    - name: >-
        .gitignore
      type: >-
        file
    - name: >-
        CHANGELOG.md
      type: >-
        file
    - name: >-
        LICENSE
      type: >-
        file
    - name: >-
        README.md
      type: >-
        file
    - name: >-
        build-common.js
      type: >-
        file
    - name: >-
        build-esm.js
      type: >-
        file
    - name: >-
        build-umd.js
      type: >-
        file
    - name: >-
        dist
      type: >-
        directory
      children:
        - name: >-
            esm
          type: >-
            directory
          children:
            - name: >-
                quickbase.d.ts
              type: >-
                file
            - name: >-
                quickbase.js
              type: >-
                file
            - name: >-
                quickbase.js.map
              type: >-
                file
            - name: >-
                quickbase.min.js
              type: >-
                file
            - name: >-
                quickbase.min.js.map
              type: >-
                file
        - name: >-
            umd
          type: >-
            directory
          children:
            - name: >-
                quickbase.umd.js
              type: >-
                file
            - name: >-
                quickbase.umd.js.map
              type: >-
                file
            - name: >-
                quickbase.umd.min.js
              type: >-
                file
            - name: >-
                quickbase.umd.min.js.map
              type: >-
                file
    - name: >-
        examples
      type: >-
        directory
      children:
        - name: >-
            quicbase-jsCDN.html
          type: >-
            file
        - name: >-
            react.js
          type: >-
            file
        - name: >-
            vanillajs.html
          type: >-
            file
    - name: >-
        open-api
      type: >-
        directory
      children:
        - name: >-
            fix-spec-main.ts
          type: >-
            file
        - name: >-
            generate-unified-interface.ts
          type: >-
            file
          contents: >
            #!/usr/bin/env
            node

            console.log("Script
            started");


            import
            {
              readFileSync,
              writeFileSync,
              mkdirSync,
              existsSync,
              readdirSync,
            }
            from
            "fs";

            import
            {
            join,
            dirname
            }
            from
            "path";

            import
            {
            fileURLToPath
            }
            from
            "url";

            import
            {
            OpenAPIV2
            }
            from
            "openapi-types";

            import
            {
            Project
            }
            from
            "ts-morph";

            import
            {
            generateJsDoc
            }
            from
            "./utils/generateJsDoc.js";

            import
            {
            generateDocsJson
            }
            from
            "./utils/generateDocsJson.js";
            //
            Keep
            in
            utils/


            const
            simplifyName
            =
            (str:
            string):
            string
            =>
            str;


            const
            __dirname
            =
            dirname(fileURLToPath(import.meta.url));

            const
            SPEC_FILE
            =
            join(__dirname,
            "output",
            "quickbase-fixed.json");

            const
            OUTPUT_DIR
            =
            join(__dirname,
            "..",
            "src",
            "generated-unified");

            const
            OUTPUT_FILE
            =
            join(OUTPUT_DIR,
            "QuickbaseClient.ts");

            const
            MODELS_DIR
            =
            join(__dirname,
            "..",
            "src",
            "generated",
            "models");

            const
            DOCS_DATA_DIR
            =
            join(__dirname,
            "..",
            "docs-data");

            const
            DOCS_JSON_FILE
            =
            join(DOCS_DATA_DIR,
            "api-docs.json");


            function
            mapOpenApiTypeToTs(
              openApiType: string | string[] | undefined
            ):
            string
            {
              const type = Array.isArray(openApiType)
                ? openApiType[0]
                : openApiType || "any";
              switch (type.toLowerCase()) {
                case "integer":
                case "int":
                case "number":
                  return "number";
                case "string":
                  return "string";
                case "boolean":
                  return "boolean";
                default:
                  return "any";
              }
            }


            function
            mapRefToType(
              schema: OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject | undefined,
              modelImports: Set<string>,
              spec: OpenAPIV2.Document,
              depth: number = 0,
              availableModels: string[],
              missingTypes: Set<string>
            ):
            string
            {
              if (!schema) return "any";
              if ("$ref" in schema && schema.$ref) {
                const refParts = schema.$ref.split("/");
                const model = refParts[refParts.length - 1];
                const pascalModel = model.charAt(0).toUpperCase() + model.slice(1);
                if (availableModels.includes(pascalModel)) {
                  modelImports.add(pascalModel);
                  return pascalModel;
                }
                missingTypes.add(pascalModel);
                return "any";
              }
              if ("type" in schema) {
                if (schema.type === "object" && schema.properties) {
                  const props = Object.entries(schema.properties).map(([key, prop]) => {
                    const propSchema = prop as OpenAPIV2.SchemaObject;
                    const propType = mapRefToType(
                      propSchema,
                      modelImports,
                      spec,
                      depth + 1,
                      availableModels,
                      missingTypes
                    );
                    return `${key}${propSchema.required ? "" : "?"}: ${propType}`;
                  });
                  return `{ ${props.join("; ")} }`;
                }
                if (schema.type === "array" && schema.items) {
                  const itemType = mapRefToType(
                    schema.items as OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject,
                    modelImports,
                    spec,
                    depth + 1,
                    availableModels,
                    missingTypes
                  );
                  return `${itemType}[]`;
                }
                return mapOpenApiTypeToTs(schema.type);
              }
              return "any";
            }


            interface
            PropertyDetail
            {
              name: string;
              type: string;
              required: boolean;
              jsdoc?: string;
            }


            function
            parseInterfaceProperties(
              modelName: string,
              modelsDir: string
            ):
            PropertyDetail[]
            {
              const project = new Project();
              const filePath = join(modelsDir, `${modelName}.ts`);
              if (!existsSync(filePath)) return [];
              const sourceFile = project.addSourceFileAtPath(filePath);
              const interfaceDec = sourceFile.getInterface(modelName);
              if (!interfaceDec) return [];
              return interfaceDec.getProperties().map((prop) => ({
                name: prop.getName(),
                type: prop.getType().getText(prop),
                required: !prop.hasQuestionToken(),
                jsdoc: prop.getJsDocs()[0]?.getDescription().trim(),
              }));
            }


            interface
            ParamDetail
            {
              name: string;
              type: string;
              required: boolean;
              properties: PropertyDetail[];
            }


            function
            generateInterface(includeResponseProperties:
            boolean
            =
            false):
            void
            {
              if (!existsSync(SPEC_FILE)) {
                console.error(
                  `Spec file ${SPEC_FILE} not found. Run 'npm run fix-spec' first.`
                );
                process.exit(1);
              }
              const spec: OpenAPIV2.Document = JSON.parse(readFileSync(SPEC_FILE, "utf8"));
              const availableModels = readdirSync(MODELS_DIR)
                .filter((f) => f.endsWith(".ts") && !f.startsWith("index"))
                .map((f) => f.replace(".ts", ""));
              const modelImports = new Set<string>();
              const missingTypes = new Set<string>();
              const methods: string[] = [];

              for (const [path, methodsObj] of Object.entries(
                spec.paths as OpenAPIV2.PathsObject
              )) {
                if (!methodsObj) continue;
                for (const [method, operation] of Object.entries(
                  methodsObj as OpenAPIV2.PathItemObject
                )) {
                  const op = operation as OpenAPIV2.OperationObject | undefined;
                  if (!op || !op.operationId) continue;

                  const opId = simplifyName(op.operationId);
                  const paramDetails: ParamDetail[] = (op.parameters || [])
                    .filter(
                      (p) =>
                        !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                          (p as OpenAPIV2.ParameterObject).name || ""
                        )
                    )
                    .map((p) => {
                      const param = p as OpenAPIV2.ParameterObject;
                      let type = "any";
                      let properties: PropertyDetail[] = [];
                      if ("schema" in p && p.schema) {
                        type = mapRefToType(
                          p.schema,
                          modelImports,
                          spec,
                          1,
                          availableModels,
                          missingTypes
                        );
                        if ("$ref" in p.schema) {
                          const model = p.schema.$ref.split("/").pop()!;
                          properties = parseInterfaceProperties(
                            model.charAt(0).toUpperCase() + model.slice(1),
                            MODELS_DIR
                          );
                        }
                      } else if ("type" in p) {
                        type = mapOpenApiTypeToTs(p.type);
                      }
                      return {
                        name: param.in === "body" ? "body" : param.name,
                        type,
                        required: param.required || false,
                        properties,
                      };
                    });

                  const params = paramDetails
                    .map((p) => `${p.name}${p.required ? "" : "?"}: ${p.type}`)
                    .join("; ");
                  const returnTypes = ["200", "207"]
                    .map(
                      (code) => (op.responses?.[code] as OpenAPIV2.ResponseObject)?.schema
                    )
                    .filter(Boolean)
                    .map((schema) =>
                      mapRefToType(
                        schema!,
                        modelImports,
                        spec,
                        1,
                        availableModels,
                        missingTypes
                      )
                    );
                  const returnType =
                    returnTypes.length > 1
                      ? returnTypes.join(" | ")
                      : returnTypes[0] || "void";
                  const returnTypeDetails =
                    includeResponseProperties &&
                    returnTypes.length === 1 &&
                    returnTypes[0] !== "void"
                      ? parseInterfaceProperties(returnTypes[0], MODELS_DIR)
                      : [];

                  const jsDoc = generateJsDoc({
                    summary: op.summary || "No description.",
                    opId,
                    paramDetails,
                    returnType,
                    returnTypeDetails,
                    docLink: `https://developer.quickbase.com/operation/${op.operationId}`,
                  });

                  methods.push(
                    `${jsDoc}\n  ${opId}: (params: { ${params} }) => Promise<${returnType}>;`
                  );
                }
              }

              const importStatement =
                modelImports.size > 0
                  ? `import { ${Array.from(modelImports)
                      .sort()
                      .join(", ")} } from "../generated/models";`
                  : "";
              const interfaceContent = `// Generated on ${new Date().toISOString()}\n${importStatement}\n\nexport interface QuickbaseClient {\n${methods.join(
                "\n"
              )}\n}\n`;
              if (!existsSync(OUTPUT_DIR)) mkdirSync(OUTPUT_DIR, { recursive: true });
              writeFileSync(OUTPUT_FILE, interfaceContent, "utf8");
              console.log("Generated interface:", OUTPUT_FILE);
            }


            try
            {
              generateInterface(true);
              if (!existsSync(DOCS_DATA_DIR)) mkdirSync(DOCS_DATA_DIR, { recursive: true });
              generateDocsJson(SPEC_FILE, MODELS_DIR, DOCS_JSON_FILE);
            }
            catch
            (error)
            {
              console.error("Error:", error);
              process.exit(1);
            }


            console.log("Script
            completed");
        - name: >-
            regenerate-client.ts
          type: >-
            file
        - name: >-
            schema
          type: >-
            directory
          children:
            - name: >-
                enhance-general.ts
              type: >-
                file
            - name: >-
                fix-arrays.ts
              type: >-
                file
            - name: >-
                tags
              type: >-
                directory
              children:
                - name: >-
                    apps.ts
                  type: >-
                    file
                - name: >-
                    fields.ts
                  type: >-
                    file
                - name: >-
                    groups.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records.ts
                  type: >-
                    file
                - name: >-
                    tables.ts
                  type: >-
                    file
                - name: >-
                    users.ts
                  type: >-
                    file
        - name: >-
            types
          type: >-
            directory
          children:
            - name: >-
                spec.ts
              type: >-
                file
        - name: >-
            utils
          type: >-
            directory
          children:
            - name: >-
                generateDocsJson.ts
              type: >-
                file
              contents: >
                //
                open-api/utils/generateDocsJson.ts

                import
                {
                readFileSync,
                writeFileSync,
                readdirSync
                }
                from
                "fs";

                import
                {
                OpenAPIV2
                }
                from
                "openapi-types";


                function
                mapOpenApiTypeToTs(
                  openApiType: string | string[] | undefined
                ):
                string
                {
                  const type = Array.isArray(openApiType)
                    ? openApiType[0]
                    : openApiType || "any";
                  switch (type.toLowerCase()) {
                    case "integer":
                    case "int":
                    case "number":
                      return "number";
                    case "string":
                      return "string";
                    case "boolean":
                      return "boolean";
                    default:
                      return "any";
                  }
                }


                function
                mapRefToType(
                  schema: OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject | undefined,
                  modelImports: Set<string>,
                  spec: OpenAPIV2.Document,
                  depth: number = 0,
                  availableModels: string[],
                  missingTypes: Set<string>
                ):
                string
                {
                  if (!schema) return "any";
                  if ("$ref" in schema && schema.$ref) {
                    const refParts = schema.$ref.split("/");
                    const model = refParts[refParts.length - 1];
                    const pascalModel = model.charAt(0).toUpperCase() + model.slice(1);
                    if (availableModels.includes(pascalModel)) {
                      modelImports.add(pascalModel);
                      return pascalModel;
                    }
                    missingTypes.add(pascalModel);
                    return "any";
                  }
                  if ("type" in schema) {
                    if (schema.type === "object" && schema.properties) {
                      const props = Object.entries(schema.properties).map(([key, prop]) => {
                        const propSchema = prop as OpenAPIV2.SchemaObject;
                        const propType = mapRefToType(
                          propSchema,
                          modelImports,
                          spec,
                          depth + 1,
                          availableModels,
                          missingTypes
                        );
                        return `${key}${propSchema.required ? "" : "?"}: ${propType}`;
                      });
                      return `{ ${props.join("; ")} }`;
                    }
                    if (schema.type === "array" && schema.items) {
                      const itemType = mapRefToType(
                        schema.items as OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject,
                        modelImports,
                        spec,
                        depth + 1,
                        availableModels,
                        missingTypes
                      );
                      return `${itemType}[]`;
                    }
                    return mapOpenApiTypeToTs(schema.type);
                  }
                  return "any";
                }


                export
                function
                generateDocsJson(
                  specFile: string,
                  modelsDir: string,
                  outputFile: string
                ):
                void
                {
                  const spec: OpenAPIV2.Document = JSON.parse(readFileSync(specFile, "utf8"));
                  const availableModels: string[] = readdirSync(modelsDir)
                    .filter((f) => f.endsWith(".ts") && !f.startsWith("index"))
                    .map((f) => f.replace(".ts", ""));
                  const modelImports = new Set<string>();
                  const missingTypes = new Set<string>();
                  const docsData: any[] = [];

                  for (const [path, methodsObj] of Object.entries(
                    spec.paths as OpenAPIV2.PathsObject
                  )) {
                    if (!methodsObj) continue;
                    for (const [method, operation] of Object.entries(
                      methodsObj as OpenAPIV2.PathItemObject
                    )) {
                      const op = operation as OpenAPIV2.OperationObject | undefined;
                      if (!op || !op.operationId) continue;

                      const opId = op.operationId; // Using raw operationId since simplifyName is minimal
                      const paramDetails = (op.parameters || [])
                        .filter(
                          (p) =>
                            !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                              (p as OpenAPIV2.ParameterObject).name || ""
                            )
                        )
                        .map((p) => {
                          const param = p as OpenAPIV2.ParameterObject;
                          let type = "any";
                          if ("schema" in p && p.schema)
                            type = mapRefToType(
                              p.schema,
                              modelImports,
                              spec,
                              1,
                              availableModels,
                              missingTypes
                            );
                          else if ("type" in p) type = mapOpenApiTypeToTs(p.type);
                          return {
                            name: param.in === "body" ? "body" : param.name,
                            type,
                            required: param.required || false,
                            description: param.description || "",
                          };
                        });

                      const returnTypes = ["200", "207"]
                        .map(
                          (code) => (op.responses?.[code] as OpenAPIV2.ResponseObject)?.schema
                        )
                        .filter(Boolean)
                        .map((schema) =>
                          mapRefToType(
                            schema!,
                            modelImports,
                            spec,
                            1,
                            availableModels,
                            missingTypes
                          )
                        );
                      const returnType =
                        returnTypes.length > 1
                          ? returnTypes.join(" | ")
                          : returnTypes[0] || "void";

                      docsData.push({
                        name: opId,
                        summary: op.summary || "No description.",
                        method: method.toUpperCase(),
                        path,
                        parameters: paramDetails,
                        returns: returnType,
                        docLink: `https://developer.quickbase.com/operation/${op.operationId}`,
                      });
                    }
                  }

                  writeFileSync(outputFile, JSON.stringify(docsData, null, 2), "utf8");
                  console.log("Generated docs JSON:", outputFile);
                }
            - name: >-
                generateJsDoc.ts.bak
              type: >-
                file
            - name: >-
                infer-schema.ts
              type: >-
                file
            - name: >-
                naming.ts
              type: >-
                file
    - name: >-
        openapitools.json
      type: >-
        file
    - name: >-
        package-lock.json
      type: >-
        file
    - name: >-
        package.json
      type: >-
        file
      contents: >
        {
          "name": "quickbase-js",
          "version": "0.1.0-beta.9",
          "description": "QuickBase JavaScript client for frameworks and vanilla JS",
          "type": "module",
          "main": "dist/esm/quickbase.js",
          "module": "dist/esm/quickbase.js",
          "types": "dist/esm/quickbase.d.ts",
          "publishConfig": {
            "access": "public"
          },
          "exports": {
            ".": {
              "types": "./dist/esm/quickbase.d.ts",
              "import": {
                "minified": "./dist/esm/quickbase.min.js",
                "default": "./dist/esm/quickbase.js"
              },
              "require": {
                "minified": "./dist/umd/quickbase.umd.min.js",
                "default": "./dist/umd/quickbase.umd.js"
              },
              "umd:types": "./dist/umd/quickbase.umd.d.ts"
            }
          },
          "scripts": {
            "build": "npm run build:esm && npm run build:umd",
            "build:esm": "rimraf dist/esm dist/temp dist/temp-src && node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' build-esm.js",
            "build:umd": "rimraf dist/umd dist/temp dist/temp-src && node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' build-umd.js",
            "release": "standard-version",
            "release:beta": "standard-version --prerelease beta",
            "release:alpha": "standard-version --prerelease alpha",
            "release:push": "npm run release:beta && git push --follow-tags origin main",
            "release:publish": "npm run release:push && npm publish --tag beta",
            "release:stable": "standard-version && git push --follow-tags origin main && npm publish",
            "fix-spec": "node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' open-api/fix-spec-main.ts",
            "gen:openapi": "rimraf src/generated && node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' open-api/regenerate-client.ts",
            "gen:unified": "node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' open-api/generate-unified-interface.ts",
            "gen:docs": "node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' tools/generate-docusaurus.ts",
            "gen:all": "npm run fix-spec && npm run gen:openapi && npm run gen:unified && npm run gen:docs",
            "log-gen": "node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' tools/log-gen.ts",
            "test:all": "vitest run tests/vitest/**/**/*.test.ts --reporter=basic && playwright test tests/playwright/qb --config playwright.config.ts --reporter=dot --quiet",
            "test:pw:qb:all": "playwright test tests/playwright/qb --config playwright.config.ts",
            "test:vitest:all": "vitest run tests/vitest/**/**/*.test.ts",
            "test:vitest:qb": "vitest run tests/vitest/qb/**/*.test.ts",
            "test:vitest:unit": "vitest run tests/vitest/unit/**/*.test.ts",
            "test:vitest:qb:apps": "vitest run tests/vitest/qb/apps/*.test.ts",
            "test:vitest:qb:auth": "vitest run tests/vitest/qb/auth/*.test.ts",
            "test:vitest:qb:fields": "vitest run tests/vitest/qb/fields/*.test.ts",
            "test:vitest:qb:records": "vitest run tests/vitest/qb/records/*.test.ts",
            "test:vitest:qb:tables": "vitest run tests/vitest/qb/tables/*.test.ts",
            "test:vitest:unit:apps": "vitest run tests/vitest/unit/apps/*.test.ts",
            "test:vitest:unit:auth": "vitest run tests/vitest/unit/auth/*.test.ts",
            "test:vitest:unit:fields": "vitest run tests/vitest/unit/fields/*.test.ts",
            "test:vitest:unit:formulas": "vitest run tests/vitest/unit/formulas/*.test.ts",
            "test:vitest:unit:records": "vitest run tests/vitest/unit/records/*.test.ts",
            "test:vitest:unit:tables": "vitest run tests/vitest/unit/tables/*.test.ts",
            "test:pw:qb:auth": "playwright test tests/playwright/qb/auth"
          },
          "devDependencies": {
            "@openapitools/openapi-generator-cli": "^2.18.4",
            "@playwright/test": "^1.51.0",
            "@rollup/plugin-commonjs": "^28.0.3",
            "@rollup/plugin-node-resolve": "^16.0.1",
            "@rollup/plugin-terser": "^0.4.4",
            "@rollup/plugin-typescript": "^12.1.2",
            "@types/fast-json-patch": "^1.0.4",
            "@types/js-yaml": "^4.0.9",
            "@types/node": "^22.13.10",
            "dotenv": "^16.4.7",
            "express": "^4.21.2",
            "fast-json-patch": "^3.1.1",
            "glob": "^10.4.5",
            "js-yaml": "^4.1.0",
            "jsdom": "^26.0.0",
            "node-fetch": "^3.3.2",
            "openapi-schema-validator": "^12.1.3",
            "openapi-types": "^12.1.3",
            "openapi-typescript": "^7.6.1",
            "rimraf": "^5.0.10",
            "rollup": "^4.35.0",
            "rollup-plugin-dts": "^6.1.1",
            "standard-version": "^9.5.0",
            "ts-morph": "^25.0.1",
            "ts-node": "^10.9.2",
            "tslib": "^2.8.1",
            "typescript": "^5.8.2",
            "undici-types": "^7.5.0",
            "vitest": "^3.0.8"
          }
        }
    - name: >-
        playwright.config.ts
      type: >-
        file
    - name: >-
        rollup.config.js
      type: >-
        file
    - name: >-
        src
      type: >-
        directory
      children:
        - name: >-
            RateLimitError.ts
          type: >-
            file
        - name: >-
            ThrottleBucket.ts
          type: >-
            file
        - name: >-
            authorizationStrategy.ts
          type: >-
            file
        - name: >-
            generated
          type: >-
            directory
          children:
            - name: >-
                .openapi-generator
              type: >-
                directory
              children:
                - name: >-
                    FILES
                  type: >-
                    file
                - name: >-
                    VERSION
                  type: >-
                    file
            - name: >-
                .openapi-generator-ignore
              type: >-
                file
            - name: >-
                apis
              type: >-
                directory
              children:
                - name: >-
                    AppsApi.ts
                  type: >-
                    file
                - name: >-
                    AuditApi.ts
                  type: >-
                    file
                - name: >-
                    AuthApi.ts
                  type: >-
                    file
                - name: >-
                    DocumentTemplatesApi.ts
                  type: >-
                    file
                - name: >-
                    FieldsApi.ts
                  type: >-
                    file
                - name: >-
                    FilesApi.ts
                  type: >-
                    file
                - name: >-
                    FormulasApi.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticsApi.ts
                  type: >-
                    file
                - name: >-
                    RecordsApi.ts
                  type: >-
                    file
                - name: >-
                    ReportsApi.ts
                  type: >-
                    file
                - name: >-
                    SolutionsApi.ts
                  type: >-
                    file
                - name: >-
                    TablesApi.ts
                  type: >-
                    file
                - name: >-
                    UserTokenApi.ts
                  type: >-
                    file
                - name: >-
                    UsersApi.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                models
              type: >-
                directory
              children:
                - name: >-
                    AddManagersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddManagersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    Audit200Response.ts
                  type: >-
                    file
                - name: >-
                    Audit202Response.ts
                  type: >-
                    file
                - name: >-
                    AuditRequest.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInnerChangesInnerInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CloneUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    CloneUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateField200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInnerAppsInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    DeactivateUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteApp200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteAppRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFields200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteFieldsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFile200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecords200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecordsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteTable200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroups200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroupsRequest.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    DownloadFile200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoToken200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    GenerateDocument200Response.ts
                  type: >-
                    file
                - name: >-
                    GetApp200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppEvents200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppTables200Response.ts
                  type: >-
                    file
                - name: >-
                    GetField200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFields200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldsUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetRelationships200Response.ts
                  type: >-
                    file
                - name: >-
                    GetReport200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTable200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTableReports200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTempTokenDBID200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    Permission.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200Response.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequest.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticReads200Response.ts
                  type: >-
                    file
                - name: >-
                    Record.ts
                  type: >-
                    file
                - name: >-
                    RecordValue.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RunFormula200Response.ts
                  type: >-
                    file
                - name: >-
                    RunFormulaRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQuery200Response.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestGroupByInner.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestOptions.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestSortByInner.ts
                  type: >-
                    file
                - name: >-
                    RunReport200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateField200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    Upsert200Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert207Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert400Response.ts
                  type: >-
                    file
                - name: >-
                    UpsertRequest.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                runtime.ts
              type: >-
                file
        - name: >-
            generated-unified
          type: >-
            directory
          children:
            - name: >-
                QuickbaseClient.ts
              type: >-
                file
            - name: >-
                missing-types-report.json
              type: >-
                file
        - name: >-
            index.ts
          type: >-
            file
        - name: >-
            invokeMethod.ts
          type: >-
            file
        - name: >-
            quickbaseClient.ts
          type: >-
            file
        - name: >-
            rateLimiter.ts
          type: >-
            file
        - name: >-
            tokenCache.ts
          type: >-
            file
        - name: >-
            utils.ts
          type: >-
            file
    - name: >-
        test-artifacts
      type: >-
        directory
      children:
        - name: >-
            .last-run.json
          type: >-
            file
    - name: >-
        test-esm.js
      type: >-
        file
    - name: >-
        test-results.json
      type: >-
        file
    - name: >-
        test-umd.js
      type: >-
        file
    - name: >-
        test.log
      type: >-
        file
    - name: >-
        test.ts
      type: >-
        file
    - name: >-
        tests
      type: >-
        directory
      children:
        - name: >-
            playwright
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        cacheSwitching.test.ts
                      type: >-
                        file
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithUserToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        tempTokenPrefetch.test.ts
                      type: >-
                        file
                    - name: >-
                        tempTokenRenewal.test.ts
                      type: >-
                        file
        - name: >-
            setup.ts
          type: >-
            file
        - name: >-
            vitest
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        mockQuickbaseServer.ts
                      type: >-
                        file
                    - name: >-
                        retryUserToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        ssoTokenIntegrationWithServer.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    formulas
                  type: >-
                    directory
                  children:
                    - name: >-
                        runFormula.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
            - name: >-
                unit
              type: >-
                directory
              children:
                - name: >-
                    ThrottleBucket.test.ts
                  type: >-
                    file
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        retryTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        retryTempTokenMaxRetries.test.ts
                      type: >-
                        file
                    - name: >-
                        retryUserToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        ssoTokenRefresh.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    formulas
                  type: >-
                    directory
                  children:
                    - name: >-
                        runFormula.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    inferHttpMethod.test.ts
                  type: >-
                    file
                - name: >-
                    rateLimit.test.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateRelationship.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
                - name: >-
                    tokenLifespan.test.ts
                  type: >-
                    file
                - name: >-
                    umd.test.ts
                  type: >-
                    file
    - name: >-
        text.txt
      type: >-
        file
    - name: >-
        tools
      type: >-
        directory
      children:
        - name: >-
            generate-docusaurus.ts
          type: >-
            file
          contents: >
            #!/usr/bin/env
            node

            console.log("Docusaurus
            generation
            script
            started");


            import
            {
            execSync
            }
            from
            "child_process";

            import
            {
            copyFileSync,
            existsSync,
            mkdirSync,
            writeFileSync
            }
            from
            "fs";

            import
            {
            join,
            dirname
            }
            from
            "path";

            import
            {
            fileURLToPath
            }
            from
            "url";


            const
            __dirname
            =
            dirname(fileURLToPath(import.meta.url));

            const
            PROJECT_ROOT
            =
            join(__dirname,
            "..");

            const
            DOCS_DIR
            =
            join(PROJECT_ROOT,
            "quickbase-docs");

            const
            API_DOCS_JSON
            =
            join(PROJECT_ROOT,
            "docs-data",
            "api-docs.json");

            const
            DOCS_DATA_DIR
            =
            join(DOCS_DIR,
            "src",
            "data");

            const
            DOCS_API_PAGE
            =
            join(DOCS_DIR,
            "src",
            "pages",
            "api.tsx");


            function
            initializeDocusaurus()
            {
              if (!existsSync(DOCS_DIR)) {
                console.log("Initializing Docusaurus...");
                execSync(
                  `npx create-docusaurus@latest quickbase-docs classic --typescript`,
                  {
                    cwd: PROJECT_ROOT,
                    stdio: "inherit",
                  }
                );
              } else {
                console.log(
                  "Docusaurus directory already exists, skipping initialization."
                );
              }
            }


            function
            configureDocusaurus()
            {
              const configPath = join(DOCS_DIR, "docusaurus.config.js");
              const configContent = `
            module.exports
            =
            {
              title: 'Quickbase JS API Docs',
              tagline: 'Documentation for quickbase-js library',
              url: 'https://your-site.com',
              baseUrl: '/',
              onBrokenLinks: 'throw',
              onBrokenMarkdownLinks: 'warn',
              favicon: 'img/favicon.ico',
              organizationName: 'your-org',
              projectName: 'quickbase-js',
              presets: [
                [
                  'classic',
                  {
                    docs: { sidebarPath: require.resolve('./sidebars.js') },
                    theme: { customCss: require.resolve('./src/css/custom.css') },
                  },
                ],
              ],
              themeConfig: {
                navbar: {
                  title: 'Quickbase JS',
                  items: [
                    { to: '/api', label: 'API', position: 'left' },
                    { href: 'https://github.com/your-org/quickbase-js', label: 'GitHub', position: 'right' },
                  ],
                },
                footer: {
                  style: 'dark',
                  copyright: \`Copyright © ${new Date().getFullYear()} Your Org. Built with Docusaurus.\`,
                },
                prism: {
                  theme: require('prism-react-renderer/themes/github'),
                  darkTheme: require('prism-react-renderer/themes/dracula'),
                },
              },
            };
              `;
              writeFileSync(configPath, configContent.trim(), "utf8");
              console.log("Updated Docusaurus config:", configPath);
            }


            function
            copyApiDocs()
            {
              if (!existsSync(API_DOCS_JSON)) {
                console.error(
                  `API docs JSON not found at ${API_DOCS_JSON}. Run generate-interface.ts first.`
                );
                process.exit(1);
              }
              if (!existsSync(DOCS_DATA_DIR)) mkdirSync(DOCS_DATA_DIR, { recursive: true });
              const targetJsonPath = join(DOCS_DATA_DIR, "api-docs.json");
              copyFileSync(API_DOCS_JSON, targetJsonPath);
              console.log("Copied API docs JSON to:", targetJsonPath);
            }


            function
            generateApiPage()
            {
              const apiPageContent = `
            import
            React
            from
            'react';

            import
            Layout
            from
            '@theme/Layout';

            import
            apiDocs
            from
            '../data/api-docs.json';


            interface
            Method
            {
              name: string;
              summary: string;
              method: string;
              path: string;
              parameters: { name: string; type: string; required: boolean; description: string }[];
              returns: string;
              docLink: string;
            }


            const
            ApiDocs:
            React.FC
            =
            ()
            =>
            {
              return (
                <Layout title="API Documentation">
                  <main className="container margin-vert--lg">
                    <h1>QuickbaseClient API</h1>
                    {(apiDocs as Method[]).map((method) => (
                      <div key={method.name} className="card margin-bottom--md">
                        <div className="card__header">
                          <h2>{method.name}</h2>
                          <code>{method.method} {method.path}</code>
                        </div>
                        <div className="card__body">
                          <p>{method.summary}</p>
                          {method.parameters.length > 0 && (
                            <>
                              <h3>Parameters</h3>
                              <ul>
                                {method.parameters.map((param) => (
                                  <li key={param.name}>
                                    <strong>{param.name}</strong> ({param.type}, {param.required ? 'required' : 'optional'}): {param.description || 'No description'}
                                  </li>
                                ))}
                              </ul>
                            </>
                          )}
                          <h3>Returns</h3>
                          <p><code>{method.returns}</code></p>
                          <a href={method.docLink} target="_blank" rel="noopener noreferrer">Official Docs</a>
                        </div>
                      </div>
                    ))}
                  </main>
                </Layout>
              );
            };


            export
            default
            ApiDocs;
              `;
              if (!existsSync(dirname(DOCS_API_PAGE)))
                mkdirSync(dirname(DOCS_API_PAGE), { recursive: true });
              writeFileSync(DOCS_API_PAGE, apiPageContent.trim(), "utf8");
              console.log("Generated API page:", DOCS_API_PAGE);
            }


            function
            runDocusaurus()
            {
              console.log("Starting Docusaurus...");
              execSync("npm run start", { cwd: DOCS_DIR, stdio: "inherit" });
            }


            try
            {
              initializeDocusaurus();
              configureDocusaurus();
              copyApiDocs();
              generateApiPage();
              runDocusaurus();
            }
            catch
            (error)
            {
              console.error("Error in Docusaurus generation:", error);
              process.exit(1);
            }


            console.log("Docusaurus
            generation
            script
            completed");
        - name: >-
            log-gen.ts
          type: >-
            file
        - name: >-
            openapi-jars
          type: >-
            directory
          children:
            - name: >-
                openapi-generator-cli-7.12.0.jar
              type: >-
                file
    - name: >-
        tsconfig.build.json
      type: >-
        file
    - name: >-
        tsconfig.json
      type: >-
        file
    - name: >-
        versionrc.json
      type: >-
        file
    - name: >-
        vitest.config.ts
      type: >-
        file
