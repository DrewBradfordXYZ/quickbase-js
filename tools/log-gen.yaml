project: >-
  quickbase-js
date: >-
  3/17/2025
root: >-
  /home/drew/Projects/quickbase-js
goals:
  - >-
    A
    library
    for
    interacting
    with
    the
    QuickBase
    RESTful
    API.
  - >-
    Use
    OpenAPI
    to
    generate
    types
    and
    methods
    using
    a
    proxy.
    Validate
    with
    tests.
  - >-
    Provide
    robust
    and
    intuitive
    temporary
    token
    support
    for
    browser
    environments.
  - >-
    User
    Tokens
    support
    both
    Node.js
    and
    browser
    environments.
  - >-
    Use
    case:
    JS
    frameworks
    like
    React,
    Vue,
    and
    Angular
    hosted
    in
    QuickBase
    code
    pages.
  - >-
    Enable
    a
    flexible
    or
    native
    fetch
    in
    the
    browser.
  - >-
    Enable
    a
    flexible
    fetch
    framework
    in
    Node.js.
  - >-
    #
  - >-
    No
    manual
    updating
    methods
    when
    the
    QuickBase
    API
    changes.
  - >-
    The
    proxy
    magic
    dynamically
    maps
    generated
    methods
    and
    types.
  - >-
    #
  - >-
    TokenCache
    is
    defined
    per
    quickbaseClient
    call,
    so
    each
    instance
    has
    its
    own
    isolated
    TokenCache.
  - >-
    Each
    quickbase
    client
    instance
    has
    an
    isolated
    and
    individual
    token
    cache.
pipelineOverview:
  - >-
    What
    I’m
    Trying
    to
    Do
  - >-
    My
    approach
    is
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById
    so
    QuickbaseClient.ts
    can
    map
    it
    to
    client.getApp.
    Steps
    include:
  - >-
    Fix
    fix-spec.ts:
  - >-
    Add
    tags:
    ["Apps"]
    to
    /apps/*
    endpoints
    to
    group
    them
    into
    AppsApi.ts.
  - >-
    Ensure
    all
    endpoints
    and
    models
    are
    correctly
    defined
    and
    typed.
  - >-
    Debug
    regenerate-client.ts:
  - >-
    Enhance
    logging
    to
    catch
    why
    AppsApi.ts
    isn’t
    generated.
  - >-
    Test
    if
    getAppById
    appears
    in
    another
    file
    (e.g.,
    DefaultApi.ts).
  - >-
    Update
    QuickbaseClient.ts:
  - >-
    Adjust
    imports
    to
    use
    the
    correct
    API
    class
    once
    generated.
  - >-
    Test
    and
    Iterate:
  - >-
    Run
    npm
    run
    fix-spec,
    npm
    run
    regenerate,
    and
    npm
    run
    test
    to
    verify
    AppsApi.ts
    exists
    and
    test.ts
    works.
  - >-
    The
    latest
    fix-spec.ts
    with
    tags
    aims
    to
    force
    the
    generator
    to
    create
    AppsApi.ts,
    addressing
    the
    missing
    file
    issue.
  - >-
    Relevant
    Project
    Files
  - >-
    Here’s
    a
    list
    of
    files
    that
    would
    help
    understand
    and
    resolve
    this
    problem,
    along
    with
    their
    roles:
  - >-
    src/code-generation/fix-spec.ts:
  - >-
    Role:
    Modifies
    the
    original
    QuickBase
    spec
    (e.g.,
    QuickBase_RESTful_*.json)
    to
    create
    quickbase-fixed.json
    with
    required
    endpoints
    (e.g.,
    /apps/{appId}).
  - >-
    Relevance:
    Defines
    the
    spec
    fed
    to
    the
    generator;
    errors
    here
    affect
    generation.
  - >-
    src/code-generation/quickbase-fixed.json:
  - >-
    Role:
    The
    processed
    OpenAPI
    spec
    used
    by
    regenerate-client.ts
    to
    generate
    code.
  - >-
    Relevance:
    Confirms
    if
    /apps/{appId}
    is
    correctly
    structured
    with
    operationId:
    "getAppById".
  - >-
    src/code-generation/regenerate-client.ts:
  - >-
    Role:
    Runs
    OpenAPI
    Generator
    to
    produce
    src/generated/
    files
    (APIs
    and
    models)
    and
    fixes
    .ts
    extensions
    with
    ts-morph.
  - >-
    Relevance:
    Controls
    the
    generation
    process;
    logs
    reveal
    why
    AppsApi.ts
    is
    missing.
  - >-
    src/generated/apis/AppsApi.ts
    (if
    exists):
  - >-
    Role:
    Should
    contain
    getAppById
    method
    for
    /apps/{appId}
    GET.
  - >-
    Relevance:
    Missing
    file
    is
    the
    core
    issue;
    its
    absence
    breaks
    QuickbaseClient.ts.
  - >-
    src/generated/apis/DefaultApi.ts:
  - >-
    Role:
    Default
    API
    class
    for
    untagged
    operations.
  - >-
    Relevance:
    Might
    contain
    getAppById
    if
    tags
    are
    misconfigured.
  - >-
    src/QuickbaseClient.ts:
  - >-
    Role:
    Wraps
    generated
    API
    classes
    (e.g.,
    AppsApi)
    in
    a
    Proxy
    for
    ergonomic
    calls
    (e.g.,
    client.getApp).
  - >-
    Relevance:
    Fails
    to
    import
    AppsApi.ts,
    causing
    the
    runtime
    error.
  - >-
    src/test.ts:
  - >-
    Role:
    Test
    script
    calling
    client.getApp({
    appId
    }).
  - >-
    Relevance:
    Final
    validation
    point;
    shows
    if
    the
    fix
    works.
  - >-
    .env.development:
  - >-
    Role:
    Stores
    QB_REALM,
    QB_USER_TOKEN,
    QB_APP_ID
    for
    API
    authentication.
  - >-
    Relevance:
    Ensures
    the
    API
    call
    has
    valid
    credentials
    (not
    the
    current
    issue,
    but
    critical
    for
    success).
  - >-
    src/specs/QuickBase_RESTful_API_2025-03-04T06_22_39.725Z.json
    (or
    similar):
  - >-
    Role:
    Original
    QuickBase
    API
    spec
    before
    fix-spec.ts
    processing.
  - >-
    Relevance:
    Shows
    how
    /apps/{appId}
    was
    originally
    defined,
    helping
    identify
    conflicts.
  - >-
    package.json:
  - >-
    Role:
    Defines
    scripts
    (fix-spec,
    regenerate,
    test)
    and
    dependencies
    (e.g.,
    ts-node,
    openapi-generator-cli).
  - >-
    Relevance:
    Confirms
    script
    commands
    and
    versions
    align
    with
    our
    process.
  - >-
    What
    We
    Achieved
  - >-
    Goal
    Met:
    You
    can
    now
    call
    client.getApp({
    appId:
    "buwai2zpe"
    })
    and
    get
    the
    app
    details
    {
    id:
    'buwai2zpe',
    name:
    'qb-copy'
    }.
  - >-
    Fixes
    Applied:
  - >-
    Added
    tags:
    ["Apps"]
    in
    fix-spec.ts
    to
    ensure
    AppsApi.ts
    is
    generated
    with
    getAppById.
  - >-
    Updated
    QuickbaseClient.ts
    to:
  - >-
    Use
    prototype
    methods
    via
    Object.getOwnPropertyNames.
  - >-
    Bind
    methods
    to
    preserve
    context
    with
    .bind(api).
  - >-
    Handle
    getAppById’s
    direct
    JSON
    return
    instead
    of
    a
    Response
    object.
  - >-
    Result:
    The
    ergonomic
    API
    you
    wanted
    (client.getApp)
    works
    seamlessly
    with
    the
    generated
    AppsApi.ts.
  - >-
    Why
    It
    Works
    Now
  - >-
    fix-spec.ts:
  - >-
    Correctly
    defined
    /apps/{appId}
    with
    operationId:
    "getAppById"
    and
    tags:
    ["Apps"],
    ensuring
    AppsApi.ts
    generation.
  - >-
    regenerate-client.ts:
  - >-
    Successfully
    ran
    OpenAPI
    Generator
    to
    produce
    AppsApi.ts
    with
    getAppById.
  - >-
    QuickbaseClient.ts:
  - >-
    buildMethodMap
    now
    captures
    getAppById
    and
    maps
    it
    to
    getApp.
  - >-
    invokeMethod
    passes
    {
    appId:
    'buwai2zpe'
    }
    as
    requestParameters
    and
    handles
    the
    JSON
    response
    directly.
  - >-
    test.ts:
  - >-
    Calls
    client.getApp
    and
    logs
    the
    result,
    proving
    the
    end-to-end
    flow.
tree:
  name: >-
    .
  type: >-
    directory
  children:
    - name: >-
        .env
      type: >-
        file
    - name: >-
        .gitignore
      type: >-
        file
    - name: >-
        CHANGELOG.md
      type: >-
        file
    - name: >-
        LICENSE
      type: >-
        file
    - name: >-
        README.md
      type: >-
        file
    - name: >-
        build-common.js
      type: >-
        file
    - name: >-
        build-esm.js
      type: >-
        file
    - name: >-
        build-umd.js
      type: >-
        file
    - name: >-
        dist
      type: >-
        directory
      children:
        - name: >-
            esm
          type: >-
            directory
          children:
            - name: >-
                quickbase.d.ts
              type: >-
                file
            - name: >-
                quickbase.js
              type: >-
                file
            - name: >-
                quickbase.js.map
              type: >-
                file
            - name: >-
                quickbase.min.js
              type: >-
                file
            - name: >-
                quickbase.min.js.map
              type: >-
                file
        - name: >-
            umd
          type: >-
            directory
          children:
            - name: >-
                quickbase.umd.js
              type: >-
                file
            - name: >-
                quickbase.umd.js.map
              type: >-
                file
            - name: >-
                quickbase.umd.min.js
              type: >-
                file
            - name: >-
                quickbase.umd.min.js.map
              type: >-
                file
    - name: >-
        examples
      type: >-
        directory
      children:
        - name: >-
            quicbase-jsCDN.html
          type: >-
            file
        - name: >-
            react.js
          type: >-
            file
        - name: >-
            vanillajs.html
          type: >-
            file
    - name: >-
        open-api
      type: >-
        directory
      children:
        - name: >-
            fix-spec-main.ts
          type: >-
            file
        - name: >-
            generate-override-report.ts
          type: >-
            file
        - name: >-
            generate-unified-interface.ts
          type: >-
            file
        - name: >-
            regenerate-client.ts
          type: >-
            file
        - name: >-
            schema
          type: >-
            directory
          children:
            - name: >-
                enhance-general.ts
              type: >-
                file
            - name: >-
                fix-arrays.ts
              type: >-
                file
            - name: >-
                tags
              type: >-
                directory
              children:
                - name: >-
                    apps.ts
                  type: >-
                    file
                - name: >-
                    fields.ts
                  type: >-
                    file
                - name: >-
                    groups.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records.ts
                  type: >-
                    file
                - name: >-
                    tables.ts
                  type: >-
                    file
                - name: >-
                    users.ts
                  type: >-
                    file
        - name: >-
            types
          type: >-
            directory
          children:
            - name: >-
                spec.ts
              type: >-
                file
        - name: >-
            utils
          type: >-
            directory
          children:
            - name: >-
                infer-schema.ts
              type: >-
                file
            - name: >-
                naming.ts
              type: >-
                file
    - name: >-
        openapitools.json
      type: >-
        file
    - name: >-
        package-lock.json
      type: >-
        file
    - name: >-
        package.json
      type: >-
        file
    - name: >-
        playwright.config.ts
      type: >-
        file
    - name: >-
        rollup.config.js
      type: >-
        file
    - name: >-
        src
      type: >-
        directory
      children:
        - name: >-
            RateLimitError.ts
          type: >-
            file
          contents: >
            //
            src/RateLimitError.ts

            export
            class
            RateLimitError
            extends
            Error
            {
              public readonly status: number;
              public readonly retryAfter?: number;

              constructor(message: string, status: number, retryAfter?: number) {
                super(message);
                this.name = "RateLimitError";
                this.status = status;
                this.retryAfter = retryAfter; // Seconds from Retry-After header, if present
              }
            }
        - name: >-
            TokenBucket.ts
          type: >-
            file
          contents: >
            //
            src/TokenBucket.ts

            export
            class
            TokenBucket
            {
              private tokens: number;
              private maxTokens: number;
              private refillRate: number; // Tokens per second
              private lastRefill: number;

              constructor(rate: number, burst: number) {
                this.tokens = burst; // Start with full burst capacity
                this.maxTokens = burst;
                this.refillRate = rate;
                this.lastRefill = Date.now();
              }

              // Refill tokens based on elapsed time
              private refill(): void {
                const now = Date.now();
                const elapsed = (now - this.lastRefill) / 1000; // Seconds elapsed
                const newTokens = elapsed * this.refillRate;
                this.tokens = Math.min(this.maxTokens, this.tokens + newTokens);
                this.lastRefill = now;
              }

              // Acquire a token, waiting if necessary
              async acquire(): Promise<void> {
                this.refill();
                if (this.tokens >= 1) {
                  this.tokens -= 1;
                  return;
                }
                const waitTime = ((1 - this.tokens) / this.refillRate) * 1000; // ms until next token
                await new Promise((resolve) => setTimeout(resolve, waitTime));
                this.refill();
                this.tokens -= 1;
              }
            }
        - name: >-
            generated
          type: >-
            directory
          children:
            - name: >-
                .openapi-generator
              type: >-
                directory
              children:
                - name: >-
                    FILES
                  type: >-
                    file
                - name: >-
                    VERSION
                  type: >-
                    file
            - name: >-
                .openapi-generator-ignore
              type: >-
                file
            - name: >-
                apis
              type: >-
                directory
              children:
                - name: >-
                    AppsApi.ts
                  type: >-
                    file
                - name: >-
                    AuditApi.ts
                  type: >-
                    file
                - name: >-
                    AuthApi.ts
                  type: >-
                    file
                - name: >-
                    DocumentTemplatesApi.ts
                  type: >-
                    file
                - name: >-
                    FieldsApi.ts
                  type: >-
                    file
                - name: >-
                    FilesApi.ts
                  type: >-
                    file
                - name: >-
                    FormulasApi.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticsApi.ts
                  type: >-
                    file
                - name: >-
                    RecordsApi.ts
                  type: >-
                    file
                - name: >-
                    ReportsApi.ts
                  type: >-
                    file
                - name: >-
                    SolutionsApi.ts
                  type: >-
                    file
                - name: >-
                    TablesApi.ts
                  type: >-
                    file
                - name: >-
                    UserTokenApi.ts
                  type: >-
                    file
                - name: >-
                    UsersApi.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                index.ts
              type: >-
                file
            - name: >-
                models
              type: >-
                directory
              children:
                - name: >-
                    AddManagersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddManagersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddMembersToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    AddSubgroupsToGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    Audit200Response.ts
                  type: >-
                    file
                - name: >-
                    Audit202Response.ts
                  type: >-
                    file
                - name: >-
                    AuditRequest.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution200ResponseInnerChangesInnerInner.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ChangesetSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CloneUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    CloneUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CopyAppRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateField200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateFieldRequestProperties.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord200ResponseInnerCreatedResourcesInnerAppsInner.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    CreateSolutionFromRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    CreateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    CreateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    DeactivateUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteApp200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteAppRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFields200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteFieldsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteFile200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecords200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteRecordsRequest.ts
                  type: >-
                    file
                - name: >-
                    DeleteRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteTable200Response.ts
                  type: >-
                    file
                - name: >-
                    DeleteUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroups200Response.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersAndGroupsRequest.ts
                  type: >-
                    file
                - name: >-
                    DenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    DownloadFile200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoToken200Response.ts
                  type: >-
                    file
                - name: >-
                    ExchangeSsoTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    ExportSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    GenerateDocument200Response.ts
                  type: >-
                    file
                - name: >-
                    GetApp200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppEvents200Response.ts
                  type: >-
                    file
                - name: >-
                    GetAppTables200Response.ts
                  type: >-
                    file
                - name: >-
                    GetField200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFields200Response.ts
                  type: >-
                    file
                - name: >-
                    GetFieldsUsage200Response.ts
                  type: >-
                    file
                - name: >-
                    GetRelationships200Response.ts
                  type: >-
                    file
                - name: >-
                    GetReport200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTable200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTableReports200Response.ts
                  type: >-
                    file
                - name: >-
                    GetTempTokenDBID200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    GetUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    Permission.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200Response.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequest.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: >-
                    file
                - name: >-
                    PlatformAnalyticReads200Response.ts
                  type: >-
                    file
                - name: >-
                    Record.ts
                  type: >-
                    file
                - name: >-
                    RecordValue.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveManagersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveMembersFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroup200Response.ts
                  type: >-
                    file
                - name: >-
                    RemoveSubgroupsFromGroupRequest.ts
                  type: >-
                    file
                - name: >-
                    RunFormula200Response.ts
                  type: >-
                    file
                - name: >-
                    RunFormulaRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQuery200Response.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequest.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestGroupByInner.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestOptions.ts
                  type: >-
                    file
                - name: >-
                    RunQueryRequestSortByInner.ts
                  type: >-
                    file
                - name: >-
                    RunReport200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserToken200Response.ts
                  type: >-
                    file
                - name: >-
                    TransferUserTokenRequest.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsers200Response.ts
                  type: >-
                    file
                - name: >-
                    UndenyUsersRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateApp200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateAppRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateField200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateFieldRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationship200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateRelationshipRequest.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution200ResponseInnerCreatedResourcesInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolution4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord200ResponseInner.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord400Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord401403Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord404Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateSolutionToRecord4xx5xxResponse.ts
                  type: >-
                    file
                - name: >-
                    UpdateTable200Response.ts
                  type: >-
                    file
                - name: >-
                    UpdateTableRequest.ts
                  type: >-
                    file
                - name: >-
                    Upsert200Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert207Response.ts
                  type: >-
                    file
                - name: >-
                    Upsert400Response.ts
                  type: >-
                    file
                - name: >-
                    UpsertRequest.ts
                  type: >-
                    file
                - name: >-
                    index.ts
                  type: >-
                    file
            - name: >-
                runtime.ts
              type: >-
                file
        - name: >-
            generated-unified
          type: >-
            directory
          children:
            - name: >-
                QuickbaseClient.ts
              type: >-
                file
              contents: >
                //
                Generated
                on
                2025-03-17T19:09:44.493Z

                import
                {
                AddManagersToGroup200Response,
                AddManagersToGroupRequest,
                AddMembersToGroup200Response,
                AddMembersToGroupRequest,
                AddSubgroupsToGroup200Response,
                AddSubgroupsToGroupRequest,
                Audit200Response,
                ChangesetSolution200Response,
                ChangesetSolutionFromRecord200Response,
                CloneUserToken200Response,
                CopyApp200Response,
                CopyAppRequest,
                CreateApp200Response,
                CreateAppRequest,
                CreateField200Response,
                CreateFieldRequest,
                CreateRelationship200Response,
                CreateRelationshipRequest,
                CreateSolution200Response,
                CreateSolutionFromRecord200Response,
                CreateTable200Response,
                CreateTableRequest,
                DeactivateUserToken200Response,
                DeleteApp200Response,
                DeleteAppRequest,
                DeleteFields200Response,
                DeleteFieldsRequest,
                DeleteFile200Response,
                DeleteRecords200Response,
                DeleteRecordsRequest,
                DeleteRelationship200Response,
                DeleteTable200Response,
                DeleteUserToken200Response,
                DenyUsers200Response,
                DenyUsersAndGroups200Response,
                DenyUsersAndGroupsRequest,
                DenyUsersRequest,
                DownloadFile200Response,
                ExchangeSsoToken200Response,
                ExportSolution200Response,
                ExportSolutionToRecord200Response,
                GenerateDocument200Response,
                GetApp200Response,
                GetAppEvents200Response,
                GetAppTables200Response,
                GetField200Response,
                GetFieldUsage200Response,
                GetFields200Response,
                GetFieldsUsage200Response,
                GetRelationships200Response,
                GetReport200Response,
                GetTable200Response,
                GetTableReports200Response,
                GetTempTokenDBID200Response,
                GetUsers200Response,
                GetUsersRequest,
                PlatformAnalyticEventSummaries200Response,
                PlatformAnalyticReads200Response,
                RemoveManagersFromGroup200Response,
                RemoveManagersFromGroupRequest,
                RemoveMembersFromGroup200Response,
                RemoveMembersFromGroupRequest,
                RemoveSubgroupsFromGroup200Response,
                RemoveSubgroupsFromGroupRequest,
                RunFormula200Response,
                RunQuery200Response,
                RunQueryRequest,
                RunReport200Response,
                TransferUserToken200Response,
                UndenyUsers200Response,
                UndenyUsersRequest,
                UpdateApp200Response,
                UpdateAppRequest,
                UpdateField200Response,
                UpdateFieldRequest,
                UpdateRelationship200Response,
                UpdateRelationshipRequest,
                UpdateSolution200Response,
                UpdateSolutionToRecord200Response,
                UpdateTable200Response,
                UpdateTableRequest,
                Upsert200Response,
                Upsert207Response,
                UpsertRequest
                }
                from
                "../generated/models";


                export
                interface
                QuickbaseClient
                {
                  /**
                   * Create an app
                   * @param params - Parameters for createApp
                   * @returns Promise resolving to createApp response
                   */
                  createApp: (params: { body?: CreateAppRequest }) => Promise<CreateApp200Response>;
                  /**
                   * Get an app
                   * @param params - Parameters for getApp
                   * @returns Promise resolving to getApp response
                   */
                  getApp: (params: { appId: string }) => Promise<GetApp200Response>;
                  /**
                   * Update an app
                   * @param params - Parameters for updateApp
                   * @returns Promise resolving to updateApp response
                   */
                  updateApp: (params: { appId: string; body?: UpdateAppRequest }) => Promise<UpdateApp200Response>;
                  /**
                   * Delete an app
                   * @param params - Parameters for deleteApp
                   * @returns Promise resolving to deleteApp response
                   */
                  deleteApp: (params: { appId: string; body?: DeleteAppRequest }) => Promise<DeleteApp200Response>;
                  /**
                   * Get app events
                   * @param params - Parameters for getAppEvents
                   * @returns Promise resolving to getAppEvents response
                   */
                  getAppEvents: (params: { appId: string }) => Promise<GetAppEvents200Response>;
                  /**
                   * Copy an app
                   * @param params - Parameters for copyApp
                   * @returns Promise resolving to copyApp response
                   */
                  copyApp: (params: { appId: string; body?: CopyAppRequest }) => Promise<CopyApp200Response>;
                  /**
                   * Create a table
                   * @param params - Parameters for createTable
                   * @returns Promise resolving to createTable response
                   */
                  createTable: (params: { appId: string; body?: CreateTableRequest }) => Promise<CreateTable200Response>;
                  /**
                   * Get tables for an app
                   * @param params - Parameters for getAppTables
                   * @returns Promise resolving to getAppTables response
                   */
                  getAppTables: (params: { appId: string }) => Promise<GetAppTables200Response>;
                  /**
                   * Get a table
                   * @param params - Parameters for getTable
                   * @returns Promise resolving to getTable response
                   */
                  getTable: (params: { appId: string; tableId: string }) => Promise<GetTable200Response>;
                  /**
                   * Update a table
                   * @param params - Parameters for updateTable
                   * @returns Promise resolving to updateTable response
                   */
                  updateTable: (params: { appId: string; tableId: string; body?: UpdateTableRequest }) => Promise<UpdateTable200Response>;
                  /**
                   * Delete a table
                   * @param params - Parameters for deleteTable
                   * @returns Promise resolving to deleteTable response
                   */
                  deleteTable: (params: { appId: string; tableId: string }) => Promise<DeleteTable200Response>;
                  /**
                   * Get all relationships
                   * @param params - Parameters for getRelationships
                   * @returns Promise resolving to getRelationships response
                   */
                  getRelationships: (params: { skip?: number; tableId: string }) => Promise<GetRelationships200Response>;
                  /**
                   * Create a relationship
                   * @param params - Parameters for createRelationship
                   * @returns Promise resolving to createRelationship response
                   */
                  createRelationship: (params: { tableId: string; body?: CreateRelationshipRequest }) => Promise<CreateRelationship200Response>;
                  /**
                   * Update a relationship
                   * @param params - Parameters for updateRelationship
                   * @returns Promise resolving to updateRelationship response
                   */
                  updateRelationship: (params: { tableId: string; relationshipId: number; body?: UpdateRelationshipRequest }) => Promise<UpdateRelationship200Response>;
                  /**
                   * Delete a relationship
                   * @param params - Parameters for deleteRelationship
                   * @returns Promise resolving to deleteRelationship response
                   */
                  deleteRelationship: (params: { tableId: string; relationshipId: number }) => Promise<DeleteRelationship200Response>;
                  /**
                   * Get reports for a table
                   * @param params - Parameters for getTableReports
                   * @returns Promise resolving to getTableReports response
                   */
                  getTableReports: (params: { tableId: string }) => Promise<GetTableReports200Response>;
                  /**
                   * Get a report
                   * @param params - Parameters for getReport
                   * @returns Promise resolving to getReport response
                   */
                  getReport: (params: { tableId: string; reportId: string }) => Promise<GetReport200Response>;
                  /**
                   * Run a report
                   * @param params - Parameters for runReport
                   * @returns Promise resolving to runReport response
                   */
                  runReport: (params: { tableId: string; skip?: number; top?: number; reportId: string; body?: any }) => Promise<RunReport200Response>;
                  /**
                   * Get fields for a table
                   * @param params - Parameters for getFields
                   * @returns Promise resolving to getFields response
                   */
                  getFields: (params: { tableId: string; includeFieldPerms?: boolean }) => Promise<GetFields200Response>;
                  /**
                   * Create a field
                   * @param params - Parameters for createField
                   * @returns Promise resolving to createField response
                   */
                  createField: (params: { tableId: string; body?: CreateFieldRequest }) => Promise<CreateField200Response>;
                  /**
                   * Delete field(s)
                   * @param params - Parameters for deleteFields
                   * @returns Promise resolving to deleteFields response
                   */
                  deleteFields: (params: { tableId: string; body?: DeleteFieldsRequest }) => Promise<DeleteFields200Response>;
                  /**
                   * Get field
                   * @param params - Parameters for getField
                   * @returns Promise resolving to getField response
                   */
                  getField: (params: { tableId: string; includeFieldPerms?: boolean; fieldId: number }) => Promise<GetField200Response>;
                  /**
                   * Update a field
                   * @param params - Parameters for updateField
                   * @returns Promise resolving to updateField response
                   */
                  updateField: (params: { tableId: string; fieldId: number; body?: UpdateFieldRequest }) => Promise<UpdateField200Response>;
                  /**
                   * Get usage for all fields
                   * @param params - Parameters for getFieldsUsage
                   * @returns Promise resolving to getFieldsUsage response
                   */
                  getFieldsUsage: (params: { tableId: string; skip?: number; top?: number }) => Promise<GetFieldsUsage200Response>;
                  /**
                   * Get usage for a field
                   * @param params - Parameters for getFieldUsage
                   * @returns Promise resolving to getFieldUsage response
                   */
                  getFieldUsage: (params: { tableId: string; fieldId: number }) => Promise<GetFieldUsage200Response>;
                  /**
                   * Run a formula
                   * @param params - Parameters for runFormula
                   * @returns Promise resolving to runFormula response
                   */
                  runFormula: (params: { body?: { formula?: string; rid?: number; from?: string } }) => Promise<RunFormula200Response>;
                  /**
                   * Insert/Update record(s)
                   * @param params - Parameters for upsert
                   * @returns Promise resolving to upsert response
                   */
                  upsert: (params: { body?: UpsertRequest }) => Promise<Upsert200Response | Upsert207Response>;
                  /**
                   * Delete record(s)
                   * @param params - Parameters for deleteRecords
                   * @returns Promise resolving to deleteRecords response
                   */
                  deleteRecords: (params: { body?: DeleteRecordsRequest }) => Promise<DeleteRecords200Response>;
                  /**
                   * Query for data
                   * @param params - Parameters for runQuery
                   * @returns Promise resolving to runQuery response
                   */
                  runQuery: (params: { body?: RunQueryRequest }) => Promise<RunQuery200Response>;
                  /**
                   * Get a temporary token for a dbid
                   * @param params - Parameters for getTempTokenDBID
                   * @returns Promise resolving to getTempTokenDBID response
                   */
                  getTempTokenDBID: (params: { dbid: string; qBAppToken?: string }) => Promise<GetTempTokenDBID200Response>;
                  /**
                   * Exchange an SSO token
                   * @param params - Parameters for exchangeSsoToken
                   * @returns Promise resolving to exchangeSsoToken response
                   */
                  exchangeSsoToken: (params: { body?: { grant_type?: string; requested_token_type?: string; subject_token?: string; subject_token_type?: string } }) => Promise<ExchangeSsoToken200Response>;
                  /**
                   * Clone a user token
                   * @param params - Parameters for cloneUserToken
                   * @returns Promise resolving to cloneUserToken response
                   */
                  cloneUserToken: (params: { body?: { name?: string; description?: string } }) => Promise<CloneUserToken200Response>;
                  /**
                   * Transfer a user token
                   * @param params - Parameters for transferUserToken
                   * @returns Promise resolving to transferUserToken response
                   */
                  transferUserToken: (params: { body?: { id?: number; from?: string; to?: string } }) => Promise<TransferUserToken200Response>;
                  /**
                   * Deactivate a user token
                   * @param params - Parameters for deactivateUserToken
                   * @returns Promise resolving to deactivateUserToken response
                   */
                  deactivateUserToken: (params: {  }) => Promise<DeactivateUserToken200Response>;
                  /**
                   * Delete a user token
                   * @param params - Parameters for deleteUserToken
                   * @returns Promise resolving to deleteUserToken response
                   */
                  deleteUserToken: (params: {  }) => Promise<DeleteUserToken200Response>;
                  /**
                   * Download file
                   * @param params - Parameters for downloadFile
                   * @returns Promise resolving to downloadFile response
                   */
                  downloadFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<DownloadFile200Response>;
                  /**
                   * Delete file
                   * @param params - Parameters for deleteFile
                   * @returns Promise resolving to deleteFile response
                   */
                  deleteFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<DeleteFile200Response>;
                  /**
                   * Get users
                   * @param params - Parameters for getUsers
                   * @returns Promise resolving to getUsers response
                   */
                  getUsers: (params: { accountId?: number; body?: GetUsersRequest }) => Promise<GetUsers200Response>;
                  /**
                   * Deny users
                   * @param params - Parameters for denyUsers
                   * @returns Promise resolving to denyUsers response
                   */
                  denyUsers: (params: { accountId?: number; body?: DenyUsersRequest }) => Promise<DenyUsers200Response>;
                  /**
                   * Deny and remove users from groups
                   * @param params - Parameters for denyUsersAndGroups
                   * @returns Promise resolving to denyUsersAndGroups response
                   */
                  denyUsersAndGroups: (params: { accountId?: number; shouldDeleteFromGroups: boolean; body?: DenyUsersAndGroupsRequest }) => Promise<DenyUsersAndGroups200Response>;
                  /**
                   * Undeny users
                   * @param params - Parameters for undenyUsers
                   * @returns Promise resolving to undenyUsers response
                   */
                  undenyUsers: (params: { accountId?: number; body?: UndenyUsersRequest }) => Promise<UndenyUsers200Response>;
                  /**
                   * Add members
                   * @param params - Parameters for addMembersToGroup
                   * @returns Promise resolving to addMembersToGroup response
                   */
                  addMembersToGroup: (params: { gid: number; body?: AddMembersToGroupRequest }) => Promise<AddMembersToGroup200Response>;
                  /**
                   * Remove members
                   * @param params - Parameters for removeMembersFromGroup
                   * @returns Promise resolving to removeMembersFromGroup response
                   */
                  removeMembersFromGroup: (params: { gid: number; body?: RemoveMembersFromGroupRequest }) => Promise<RemoveMembersFromGroup200Response>;
                  /**
                   * Add managers
                   * @param params - Parameters for addManagersToGroup
                   * @returns Promise resolving to addManagersToGroup response
                   */
                  addManagersToGroup: (params: { gid: number; body?: AddManagersToGroupRequest }) => Promise<AddManagersToGroup200Response>;
                  /**
                   * Remove managers
                   * @param params - Parameters for removeManagersFromGroup
                   * @returns Promise resolving to removeManagersFromGroup response
                   */
                  removeManagersFromGroup: (params: { gid: number; body?: RemoveManagersFromGroupRequest }) => Promise<RemoveManagersFromGroup200Response>;
                  /**
                   * Add child groups
                   * @param params - Parameters for addSubgroupsToGroup
                   * @returns Promise resolving to addSubgroupsToGroup response
                   */
                  addSubgroupsToGroup: (params: { gid: number; body?: AddSubgroupsToGroupRequest }) => Promise<AddSubgroupsToGroup200Response>;
                  /**
                   * Remove child groups
                   * @param params - Parameters for removeSubgroupsFromGroup
                   * @returns Promise resolving to removeSubgroupsFromGroup response
                   */
                  removeSubgroupsFromGroup: (params: { gid: number; body?: RemoveSubgroupsFromGroupRequest }) => Promise<RemoveSubgroupsFromGroup200Response>;
                  /**
                   * Get audit logs
                   * @param params - Parameters for audit
                   * @returns Promise resolving to audit response
                   */
                  audit: (params: { body?: { nextToken?: string; numRows?: number; queryId?: string; date?: string; topics?: string[] } }) => Promise<Audit200Response>;
                  /**
                   * Get read summaries
                   * @param params - Parameters for platformAnalyticReads
                   * @returns Promise resolving to platformAnalyticReads response
                   */
                  platformAnalyticReads: (params: { day?: string }) => Promise<PlatformAnalyticReads200Response>;
                  /**
                   * Get event summaries
                   * @param params - Parameters for platformAnalyticEventSummaries
                   * @returns Promise resolving to platformAnalyticEventSummaries response
                   */
                  platformAnalyticEventSummaries: (params: { accountId?: number; body?: { start?: string; end?: string; groupBy?: string; nextToken?: string; where?: { id?: string; type?: string }[] } }) => Promise<PlatformAnalyticEventSummaries200Response>;
                  /**
                   * Export a solution
                   * @param params - Parameters for exportSolution
                   * @returns Promise resolving to exportSolution response
                   */
                  exportSolution: (params: { solutionId: string; qBLVersion?: string }) => Promise<ExportSolution200Response>;
                  /**
                   * Update a solution
                   * @param params - Parameters for updateSolution
                   * @returns Promise resolving to updateSolution response
                   */
                  updateSolution: (params: { solutionId: string; body?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<UpdateSolution200Response>;
                  /**
                   * Create a solution
                   * @param params - Parameters for createSolution
                   * @returns Promise resolving to createSolution response
                   */
                  createSolution: (params: { body?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<CreateSolution200Response>;
                  /**
                   * Export solution to record
                   * @param params - Parameters for exportSolutionToRecord
                   * @returns Promise resolving to exportSolutionToRecord response
                   */
                  exportSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; xQBLErrorsAsSuccess?: boolean; qBLVersion?: string }) => Promise<ExportSolutionToRecord200Response>;
                  /**
                   * Create solution from record
                   * @param params - Parameters for createSolutionFromRecord
                   * @returns Promise resolving to createSolutionFromRecord response
                   */
                  createSolutionFromRecord: (params: { tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<CreateSolutionFromRecord200Response>;
                  /**
                   * Update solution from record
                   * @param params - Parameters for updateSolutionToRecord
                   * @returns Promise resolving to updateSolutionToRecord response
                   */
                  updateSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<UpdateSolutionToRecord200Response>;
                  /**
                   * List solution changes
                   * @param params - Parameters for changesetSolution
                   * @returns Promise resolving to changesetSolution response
                   */
                  changesetSolution: (params: { solutionId: string; body?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<ChangesetSolution200Response>;
                  /**
                   * List solution changes from record
                   * @param params - Parameters for changesetSolutionFromRecord
                   * @returns Promise resolving to changesetSolutionFromRecord response
                   */
                  changesetSolutionFromRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<ChangesetSolutionFromRecord200Response>;
                  /**
                   * Generate a document
                   * @param params - Parameters for generateDocument
                   * @returns Promise resolving to generateDocument response
                   */
                  generateDocument: (params: { templateId: number; tableId: string; recordId?: number; filename: string; accept?: string; format?: string; margin?: string; unit?: string; pageSize?: string; orientation?: string; realm?: string }) => Promise<GenerateDocument200Response>;
                }
            - name: >-
                missing-types-report.json
              type: >-
                file
        - name: >-
            index.ts
          type: >-
            file
        - name: >-
            invokeMethod.ts
          type: >-
            file
          contents: >
            //
            src/invokeMethod.ts

            import
            {
            QuickbaseClient
            }
            from
            "./quickbaseClient";

            import
            {
            ResponseError
            }
            from
            "./generated/runtime";

            import
            {
            TokenBucket
            }
            from
            "./TokenBucket";

            import
            {
            RateLimitError
            }
            from
            "./RateLimitError";


            export
            type
            ApiMethod<K
            extends
            keyof
            QuickbaseClient>
            =
            (
              requestParameters: Parameters<QuickbaseClient[K]>[0],
              initOverrides?: RequestInit
            )
            =>
            Promise<ReturnType<QuickbaseClient[K]>>;


            export
            interface
            MethodInfo<K
            extends
            keyof
            QuickbaseClient>
            {
              api: any;
              method: ApiMethod<K>;
              paramMap: string[];
              httpMethod: string;
            }


            export
            interface
            TempTokenParams
            {
              appId?: string;
              tableId?: string;
              dbid?: string;
            }


            export
            interface
            TokenCache
            {
              get: (dbid: string) => string | undefined;
              set: (dbid: string, token: string) => void;
            }


            export
            async
            function
            invokeMethod<K
            extends
            keyof
            QuickbaseClient>(
              methodName: K,
              params: Parameters<QuickbaseClient[K]>[0] & Partial<TempTokenParams>,
              methodMap: { [K in keyof QuickbaseClient]: MethodInfo<K> },
              baseHeaders: Record<string, string>,
              tokenCache: TokenCache,
              fetchTempToken: (dbid: string) => Promise<string>,
              transformDates: (obj: any, convertStringsToDates: boolean) => any,
              initialTempToken: string | undefined,
              userToken: string | undefined,
              useTempTokens: boolean | undefined,
              debug: boolean | undefined,
              convertDates: boolean,
              retryCount: number = 0,
              throttleBucket: TokenBucket | null = null,
              maxRetries: number = 3,
              retryDelay: number = 1000
            ):
            Promise<ReturnType<QuickbaseClient[K]>>
            {
              const methodInfo = methodMap[methodName];
              if (!methodInfo) {
                throw new Error(`Method ${methodName} not found`);
              }

              const hasBody = "body" in params && params.body !== undefined;
              const body = hasBody ? (params as any).body : undefined;
              const restParams: any = hasBody
                ? Object.fromEntries(
                    Object.entries(params).filter(([key]) => key !== "body")
                  )
                : { ...params };

              const requestParameters: any = {
                ...restParams,
                ...(hasBody ? { generated: body } : {}),
              };

              let requestOptions: RequestInit = {
                credentials: "omit",
                method: methodInfo.httpMethod,
              };

              if (hasBody) {
                requestOptions.body = body;
              }

              const selectedToken =
                initialTempToken || (userToken && !useTempTokens ? userToken : undefined);

              if (methodName === "getTempTokenDBID" && useTempTokens) {
                const dbid = extractDbid(params, "No dbid provided for getTempTokenDBID");
                const cachedToken = tokenCache.get(dbid);
                if (cachedToken) {
                  return { temporaryAuthorization: cachedToken } as ReturnType<
                    QuickbaseClient[K]
                  >;
                }
              }

              let authorizationToken = selectedToken;
              if (useTempTokens && !authorizationToken) {
                const dbid = extractDbid(
                  params,
                  `No dbid found in params for ${methodName} to fetch temp token`
                );
                const cachedToken = tokenCache.get(dbid);
                authorizationToken = cachedToken || (await fetchTempToken(dbid));
                if (methodName === "getTempTokenDBID") {
                  return { temporaryAuthorization: authorizationToken } as ReturnType<
                    QuickbaseClient[K]
                  >;
                }
                requestOptions.headers = {
                  ...baseHeaders,
                  Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                };
              } else if (authorizationToken) {
                requestOptions.headers = {
                  ...baseHeaders,
                  Authorization: `QB-USER-TOKEN ${authorizationToken}`,
                };
              }

              if (debug) {
                console.log(`[${methodName}] requestParameters:`, requestParameters);
                console.log(`[${methodName}] requestOptions:`, requestOptions);
              }

              async function processResponse(
                rawResponse: any
              ): Promise<ReturnType<QuickbaseClient[K]>> {
                let response: Awaited<ReturnType<QuickbaseClient[K]>>;

                if (debug) {
                  console.log(`[${methodName}] rawResponse:`, rawResponse);
                }

                if (rawResponse instanceof Response) {
                  const contentType = rawResponse.headers
                    .get("Content-Type")
                    ?.toLowerCase();
                  if (debug) {
                    console.log(`[${methodName}] contentType:`, contentType);
                  }
                  if (contentType?.includes("application/octet-stream")) {
                    response = (await rawResponse.arrayBuffer()) as Awaited<
                      ReturnType<QuickbaseClient[K]>
                    >;
                  } else if (
                    contentType?.includes("application/x-yaml") ||
                    contentType?.includes("text/yaml")
                  ) {
                    response = (await rawResponse.text()) as Awaited<
                      ReturnType<QuickbaseClient[K]>
                    >;
                  } else if (contentType?.includes("application/json")) {
                    const jsonResponse = await rawResponse.json();
                    response = transformDates(jsonResponse, convertDates) as Awaited<
                      ReturnType<QuickbaseClient[K]>
                    >;
                  } else {
                    response = rawResponse as Awaited<ReturnType<QuickbaseClient[K]>>;
                  }
                } else if (rawResponse && typeof rawResponse.value === "function") {
                  response = await rawResponse.value();
                  if (debug) {
                    console.log(`[${methodName}] Resolved JSONApiResponse:`, response);
                  }
                  response = transformDates(response, convertDates) as Awaited<
                    ReturnType<QuickbaseClient[K]>
                  >;
                } else {
                  response = transformDates(rawResponse, convertDates) as Awaited<
                    ReturnType<QuickbaseClient[K]>
                  >;
                  if (debug) {
                    console.log(`[${methodName}] Transformed non-Response:`, response);
                  }
                }

                return response;
              }

              async function handleError(
                error: any,
                retryCount: number
              ): Promise<ReturnType<QuickbaseClient[K]>> {
                if (!(error instanceof ResponseError)) {
                  throw error; // Non-ResponseError cases
                }

                // Capture error details once
                const status = error.response.status;
                const headers = error.response.headers;
                const retryAfterHeader = headers.get("Retry-After");
                const retryAfter = retryAfterHeader
                  ? parseInt(retryAfterHeader, 10) * 1000
                  : undefined;
                let errorMessage = error.message;

                // Read body once
                let errorBody: { message?: string } | null = null;
                try {
                  errorBody = await error.response.json();
                  if (debug) {
                    console.log(`Error response body for ${methodName}:`, errorBody);
                  }
                  errorMessage = errorBody?.message || errorMessage;
                } catch (e) {
                  if (debug) {
                    console.log(`Failed to parse error body for ${methodName}:`, e);
                  }
                }

                // Handle retries or throw based on status
                if (status === 429 && retryCount < maxRetries) {
                  const delayMs = retryAfter || retryDelay * Math.pow(2, retryCount);
                  if (debug) {
                    console.log(
                      `[${methodName}] Rate limit exceeded (429), retrying after ${delayMs}ms (attempt ${
                        retryCount + 1
                      }/${maxRetries})`
                    );
                  }
                  await new Promise((resolve) => setTimeout(resolve, delayMs));

                  // Retry with fresh request, not reprocessing the same error
                  if (throttleBucket) {
                    if (debug) console.log(`[${methodName}] Awaiting throttle bucket`);
                    await throttleBucket.acquire();
                    if (debug) console.log(`[${methodName}] Throttle bucket acquired`);
                  }

                  const rawResponse = await methodInfo.method(
                    requestParameters,
                    requestOptions
                  );
                  return await processResponse(rawResponse);
                }

                if (status === 401 && retryCount < 1 && useTempTokens) {
                  if (debug) {
                    console.log(
                      `Authorization error for ${methodName}, refreshing token:`,
                      error.message
                    );
                  }
                  const dbid = extractDbid(
                    params,
                    `No dbid to refresh token after authorization error`
                  );
                  authorizationToken = await fetchTempToken(dbid);
                  requestOptions.headers = {
                    ...baseHeaders,
                    Authorization: `QB-TEMP-TOKEN ${authorizationToken}`,
                  };
                  if (debug) {
                    console.log(`Retrying ${methodName} with new token`);
                  }

                  if (throttleBucket) {
                    if (debug) console.log(`[${methodName}] Awaiting throttle bucket`);
                    await throttleBucket.acquire();
                    if (debug) console.log(`[${methodName}] Throttle bucket acquired`);
                  }

                  const rawResponse = await methodInfo.method(
                    requestParameters,
                    requestOptions
                  );
                  return await processResponse(rawResponse);
                }

                // Throw final error
                if (status === 429) {
                  throw new RateLimitError(
                    `API Error: ${errorMessage} (Status: ${status})`,
                    status,
                    retryAfter ? retryAfter / 1000 : undefined
                  );
                }
                throw new Error(`API Error: ${errorMessage} (Status: ${status})`);
              }

              try {
                if (throttleBucket) {
                  if (debug) console.log(`[${methodName}] Awaiting throttle bucket`);
                  await throttleBucket.acquire();
                  if (debug) console.log(`[${methodName}] Throttle bucket acquired`);
                }

                const rawResponse: any = await methodInfo.method(
                  requestParameters,
                  requestOptions
                );
                return await processResponse(rawResponse);
              } catch (error) {
                return await handleError(error, retryCount);
              }
            }


            function
            extractDbid(
              params: Partial<TempTokenParams>,
              errorMessage: string
            ):
            string
            {
              const dbid = params.dbid || params.tableId || params.appId;
              if (!dbid) {
                throw new Error(errorMessage);
              }
              return dbid;
            }
        - name: >-
            quickbaseClient.ts
          type: >-
            file
          contents: >
            //
            src/quickbaseClient.ts

            import
            {
            QuickbaseClient
            as
            IQuickbaseClient
            }
            from
            "./generated-unified/QuickbaseClient";

            import
            {
            Configuration,
            HTTPHeaders
            }
            from
            "./generated/runtime";

            import
            *
            as
            apis
            from
            "./generated/apis";

            import
            {
            TokenCache
            }
            from
            "./tokenCache";

            import
            {
            simplifyName
            }
            from
            "./utils";

            import
            {
              invokeMethod,
              ApiMethod,
              MethodInfo,
              TempTokenParams,
            }
            from
            "./invokeMethod";

            import
            {
            TokenBucket
            }
            from
            "./TokenBucket";


            export
            *
            from
            "./generated/models/index";


            export
            interface
            QuickbaseClient
            extends
            IQuickbaseClient
            {}


            export
            interface
            QuickbaseConfig
            {
              realm: string;
              userToken?: string;
              tempToken?: string;
              useTempTokens?: boolean;
              debug?: boolean;
              fetchApi?: typeof fetch;
              convertDates?: boolean;
              tokenLifespan?: number;
              throttle?: { rate: number; burst: number };
              maxRetries?: number; // New: Max retries for 429 errors
              retryDelay?: number; // New: Base delay in ms for retries
            }


            type
            MethodMap
            =
            {
              [K in keyof QuickbaseClient]: MethodInfo<K>;
            };


            const
            getParamNames
            =
            (fn:
            (...args:
            any[])
            =>
            any):
            string[]
            =>
              fn
                .toString()
                .slice(fn.toString().indexOf("(") + 1, fn.toString().indexOf(")"))
                .split(",")
                .map((p) => p.trim().split("=")[0]?.trim())
                .filter((p) => p && !p.match(/^\{/) && p !== "options");

            function
            transformDates(obj:
            any,
            convertStringsToDates:
            boolean
            =
            true):
            any
            {
              if (obj === null || obj === undefined) return obj;
              if (obj instanceof Date) return obj;
              if (
                convertStringsToDates &&
                typeof obj === "string" &&
                /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?/.test(
                  obj
                )
              ) {
                return new Date(obj);
              }
              if (Array.isArray(obj)) {
                return obj.map((item) => transformDates(item, convertStringsToDates));
              }
              if (typeof obj === "object") {
                return Object.fromEntries(
                  Object.entries(obj).map(([key, value]) => [
                    key,
                    transformDates(value, convertStringsToDates),
                  ])
                );
              }
              return obj;
            }


            function
            inferHttpMethod(methodSource:
            string,
            debug?:
            boolean):
            string
            {
              const methodMatch = methodSource.match(/method:\s*['"]?(\w+)['"]?/i);
              const method = methodMatch ? methodMatch[1].toUpperCase() : "GET";
              if (debug) {
                // console.log(`[inferHttpMethod] Source:`, methodSource);
                // console.log(`[inferHttpMethod] Extracted method:`, method);
              }
              return method;
            }


            export
            function
            quickbase(config:
            QuickbaseConfig):
            QuickbaseClient
            {
              const {
                realm,
                userToken,
                tempToken: initialTempToken,
                useTempTokens,
                fetchApi,
                debug,
                convertDates = true,
                tokenLifespan,
                throttle = { rate: 10, burst: 10 },
                maxRetries = 3, // Default: Retry up to 3 times on 429
                retryDelay = 1000, // Default: 1s base delay for retries
              } = config;
              const baseUrl = `https://api.quickbase.com/v1`;

              const tokenCache = new TokenCache(tokenLifespan);
              const throttleBucket = throttle
                ? new TokenBucket(throttle.rate, throttle.burst)
                : null;

              const baseHeaders: HTTPHeaders = {
                "QB-Realm-Hostname": `${realm}.quickbase.com`,
                "Content-Type": "application/json",
              };

              if (initialTempToken) {
                baseHeaders["Authorization"] = `QB-TEMP-TOKEN ${initialTempToken}`;
              } else if (userToken && !useTempTokens) {
                baseHeaders["Authorization"] = `QB-USER-TOKEN ${userToken}`;
              }

              const defaultFetch: typeof fetch | undefined =
                typeof globalThis.window !== "undefined"
                  ? globalThis.window.fetch.bind(globalThis.window)
                  : undefined;
              const configuration = new Configuration({
                basePath: baseUrl,
                headers: { ...baseHeaders },
                fetchApi: fetchApi || defaultFetch,
                credentials: "omit",
              });

              if (!configuration.fetchApi && typeof globalThis.window === "undefined") {
                throw new Error(
                  "fetchApi must be provided in non-browser environments (e.g., Node.js)"
                );
              }

              const apiInstances = Object.fromEntries(
                Object.entries(apis)
                  .filter(([name]) => name.endsWith("Api"))
                  .map(([name, ApiClass]) => [
                    name.replace("Api", "").toLowerCase(),
                    new ApiClass(configuration),
                  ])
              );

              const methodMap = buildMethodMap();

              function buildMethodMap(): MethodMap {
                const methodMap: Partial<MethodMap> = {};
                const isValidMethod = (name: string) =>
                  !name.startsWith("_") &&
                  name !== "constructor" &&
                  !["Middleware", "Pre", "Post", "Raw"].some((s) => name.includes(s));

                for (const [apiName, api] of Object.entries(apiInstances)) {
                  Object.getOwnPropertyNames(Object.getPrototypeOf(api))
                    .filter(
                      (name) =>
                        isValidMethod(name) &&
                        typeof api[name as keyof typeof api] === "function"
                    )
                    .forEach((rawMethodName) => {
                      const simplifiedName = simplifyName(
                        rawMethodName
                      ) as keyof QuickbaseClient;
                      const rawMethodKey = `${rawMethodName}Raw` as keyof typeof api;
                      const method =
                        api[rawMethodKey] || api[rawMethodName as keyof typeof api];
                      const boundMethod = method.bind(api as any) as unknown;
                      if (typeof boundMethod === "function" && boundMethod.length <= 2) {
                        const methodSource = method.toString();
                        methodMap[simplifiedName] = {
                          api,
                          method: boundMethod as ApiMethod<typeof simplifiedName>,
                          paramMap: getParamNames(method),
                          httpMethod: inferHttpMethod(methodSource, debug),
                        };
                      }
                    });
                }
                return methodMap as MethodMap;
              }

              const fetchTempToken = async (dbid: string): Promise<string> => {
                const effectiveFetch = fetchApi || defaultFetch;
                if (!effectiveFetch) {
                  throw new Error(
                    "No fetch implementation available for fetching temp token"
                  );
                }

                const response = await effectiveFetch(
                  `https://api.quickbase.com/v1/auth/temporary/${dbid}`,
                  {
                    method: "GET",
                    headers: { ...baseHeaders },
                    credentials: "include",
                  }
                );

                if (!response.ok) {
                  const errorBody: { message?: string } = await response.json();
                  throw new Error(
                    `API Error: ${errorBody.message || "Unknown error"} (Status: ${
                      response.status
                    })`
                  );
                }

                const tokenResult = await response.json();
                const token = tokenResult.temporaryAuthorization;
                if (!token) {
                  throw new Error("No temporary token returned from API");
                }
                tokenCache.set(dbid, token);
                if (debug) {
                  console.log(`Fetched and cached new token for dbid: ${dbid}`, token);
                }
                return token;
              };

              const proxy = new Proxy<QuickbaseClient>({} as QuickbaseClient, {
                get: (_, prop: string): ((params: any) => Promise<any>) | undefined => {
                  if (prop in methodMap) {
                    const methodName = prop as keyof QuickbaseClient;
                    return (params: Parameters<QuickbaseClient[typeof methodName]>[0]) =>
                      invokeMethod(
                        methodName,
                        params,
                        methodMap,
                        baseHeaders,
                        tokenCache,
                        fetchTempToken,
                        transformDates,
                        initialTempToken,
                        userToken,
                        useTempTokens,
                        debug,
                        convertDates,
                        0, // retryCount
                        throttleBucket,
                        maxRetries,
                        retryDelay
                      );
                  }
                  return undefined;
                },
              });

              if (debug) {
                // console.log("[createClient] Config:", config);
                // console.log("[createClient] Returning:", proxy);
              }

              return proxy;
            }
        - name: >-
            tokenCache.ts
          type: >-
            file
        - name: >-
            utils.ts
          type: >-
            file
    - name: >-
        test-artifacts
      type: >-
        directory
      children:
        - name: >-
            .last-run.json
          type: >-
            file
        - name: >-
            test-results.json
          type: >-
            file
    - name: >-
        test-esm.js
      type: >-
        file
    - name: >-
        test-results.json
      type: >-
        file
    - name: >-
        test-umd.js
      type: >-
        file
    - name: >-
        test.ts
      type: >-
        file
    - name: >-
        tests
      type: >-
        directory
      children:
        - name: >-
            playwright
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        cacheSwitching.test.ts
                      type: >-
                        file
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppWithUserToken.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        tokenPrefetch.test.ts
                      type: >-
                        file
                    - name: >-
                        tokenRenewal.test.ts
                      type: >-
                        file
        - name: >-
            setup.ts
          type: >-
            file
          contents: >
            //
            @tests/setup.ts

            import
            {
            vi
            }
            from
            "vitest";

            import
            {
            quickbase
            }
            from
            "../src/quickbaseClient.ts";

            import
            type
            {
            QuickbaseConfig
            }
            from
            "../src/quickbaseClient.ts";

            import
            dotenv
            from
            "dotenv";


            //
            Load
            environment
            variables
            from
            .env
            file

            dotenv.config({
            path:
            "./.env"
            });
            //
            Assumes
            .env
            is
            at
            project
            root


            export
            const
            mockFetch
            =
            vi.fn();


            export
            const
            QB_REALM
            =
            process.env.QB_REALM
            ||
            "test-realm";

            export
            const
            QB_USER_TOKEN
            =
              process.env.QB_USER_TOKEN || "user-token-1234567890";
            export
            const
            QB_APP_ID
            =
            process.env.QB_APP_ID
            ||
            "app-id-1234567890";

            export
            const
            QB_TABLE_ID_1
            =
              process.env.QB_TABLE_ID_1 || "table-id-1-1234567890";
            export
            const
            QB_TABLE_ID_2
            =
              process.env.QB_TABLE_ID_2 || "table-id-2-1234567890";

            //
            Mock
            env
            variables
            for
            consistency,
            using
            .env
            values
            if
            available

            vi.stubEnv("QB_REALM",
            QB_REALM);

            vi.stubEnv("QB_USER_TOKEN",
            QB_USER_TOKEN);

            vi.stubEnv("QB_APP_ID",
            QB_APP_ID);

            vi.stubEnv("QB_TABLE_ID_1",
            QB_TABLE_ID_1);

            vi.stubEnv("QB_TABLE_ID_2",
            QB_TABLE_ID_2);


            export
            const
            createClient
            =
            (
              fetchApi?: any,
              config: Partial<QuickbaseConfig> = {}
            )
            =>
            {
              // Use loaded env vars with fallbacks for safety
              const realm = QB_REALM;
              const userToken = QB_USER_TOKEN;

              const client = quickbase({
                realm,
                userToken,
                debug: true,
                fetchApi,
                throttle: { rate: 10, burst: 10 }, // Throttle at 10 req/s with 10 burst capacity
                ...config, // Allow overrides if provided
              });
              console.log("[createClient] Config:", {
                realm,
                userToken,
                debug: true,
                throttle: { rate: 10, burst: 10 },
                ...config,
              });
              console.log("[createClient] Returning:", client);
              return client;
            };
        - name: >-
            vitest
          type: >-
            directory
          children:
            - name: >-
                qb
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
            - name: >-
                unit
              type: >-
                directory
              children:
                - name: >-
                    apps
                  type: >-
                    directory
                  children:
                    - name: >-
                        copyApp.test.ts
                      type: >-
                        file
                    - name: >-
                        createApp.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getApp.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppEvents.test.ts
                      type: >-
                        file
                    - name: >-
                        updateApp.test.ts
                      type: >-
                        file
                - name: >-
                    auth
                  type: >-
                    directory
                  children:
                    - name: >-
                        fetchTempToken401.test.ts
                      type: >-
                        file
                    - name: >-
                        getTempToken.test.ts
                      type: >-
                        file
                    - name: >-
                        retryOn401.test.ts
                      type: >-
                        file
                    - name: >-
                        two401s.test.ts
                      type: >-
                        file
                - name: >-
                    fields
                  type: >-
                    directory
                  children:
                    - name: >-
                        createField.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getField.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        getFields.test.ts
                      type: >-
                        file
                    - name: >-
                        getFieldsUsage.test.ts
                      type: >-
                        file
                    - name: >-
                        updateField.test.ts
                      type: >-
                        file
                - name: >-
                    index.ts
                  type: >-
                    file
                - name: >-
                    rateLimit.test.ts
                  type: >-
                    file
                - name: >-
                    records
                  type: >-
                    directory
                  children:
                    - name: >-
                        deleteRecords.test.ts
                      type: >-
                        file
                    - name: >-
                        runQuery.test.ts
                      type: >-
                        file
                    - name: >-
                        upsert.test.ts
                      type: >-
                        file
                - name: >-
                    tables
                  type: >-
                    directory
                  children:
                    - name: >-
                        createTable.test.ts
                      type: >-
                        file
                    - name: >-
                        deleteTable.test.ts
                      type: >-
                        file
                    - name: >-
                        getAppTables.test.ts
                      type: >-
                        file
                    - name: >-
                        getRelationships.test.ts
                      type: >-
                        file
                    - name: >-
                        getTable.test.ts
                      type: >-
                        file
                    - name: >-
                        updateTable.test.ts
                      type: >-
                        file
                - name: >-
                    tokenLifespan.test.ts
                  type: >-
                    file
                - name: >-
                    umd.test.ts
                  type: >-
                    file
    - name: >-
        text.txt
      type: >-
        file
    - name: >-
        tools
      type: >-
        directory
      children:
        - name: >-
            log-gen.ts
          type: >-
            file
        - name: >-
            log-gen.yaml
          type: >-
            file
        - name: >-
            openapi-jars
          type: >-
            directory
          children:
            - name: >-
                openapi-generator-cli-7.12.0.jar
              type: >-
                file
    - name: >-
        tsconfig.build.json
      type: >-
        file
    - name: >-
        tsconfig.json
      type: >-
        file
    - name: >-
        versionrc.json
      type: >-
        file
    - name: >-
        vitest.config.ts
      type: >-
        file
