project: quickbase-js
date: 3/11/2025
root: /home/drew/Projects/quickbase-js
goals:
  - A library for interacting with the QuickBase RESTful API.
  - Use OpenAPI to generate types and methods using a proxy. Validate with tests.
  - Provide robust and intuitive temporary token support for browser environments.
  - User Tokens support both Node.js and browser environments.
  - 'Use case: JS frameworks like React, Vue, and Angular hosted in QuickBase code pages.'
  - Enable a flexible or native fetch in the browser.
  - Enable a flexible fetch framework in Node.js.
  - '#'
  - No manual updating methods when the QuickBase API changes.
  - The proxy magic dynamically maps generated methods and types.
  - '#'
  - TokenCache is defined per quickbaseClient call, so each instance has its own isolated TokenCache.
  - Each quickbase client instance has an isolated and individual token cache.
pipelineOverview:
  - 'fix-spec-main.ts: Input: Reads the latest QuickBase_RESTful*.json file from the specs/ folder and applies fixes to the parameters and paths.'
  - filters out the QB-Realm-Hostname, Authorization, and User-Agent parameters.
  - Converts parameter names to camelCase.
  - Fixes array schemas and applies custom paths.
  - Merges paths from fix-spec-paths.ts and definitions from fix-spec-definitions.ts.
  - 'Output: writes quickbase-fixed.json to src/code-generation/output/.'
  - 'Key Behavior: The merge (spec.paths = { ...spec.paths, ...paths }) preserves all origional endpoints, only overriding those defined in fix-spec-paths.ts.'
  - '#'
  - 'regenerate-client.ts: Uses quickbase-fixed.json to generate raw TypeScript-fetch files (src/generated/). including models and APIs.'
  - '#'
  - 'generate-unified-interface.ts: Uses quickbase-fixed.json to generate a unified QuickbaseClient.ts interface in src/generated-unified/.'
  - QuickbaseClient.ts includes all endpoints from src/code-generation/output/quickbase-fixed, and types from src/generated.
  - '#'
  - /specs/QuickBase_RESTful_API_*.json is over 46k lines of JSON, so it's not included in the snapshot, its too large to give to an AI.
  - which creates difficulties in understanding the structure of the API.
  - It makes it difficult to model the src/code-generation/fix-spec-*.ts files in the snapshot.
  - '#'
  - vitest unit and integration tests. Integration tests use the real QuickBase API with user token auth.
  - playwright is used to test the real QuickBase API in a browser enviornment with temporary token auth.
  - temp tokens can only be generated in a browser enviornment and can not be fetched with a user token.
  - '#'
  - getTempTokenDBID() method is wrapped to enhance temporary token generation reuse interacting with a token cache.
  - '#'
  - 'npm run fix-spec: Generates quickbase-fixed.json from the latest QuickBase_RESTful*.json file.'
  - npm run regenerate:openapi Generates raw TypeScript-fetch files in src/generated/.
  - 'npm run generate:unified: Generates a unified QuickbaseClient.ts interface in src/generated-unified/.'
tree:
  name: .
  type: directory
  children:
    - name: .env
      type: file
    - name: .gitignore
      type: file
    - name: CHANGELOG.md
      type: file
    - name: LICENSE
      type: file
    - name: README.md
      type: file
    - name: build.js
      type: file
    - name: dist
      type: directory
      children:
        - name: quickbase.d.ts
          type: file
        - name: quickbase.js
          type: file
        - name: quickbase.js.map
          type: file
    - name: examples
      type: directory
      children:
        - name: react.js
          type: file
        - name: vanillajs.html
          type: file
    - name: log-gen.yaml
      type: file
    - name: openapitools.json
      type: file
    - name: package-lock.json
      type: file
    - name: package.json
      type: file
    - name: playwright-results.txt
      type: directory
      children:
        - name: .last-run.json
          type: file
    - name: playwright.config.ts
      type: file
    - name: rollup.config.js
      type: file
    - name: src
      type: directory
      children:
        - name: code-generation
          type: directory
          children:
            - name: definitions
              type: directory
              children:
                - name: apps.ts
                  type: file
                - name: auth.ts
                  type: file
                - name: fields.ts
                  type: file
                - name: index.ts
                  type: file
                - name: records.ts
                  type: file
                - name: relationships.ts
                  type: file
                - name: reports.ts
                  type: file
                - name: tables.ts
                  type: file
            - name: fix-spec-main.ts
              type: file
            - name: generate-unified-interface.ts
              type: file
            - name: output
              type: directory
              children:
                - name: quickbase-fixed.json
                  type: file
            - name: paths
              type: directory
              children:
                - name: apps.ts
                  type: file
                - name: auth.ts
                  type: file
                - name: fields.ts
                  type: file
                - name: index.ts
                  type: file
                - name: records.ts
                  type: file
                - name: relationships.ts
                  type: file
                - name: reports.ts
                  type: file
                - name: tables.ts
                  type: file
            - name: regenerate-client.ts
              type: file
        - name: generated
          type: directory
          children:
            - name: .openapi-generator
              type: directory
              children:
                - name: FILES
                  type: file
                - name: VERSION
                  type: file
            - name: .openapi-generator-ignore
              type: file
            - name: apis
              type: directory
              children:
                - name: AppsApi.ts
                  type: file
                - name: AuditApi.ts
                  type: file
                - name: AuthApi.ts
                  type: file
                - name: DocumentTemplatesApi.ts
                  type: file
                - name: FieldsApi.ts
                  type: file
                - name: FilesApi.ts
                  type: file
                - name: FormulasApi.ts
                  type: file
                - name: PlatformAnalyticsApi.ts
                  type: file
                - name: RecordsApi.ts
                  type: file
                - name: RelationshipsApi.ts
                  type: file
                - name: ReportsApi.ts
                  type: file
                - name: SolutionsApi.ts
                  type: file
                - name: TablesApi.ts
                  type: file
                - name: UserTokenApi.ts
                  type: file
                - name: UsersApi.ts
                  type: file
                - name: index.ts
                  type: file
            - name: index.ts
              type: file
            - name: models
              type: directory
              children:
                - name: AddMembersToGroup200Response.ts
                  type: file
                - name: AddSubgroupsToGroup200Response.ts
                  type: file
                - name: App.ts
                  type: file
                - name: AppMemoryInfo.ts
                  type: file
                - name: AppSecurityProperties.ts
                  type: file
                - name: Audit200Response.ts
                  type: file
                - name: Audit202Response.ts
                  type: file
                - name: AuditRequest.ts
                  type: file
                - name: CloneUserToken200Response.ts
                  type: file
                - name: CloneUserTokenRequest.ts
                  type: file
                - name: CopyApp200Response.ts
                  type: file
                - name: CopyAppRequest.ts
                  type: file
                - name: CopyAppRequestProperties.ts
                  type: file
                - name: CreateApp200Response.ts
                  type: file
                - name: CreateAppRequest.ts
                  type: file
                - name: CreateAppRequestVariablesInner.ts
                  type: file
                - name: CreateField200Response.ts
                  type: file
                - name: CreateFieldRequest.ts
                  type: file
                - name: CreateRelationship200Response.ts
                  type: file
                - name: CreateRelationshipRequest.ts
                  type: file
                - name: CreateTableRequest.ts
                  type: file
                - name: DeactivateUserToken200Response.ts
                  type: file
                - name: DeleteApp200Response.ts
                  type: file
                - name: DeleteAppRequest.ts
                  type: file
                - name: DeleteFields200Response.ts
                  type: file
                - name: DeleteFieldsRequest.ts
                  type: file
                - name: DeleteFile200Response.ts
                  type: file
                - name: DeleteRecords200Response.ts
                  type: file
                - name: DeleteRecordsRequest.ts
                  type: file
                - name: DeleteRelationship200Response.ts
                  type: file
                - name: DeleteTableResponse.ts
                  type: file
                - name: DenyUsers200Response.ts
                  type: file
                - name: ExchangeSsoToken200Response.ts
                  type: file
                - name: ExchangeSsoTokenRequest.ts
                  type: file
                - name: Field.ts
                  type: file
                - name: FieldPermissionsInner.ts
                  type: file
                - name: FieldProperties.ts
                  type: file
                - name: GenerateDocument200Response.ts
                  type: file
                - name: GetRelationships200Response.ts
                  type: file
                - name: GetRelationships200ResponseMetadata.ts
                  type: file
                - name: GetReport200Response.ts
                  type: file
                - name: GetTempTokenDBID200Response.ts
                  type: file
                - name: GetUsers200Response.ts
                  type: file
                - name: GetUsersRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200Response.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: file
                - name: PlatformAnalyticReads200Response.ts
                  type: file
                - name: Record.ts
                  type: file
                - name: RecordValue.ts
                  type: file
                - name: Relationship.ts
                  type: file
                - name: RelationshipField.ts
                  type: file
                - name: RemoveMembersFromGroup200Response.ts
                  type: file
                - name: RemoveSubgroupsFromGroup200Response.ts
                  type: file
                - name: ReportRunResponse.ts
                  type: file
                - name: RunFormula200Response.ts
                  type: file
                - name: RunFormulaRequest.ts
                  type: file
                - name: RunQueryRequest.ts
                  type: file
                - name: RunQueryRequestGroupByInner.ts
                  type: file
                - name: RunQueryRequestOptions.ts
                  type: file
                - name: RunQueryRequestSortByInner.ts
                  type: file
                - name: RunQueryResponse.ts
                  type: file
                - name: RunQueryResponseFieldsInner.ts
                  type: file
                - name: RunQueryResponseMetadata.ts
                  type: file
                - name: Table.ts
                  type: file
                - name: TransferUserToken200Response.ts
                  type: file
                - name: TransferUserTokenRequest.ts
                  type: file
                - name: UndenyUsers200Response.ts
                  type: file
                - name: UpdateRelationshipRequest.ts
                  type: file
                - name: UpdateTableRequest.ts
                  type: file
                - name: Upsert200Response.ts
                  type: file
                - name: Upsert200ResponseDataInnerValue.ts
                  type: file
                - name: Upsert200ResponseMetadata.ts
                  type: file
                - name: Upsert207Response.ts
                  type: file
                - name: Upsert207ResponseMetadata.ts
                  type: file
                - name: UpsertRequest.ts
                  type: file
                - name: index.ts
                  type: file
            - name: runtime.ts
              type: file
        - name: generated-unified
          type: directory
          children:
            - name: QuickbaseClient.ts
              type: file
        - name: index.ts
          type: file
        - name: log-gen.ts
          type: file
        - name: openapi-jars
          type: directory
          children:
            - name: openapi-generator-cli-7.12.0.jar
              type: file
        - name: quickbaseClient.ts
          type: file
        - name: tokenCache.ts
          type: file
    - name: test-artifacts
      type: directory
      children:
        - name: .last-run.json
          type: file
    - name: test-results.json
      type: file
    - name: tests
      type: directory
      children:
        - name: playwright
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: auth
                  type: directory
                  children:
                    - name: cacheSwitching.test.ts
                      type: file
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getAppWithUserToken.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: tokenPrefetch.test.ts
                      type: file
                    - name: tokenRenewal.test.ts
                      type: file
        - name: setup.ts
          type: file
        - name: vitest
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: deleteFields.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
            - name: unit
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/apps/copyApp.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";
                        import { CopyAppRequest, CopyApp200Response } from "@/generated/models";

                        describe("QuickbaseClient Unit - copyApp", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has copyApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.copyApp).toBe("function");
                          });

                          it("calls copyApp successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CopyAppRequest = {
                              name: "Copied App",
                              description: "A copy of the original app",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            const mockResponse: CopyApp200Response = {
                              id: "bpqe82s1",
                              name: "Copied App",
                              description: "A copy of the original app",
                              created: new Date("2025-03-11T10:00:00Z"), // Changed to Date object
                              updated: new Date("2025-03-11T10:00:00Z"), // Changed to Date object
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () =>
                                Promise.resolve({
                                  ...mockResponse,
                                  created: "2025-03-11T10:00:00Z", // API returns string
                                  updated: "2025-03-11T10:00:00Z", // API returns string
                                }),
                            });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("calls copyApp successfully with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CopyAppRequest = {
                              name: "Copied App with Temp Token",
                              description: "A copy using temp token",
                              properties: {
                                keepData: true,
                                excludeFiles: false,
                                usersAndRoles: true,
                                assignUserToken: false,
                              },
                            };

                            const mockResponse: CopyApp200Response = {
                              id: "bpqe82s2",
                              name: "Copied App with Temp Token",
                              description: "A copy using temp token",
                              created: new Date("2025-03-11T11:00:00Z"), // Changed to Date object
                              updated: new Date("2025-03-11T11:00:00Z"), // Changed to Date object
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: true,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({
                                    ...mockResponse,
                                    created: "2025-03-11T11:00:00Z", // API returns string
                                    updated: "2025-03-11T11:00:00Z", // API returns string
                                  }),
                              });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CopyAppRequest = {
                              name: "Retry Copied App",
                              description: "Retry after 401",
                              properties: {
                                keepData: false,
                                excludeFiles: true,
                                usersAndRoles: false,
                                assignUserToken: true,
                              },
                            };

                            const mockResponse: CopyApp200Response = {
                              id: "bpqe82s3",
                              name: "Retry Copied App",
                              description: "Retry after 401",
                              created: new Date("2025-03-11T12:00:00Z"), // Changed to Date object
                              updated: new Date("2025-03-11T12:00:00Z"), // Changed to Date object
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              ancestorId: QB_APP_ID,
                              dataClassification: "None",
                              variables: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({
                                    ...mockResponse,
                                    created: "2025-03-11T12:00:00Z", // API returns string
                                    updated: "2025-03-11T12:00:00Z", // API returns string
                                  }),
                              });

                            const result = await client.copyApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CopyAppRequest = {
                              name: "", // Invalid: name is required
                              description: "Invalid request",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Name is required" }),
                            });

                            await expect(
                              client.copyApp({ appId: QB_APP_ID, body: request })
                            ).rejects.toThrow("API Error: Name is required (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}/copy`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });
                        });
                    - name: createApp.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/apps/createApp.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";
                        import { CreateAppRequest, CreateApp200Response } from "@/generated/models";

                        describe("QuickbaseClient Unit - createApp", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has createApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.createApp).toBe("function");
                          });

                          it("calls createApp successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateAppRequest = {
                              name: "New App",
                              description: "A new app for testing",
                              assignToken: true,
                            };

                            const mockResponse: CreateApp200Response = {
                              id: "new-app-id",
                              name: "New App",
                              description: "A new app for testing",
                              created: new Date("2025-03-11T10:00:00Z"),
                              updated: new Date("2025-03-11T10:00:00Z"),
                              dateFormat: "MM-DD-YYYY",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              hasEveryoneOnTheInternet: false,
                              variables: [],
                              dataClassification: "None",
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () =>
                                Promise.resolve({
                                  ...mockResponse,
                                  created: "2025-03-11T10:00:00Z", // API returns string
                                  updated: "2025-03-11T10:00:00Z", // API returns string
                                }),
                            });

                            const result = await client.createApp({ body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: expect.stringContaining('"name":"New App"'),
                                credentials: "omit", // Added to match actual behavior
                              })
                            );
                            // Additional check to ensure body contains all properties regardless of order
                            const callArgs = mockFetch.mock.calls[0];
                            const body = JSON.parse(callArgs[1].body as string);
                            expect(body).toEqual(request);
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateAppRequest = {
                              name: "", // Invalid: name is required
                            };

                            mockFetch.mockImplementationOnce(() =>
                              Promise.resolve({
                                ok: false,
                                status: 400,
                                json: () => Promise.resolve({ message: "Name is required" }),
                              })
                            );

                            await expect(client.createApp({ body: request })).rejects.toThrow(
                              "API Error: Name is required (Status: 400)"
                            );

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit", // Added to match actual behavior
                              })
                            );
                          });
                        });
                    - name: deleteApp.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/apps/deleteApp.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";
                        import { DeleteAppRequest, DeleteApp200Response } from "@/generated/models";

                        describe("QuickbaseClient Unit - deleteApp", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                          });

                          it("has deleteApp method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(typeof client.deleteApp).toBe("function");
                          });

                          it("calls deleteApp successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteAppRequest = {
                              name: "App to Delete",
                            };

                            const mockResponse: DeleteApp200Response = {
                              deletedAppId: QB_APP_ID,
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.deleteApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("calls deleteApp successfully with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: DeleteAppRequest = {
                              name: "App to Delete with Temp Token",
                            };

                            const mockResponse: DeleteApp200Response = {
                              deletedAppId: QB_APP_ID,
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.deleteApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: DeleteAppRequest = {
                              name: "Retry Delete App",
                            };

                            const mockResponse: DeleteApp200Response = {
                              deletedAppId: QB_APP_ID,
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.deleteApp({ appId: QB_APP_ID, body: request });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_APP_ID}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteAppRequest = {
                              name: "Wrong Name", // Assuming this doesn’t match the app’s actual name
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid application name" }),
                            });

                            await expect(
                              client.deleteApp({ appId: QB_APP_ID, body: request })
                            ).rejects.toThrow("API Error: Invalid application name (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });
                        });
                    - name: getApp.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/apps/getApp.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - getApp", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true }); // Add debug: true for consistency
                          });

                          it("initializes without errors", () => {
                            expect(client).toBeDefined();
                          });

                          it("has getApp method", () => {
                            expect(typeof client.getApp).toBe("function");
                          });

                          it("calls getApp successfully", async () => {
                            mockFetch.mockImplementation((url: string, options: any) => {
                              console.log("Mock fetch:", url, options);
                              return Promise.resolve({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({
                                    id: QB_APP_ID,
                                    name: "qb-copy",
                                    created: "2025-02-13T18:22:33Z",
                                    updated: "2025-03-04T04:25:51Z",
                                    description: "",
                                    timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                                    dateFormat: "MM-DD-YYYY",
                                    hasEveryoneOnTheInternet: false,
                                    memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                                    securityProperties: {
                                      allowClone: false,
                                      allowExport: true,
                                      enableAppTokens: true,
                                      hideFromPublic: false,
                                      mustBeRealmApproved: false,
                                      useIPFilter: false,
                                    },
                                  }),
                              } as Response);
                            });

                            const result = await client.getApp({ appId: QB_APP_ID });
                            expect(result).toEqual({
                              id: QB_APP_ID,
                              name: "qb-copy",
                              created: new Date("2025-02-13T18:22:33Z"),
                              updated: new Date("2025-03-04T04:25:51Z"),
                              description: "",
                              timeZone: "(UTC-08:00) Pacific Time (US & Canada)",
                              dateFormat: "MM-DD-YYYY",
                              hasEveryoneOnTheInternet: false,
                              memoryInfo: { estMemory: 0, estMemoryInclDependentApps: 0 },
                              securityProperties: {
                                allowClone: false,
                                allowExport: true,
                                enableAppTokens: true,
                                hideFromPublic: false,
                                mustBeRealmApproved: false,
                                useIPFilter: false,
                              },
                            });
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/apps/${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                - name: auth
                  type: directory
                  children:
                    - name: fetchTempToken401.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/auth/fetchTempToken401.test.ts
                        import { describe, it, expect, beforeEach, vi } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - 401 with fetchTempToken 401", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });
                          });

                          it("fails without infinite loop when fetchTempToken returns 401 after initial 401", async () => {
                            let callCount = 0;

                            mockFetch.mockImplementation((url) => {
                              callCount++;
                              console.log(`Mock fetch call ${callCount}: ${url}`);
                              if (url.includes("auth/temporary") && callCount === 1) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () =>
                                    Promise.resolve({ temporaryAuthorization: "initial_token" }),
                                });
                              }
                              if (url.includes("fields") && callCount === 2) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  json: () => Promise.resolve({ message: "Unauthorized" }),
                                });
                              }
                              if (url.includes("auth/temporary") && callCount === 3) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  json: () =>
                                    Promise.resolve({ message: "Unauthorized in fetchTempToken" }),
                                });
                              }
                              return Promise.reject(new Error(`Unexpected fetch call: ${url}`));
                            });

                            const consoleSpy = vi.spyOn(console, "log");
                            await expect(client.getFields({ tableId: QB_TABLE_ID_1 })).rejects.toThrow(
                              "API Error: Unauthorized in fetchTempToken (Status: 401)"
                            );

                            expect(mockFetch).toHaveBeenCalledTimes(3);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`, // Removed &includeFieldPerms=false
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );

                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).not.toHaveBeenCalledWith(
                              "Retrying getFields with new token"
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                    - name: getTempToken.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/auth/getTempTokenDBID.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - getTempTokenDBID", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: false });
                          });

                          it("initializes without errors", () => {
                            expect(client).toBeDefined();
                          });

                          it("has getTempTokenDBID method", () => {
                            expect(typeof client.getTempTokenDBID).toBe("function");
                          });

                          it("fetches and caches temp token on first call", async () => {
                            const mockToken = "b123xyz_temp_token";

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                            });

                            const result = await client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 });
                            expect(result).toEqual({ temporaryAuthorization: mockToken });
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                          });

                          it("reuses cached temp token on second call", async () => {
                            const mockToken = "b123xyz_temp_token";

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                            });

                            const firstResult = await client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 });
                            expect(firstResult).toEqual({ temporaryAuthorization: mockToken });
                            expect(mockFetch).toHaveBeenCalledTimes(1);

                            mockFetch.mockClear();
                            const secondResult = await client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 });
                            expect(secondResult).toEqual({ temporaryAuthorization: mockToken });
                            expect(mockFetch).not.toHaveBeenCalled();
                          });

                          it("handles API error", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 401,
                              json: () => Promise.resolve({ message: "Unauthorized" }),
                            });

                            await expect(
                              client.getTempTokenDBID({ dbid: QB_TABLE_ID_1 })
                            ).rejects.toSatisfy((error: Error) => {
                              expect(error).toBeInstanceOf(Error);
                              expect(error.message).toBe("API Error: Unauthorized (Status: 401)");
                              return true;
                            });
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                          });
                        });
                    - name: retryOn401.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/auth/retryOn401.test.ts
                        import { describe, it, expect, beforeEach, vi } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - 401 Retry Creates New Token", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });
                          });

                          it("creates a new token on 401 and retries successfully", async () => {
                            const mockToken = "new_token_456";
                            const mockFields = [{ id: 1, label: "Field1" }];
                            let callCount = 0;

                            mockFetch.mockImplementation((url) => {
                              callCount++;
                              console.log(`Mock fetch call ${callCount}: ${url}`);
                              if (url.includes("auth/temporary") && callCount === 1) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                                });
                              }
                              if (url.includes("fields") && callCount === 2) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  text: () => Promise.resolve("Unauthorized"),
                                });
                              }
                              if (url.includes("auth/temporary") && callCount === 3) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () =>
                                    Promise.resolve({ temporaryAuthorization: mockToken + "_retry" }),
                                });
                              }
                              if (url.includes("fields") && callCount === 4) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () => Promise.resolve(mockFields),
                                });
                              }
                              return Promise.reject(new Error(`Unexpected fetch call: ${url}`));
                            });

                            const consoleSpy = vi.spyOn(console, "log");
                            const result = await client.getFields({ tableId: QB_TABLE_ID_1 });

                            expect(result).toEqual(mockFields);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`, // Removed &includeFieldPerms=false
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`, // Removed &includeFieldPerms=false
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                }),
                              })
                            );

                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              `Fetched and cached new token for dbid: ${QB_TABLE_ID_1}`,
                              mockToken + "_retry",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying getFields with new token"
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                    - name: two401s.test.ts
                      type: file
                      contents: |
                        import { describe, it, expect, beforeEach, vi } from "vitest";
                        import { createClient, mockFetch } from "@tests/setup.ts";

                        describe("QuickbaseClient - Two 401s in a Row", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });
                          });

                          it("logs an error after two 401s in a row", async () => {
                            const mockDbid = "mockDbid123";
                            const mockToken = "new_token_456";
                            let callCount = 0;

                            mockFetch.mockImplementation((url) => {
                              callCount++;
                              console.log(`Mock fetch call ${callCount}: ${url}`);
                              if (url.includes("auth/temporary") && callCount === 1) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () => Promise.resolve({ temporaryAuthorization: mockToken }),
                                });
                              }
                              if (url.includes("fields") && callCount === 2) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  text: () => Promise.resolve("Unauthorized"),
                                });
                              }
                              if (url.includes("auth/temporary") && callCount === 3) {
                                return Promise.resolve({
                                  ok: true,
                                  status: 200,
                                  json: () =>
                                    Promise.resolve({ temporaryAuthorization: mockToken + "_retry" }),
                                });
                              }
                              if (url.includes("fields") && callCount === 4) {
                                return Promise.resolve({
                                  ok: false,
                                  status: 401,
                                  json: () => Promise.resolve({ message: "Unauthorized again" }), // Changed to json()
                                  text: () => Promise.resolve("Unauthorized again"), // Keep text() for fallback
                                });
                              }
                              return Promise.reject(new Error(`Unexpected fetch call: ${url}`));
                            });

                            const consoleSpy = vi.spyOn(console, "log");
                            await expect(client.getFields({ tableId: mockDbid })).rejects.toThrow(
                              "API Error: Unauthorized again (Status: 401)"
                            );

                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for getFields, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Fetched and cached new token for dbid: mockDbid123",
                              mockToken + "_retry",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying getFields with new token"
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Error response body for getFields:",
                              { message: "Unauthorized again" }
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/fields/createField.test.ts
                        import { describe, it, expect, beforeEach, vi } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";
                        import { CreateFieldRequest, CreateField200Response } from "@/generated/models";

                        describe("QuickbaseClient Unit - createField", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors and has createField method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                            expect(typeof client.createField).toBe("function");
                          });

                          it("creates a field successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateFieldRequest = {
                              label: "TestField",
                              fieldType: "text",
                              fieldHelp: "A test field",
                              addToForms: true,
                              permissions: [
                                { role: "Viewer", permissionType: "View", roleId: 10 },
                                { role: "Administrator", permissionType: "Modify", roleId: 12 },
                              ],
                            };

                            const mockResponse: CreateField200Response = {
                              id: 100,
                              label: "TestField",
                              fieldType: "text",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: true,
                              findEnabled: true,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "A test field",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [
                                { permissionType: "View", role: "Viewer", roleId: 10 },
                                { permissionType: "Modify", role: "Administrator", roleId: 12 },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "omit",
                                body: expect.any(String), // Allow any string for body
                              })
                            );

                            // Additional check to ensure the body matches the request object, ignoring property order
                            const callArgs = mockFetch.mock.calls[0];
                            const receivedBody = JSON.parse(callArgs[1].body as string);
                            expect(receivedBody).toEqual(request);
                          });

                          it("creates a field successfully with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CreateFieldRequest = {
                              label: "TempField",
                              fieldType: "numeric",
                              addToForms: false,
                            };

                            const mockResponse: CreateField200Response = {
                              id: 101,
                              label: "TempField",
                              fieldType: "numeric",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: true,
                              findEnabled: true,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const result = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CreateFieldRequest = {
                              label: "RetryField",
                              fieldType: "checkbox",
                            };

                            const mockResponse: CreateField200Response = {
                              id: 102,
                              label: "RetryField",
                              fieldType: "checkbox",
                              mode: "",
                              noWrap: false,
                              bold: false,
                              required: false,
                              appearsByDefault: true,
                              findEnabled: true,
                              unique: false,
                              doesDataCopy: false,
                              fieldHelp: "",
                              audited: false,
                              properties: {
                                primaryKey: false,
                                foreignKey: false,
                                numLines: 1,
                                maxLength: 0,
                                appendOnly: false,
                                allowHTML: false,
                                allowMentions: false,
                                sortAsGiven: false,
                                carryChoices: true,
                                allowNewChoices: false,
                                formula: "",
                                defaultValue: "",
                              },
                              permissions: [],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const consoleSpy = vi.spyOn(console, "log");
                            const result = await client.createField({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for createField, refreshing token:",
                              expect.any(String)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Retrying createField with new token"
                            );
                            consoleSpy.mockRestore();
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: CreateFieldRequest = {
                              label: "", // Invalid: label is required
                              fieldType: "text",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Label is required" }),
                            });

                            await expect(
                              client.createField({ tableId: QB_TABLE_ID_1, body: request })
                            ).rejects.toThrow("API Error: Label is required (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                              })
                            );
                          });

                          it("handles 401 with failed temp token retry", async () => {
                            client = createClient(mockFetch, { useTempTokens: true, debug: true });

                            const request: CreateFieldRequest = {
                              label: "FailField",
                              fieldType: "text",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () =>
                                  Promise.resolve({ message: "Unauthorized in fetchTempToken" }),
                              });

                            const consoleSpy = vi.spyOn(console, "log");
                            await expect(
                              client.createField({ tableId: QB_TABLE_ID_1, body: request })
                            ).rejects.toThrow(
                              "API Error: Unauthorized in fetchTempToken (Status: 401)"
                            );

                            expect(mockFetch).toHaveBeenCalledTimes(3);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(consoleSpy).toHaveBeenCalledWith(
                              "Authorization error for createField, refreshing token:",
                              expect.any(String)
                            );
                            consoleSpy.mockRestore();
                          });
                        });
                    - name: deleteFields.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/fields/deleteFields.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";
                        import {
                          DeleteFieldsRequest,
                          DeleteFields200Response,
                        } from "@/generated/models";

                        describe("QuickbaseClient Unit - deleteFields", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("initializes without errors and has deleteFields method", () => {
                            client = createClient(mockFetch, { debug: true });
                            expect(client).toBeDefined();
                            expect(typeof client.deleteFields).toBe("function");
                          });

                          it("deletes fields successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteFieldsRequest = {
                              fieldIds: [6, 7, 8],
                            };

                            const mockResponse: DeleteFields200Response = {
                              deletedFieldIds: [6, 7, 8],
                              errors: [],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.deleteFields({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });

                          it("handles partial success with errors", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteFieldsRequest = {
                              fieldIds: [6, 7, 8],
                            };

                            const mockResponse: DeleteFields200Response = {
                              deletedFieldIds: [6, 8],
                              errors: ["Error found with fid: 7"],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.deleteFields({
                              tableId: QB_TABLE_ID_1,
                              body: request,
                            });

                            expect(result).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });

                          it("handles 400 error for invalid request", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const request: DeleteFieldsRequest = {
                              fieldIds: [], // Invalid: empty fieldIds array
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () =>
                                Promise.resolve({
                                  message: "Invalid input",
                                  description: "Field IDs list cannot be empty.",
                                }),
                            });

                            await expect(
                              client.deleteFields({ tableId: QB_TABLE_ID_1, body: request })
                            ).rejects.toThrow("API Error: Invalid input (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(request),
                                credentials: "omit",
                              })
                            );
                          });
                        });
                    - name: getFields.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/fields/getFields.test.ts
                        import { describe, it, expect } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - getFields", () => {
                          it("calls getFields successfully", async () => {
                            mockFetch.mockImplementation((url: string, options: any) => {
                              console.log("Mock fetch for getFields:", url, options);
                              return Promise.resolve({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve([
                                    {
                                      id: 1,
                                      label: "Field1",
                                      fieldType: "text",
                                      noWrap: false,
                                      bold: false,
                                      required: false,
                                      appearsByDefault: false,
                                      findEnabled: false,
                                      unique: false,
                                      doesDataCopy: false,
                                      fieldHelp: "field help",
                                      audited: false,
                                      properties: {
                                        primaryKey: false,
                                        foreignKey: false,
                                        numLines: 1,
                                        maxLength: 0,
                                        appendOnly: false,
                                        allowHTML: false,
                                        allowMentions: false,
                                        sortAsGiven: false,
                                        carryChoices: true,
                                        allowNewChoices: false,
                                        formula: "",
                                        defaultValue: "",
                                      },
                                      permissions: [
                                        { permissionType: "View", role: "Viewer", roleId: 10 },
                                        { permissionType: "None", role: "Participant", roleId: 11 },
                                        { permissionType: "Modify", role: "Administrator", roleId: 12 },
                                      ],
                                    },
                                  ]),
                              } as Response);
                            });

                            const client = createClient(mockFetch, { debug: true }); // Add debug: true for consistency
                            const result = await client.getFields({
                              tableId: QB_TABLE_ID_1,
                              includeFieldPerms: true,
                            });
                            console.log("getFields response:", result);
                            expect(result).toEqual(
                              expect.arrayContaining([
                                expect.objectContaining({
                                  id: 1,
                                  label: "Field1",
                                  fieldType: "text",
                                  noWrap: false,
                                  bold: false,
                                  required: false,
                                  appearsByDefault: false,
                                  findEnabled: false,
                                  unique: false,
                                  doesDataCopy: false,
                                  fieldHelp: "field help",
                                  audited: false,
                                  properties: expect.objectContaining({
                                    primaryKey: false,
                                    foreignKey: false,
                                    numLines: 1,
                                    maxLength: 0,
                                    appendOnly: false,
                                    allowHTML: false,
                                    allowMentions: false,
                                    sortAsGiven: false,
                                    carryChoices: true,
                                    allowNewChoices: false,
                                    formula: "",
                                    defaultValue: "",
                                  }),
                                  permissions: expect.arrayContaining([
                                    expect.objectContaining({
                                      permissionType: "View",
                                      role: "Viewer",
                                      roleId: 10,
                                    }),
                                    expect.objectContaining({
                                      permissionType: "None",
                                      role: "Participant",
                                      roleId: 11,
                                    }),
                                    expect.objectContaining({
                                      permissionType: "Modify",
                                      role: "Administrator",
                                      roleId: 12,
                                    }),
                                  ]),
                                }),
                              ])
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/fields?tableId=${QB_TABLE_ID_1}&includeFieldPerms=true`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                - name: index.ts
                  type: file
                  contents: |
                    // tests/vitest/unit/index.ts
                    // Apps
                    export * from "./apps/copyApp.test.ts";
                    export * from "./apps/createApp.test.ts";
                    export * from "./apps/deleteApp.test.ts";
                    export * from "./apps/getApp.test.ts";

                    // Auth
                    export * from "./auth/fetchTempToken401.test.ts";
                    export * from "./auth/getTempToken.test.ts";
                    export * from "./auth/retryOn401.test.ts";
                    export * from "./auth/two401s.test.ts";

                    // Fields
                    export * from "./fields/getFields.test.ts";
                    export * from "./fields/createField.test.ts";
                    export * from "./fields/deleteFields.test.ts";

                    // Records
                    export * from "./records/deleteRecords.test.ts";
                    export * from "./records/runQuery.test.ts";
                    export * from "./records/upsert.test.ts";

                    // Tables
                    export * from "./tables/createTable.test.ts";
                    export * from "./tables/deleteTable.test.ts";
                    export * from "./tables/getAppTables.test.ts";
                    export * from "./tables/getRelationships.test.ts";
                    export * from "./tables/getTable.test.ts";
                    export * from "./tables/updateTable.test.ts";
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/records/deleteRecords.test.ts
                        import { describe, expect, test, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - deleteRecords", () => {
                          let qb: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            qb = createClient(mockFetch, { debug: true }); // Use debug: true for consistency with other tests
                          });

                          test("sends correct DELETE request and handles success", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ numberDeleted: 1 }),
                            });

                            const result = await qb.deleteRecords({
                              body: {
                                from: QB_TABLE_ID_1,
                                where: "{3.EX.'5'}", // Simulate deleting Record ID 5
                              },
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({ from: QB_TABLE_ID_1, where: "{3.EX.'5'}" }),
                              })
                            );
                            expect(result).toEqual({ numberDeleted: 1 });
                          });

                          test("handles no records deleted", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve({ numberDeleted: 0 }),
                            });

                            const result = await qb.deleteRecords({
                              body: {
                                from: QB_TABLE_ID_1,
                                where: "{3.EX.'999999'}", // Non-existent Record ID
                              },
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  from: QB_TABLE_ID_1,
                                  where: "{3.EX.'999999'}",
                                }),
                              })
                            );
                            expect(result).toEqual({ numberDeleted: 0 });
                          });

                          test("throws error on API failure", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid query" }),
                            });

                            await expect(() =>
                              qb.deleteRecords({
                                body: {
                                  from: QB_TABLE_ID_1,
                                  where: "{3.EX.'invalid'}",
                                },
                              })
                            ).rejects.toThrow("API Error: Invalid query (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  from: QB_TABLE_ID_1,
                                  where: "{3.EX.'invalid'}",
                                }),
                              })
                            );
                          });
                        });
                    - name: runQuery.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/records/runQuery.test.ts
                        import { describe, test, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";
                        import { RunQueryRequest, RunQueryResponse } from "@/generated";

                        describe("QuickbaseClient Unit - runQuery", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          test("sends correct POST request and handles successful query response", async () => {
                            const queryRequest: RunQueryRequest = {
                              from: QB_TABLE_ID_1,
                              select: [3, 6, 7],
                              where: "{6.EX.'Task 1'}",
                              sortBy: [{ fieldId: 6, order: "ASC" }],
                              groupBy: [{ fieldId: 7, grouping: "equal-values" }],
                              options: { skip: 0, top: 100, compareWithAppLocalTime: false },
                            };

                            const mockResponse: RunQueryResponse = {
                              data: [
                                { "3": { value: 1 }, "6": { value: "Task 1" }, "7": { value: "High" } },
                              ],
                              fields: [
                                { id: 3, label: "Record ID#", type: "recordid" },
                                { id: 6, label: "Task Name", type: "text" },
                                { id: 7, label: "Priority", type: "text" },
                              ],
                              metadata: {
                                numFields: 3,
                                numRecords: 1,
                                skip: 0,
                                top: 100,
                                totalRecords: 1,
                              },
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.runQuery({ body: queryRequest });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records/query",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(queryRequest),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                          });

                          test("handles API error with invalid query", async () => {
                            const invalidQueryRequest = {
                              from: QB_TABLE_ID_1,
                              select: [3],
                              where: "{999.EX.'Invalid'}", // Invalid field ID
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid query" }),
                            });

                            await expect(
                              client.runQuery({ body: invalidQueryRequest })
                            ).rejects.toThrow("API Error: Invalid query (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records/query",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(invalidQueryRequest),
                              })
                            );
                          });
                        });
                    - name: upsert.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/records/upsert.test.ts
                        import { describe, expect, test, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";
                        import { vi } from "vitest";

                        // Note: Type augmentation moved to src/types.d.ts
                        describe("QuickbaseClient Unit - upsert", () => {
                          beforeEach(() => {
                            vi.resetModules(); // Reset module cache
                            mockFetch.mockClear();
                          });

                          test("sends correct POST request and handles successful upsert", async () => {
                            const qb = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () =>
                                Promise.resolve({
                                  data: [{ id: 1, "6": { value: "value1" } }],
                                  metadata: {
                                    createdRecordIds: [1],
                                    updatedRecordIds: [],
                                    unchangedRecordIds: [],
                                    totalNumberOfRecordsProcessed: 1,
                                  },
                                }),
                            });

                            console.log("[Test] Calling qb.upsert with:", {
                              body: { to: QB_TABLE_ID_1, data: [{ "6": { value: "value1" } }] },
                            });
                            const result = await qb.upsert({
                              body: { to: QB_TABLE_ID_1, data: [{ "6": { value: "value1" } }] },
                            });

                            console.log("[Test] mockFetch calls:", mockFetch.mock.calls);
                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "6": { value: "value1" } }],
                                }),
                              })
                            );

                            expect(result).toEqual({
                              data: [{ id: 1, "6": { value: "value1" } }],
                              metadata: {
                                createdRecordIds: [1],
                                updatedRecordIds: [],
                                unchangedRecordIds: [],
                                totalNumberOfRecordsProcessed: 1,
                              },
                            });
                          });

                          test("handles API error with invalid data", async () => {
                            const qb = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 400,
                              json: () => Promise.resolve({ message: "Invalid data format" }),
                            });

                            await expect(
                              qb.upsert({
                                body: { to: QB_TABLE_ID_1, data: [{ "999": { value: "invalid" } }] },
                              })
                            ).rejects.toThrow("API Error: Invalid data format (Status: 400)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "999": { value: "invalid" } }],
                                }),
                              })
                            );
                          });

                          test("handles upsert with temp token", async () => {
                            const qb = createClient(mockFetch, { useTempTokens: true, debug: true });

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp-token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({
                                    data: [{ id: 2, "7": { value: "value2" } }],
                                    metadata: {
                                      createdRecordIds: [2],
                                      updatedRecordIds: [],
                                      unchangedRecordIds: [],
                                      totalNumberOfRecordsProcessed: 1,
                                    },
                                  }),
                              });

                            const result = await qb.upsert({
                              body: { to: QB_TABLE_ID_1, data: [{ "7": { value: "value2" } }] },
                              dbid: QB_TABLE_ID_1, // Use QB_TABLE_ID_1 as dbid for temp token
                            } as any); // Temporary type assertion until types.d.ts is applied

                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  "Content-Type": "application/json",
                                }),
                                credentials: "include",
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp-token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "7": { value: "value2" } }],
                                }),
                              })
                            );

                            expect(result).toEqual({
                              data: [{ id: 2, "7": { value: "value2" } }],
                              metadata: {
                                createdRecordIds: [2],
                                updatedRecordIds: [],
                                unchangedRecordIds: [],
                                totalNumberOfRecordsProcessed: 1,
                              },
                            });
                          });

                          test("sends correct POST request with data fields", async () => {
                            const qb = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () =>
                                Promise.resolve({
                                  data: [{ id: 1, "6": { value: "value1" } }],
                                  metadata: {
                                    createdRecordIds: [1],
                                    updatedRecordIds: [],
                                    unchangedRecordIds: [],
                                    totalNumberOfRecordsProcessed: 1,
                                  },
                                }),
                            });

                            const result = await qb.upsert({
                              body: { to: QB_TABLE_ID_1, data: [{ "6": { value: "value1" } }] },
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              "https://api.quickbase.com/v1/records",
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify({
                                  to: QB_TABLE_ID_1,
                                  data: [{ "6": { value: "value1" } }],
                                }),
                              })
                            );

                            if (result.data && result.data.length > 0) {
                              expect((result.data[0]["6"] as { value: any }).value).toBe("value1");
                            } else {
                              throw new Error("Expected data array to have at least one element");
                            }
                          });
                        });
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/records/createTable.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - createTable", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("calls createTable successfully with user token", async () => {
                            const mockBody = {
                              name: "TestTable",
                              description: "Unit test table",
                              singleRecordName: "Test",
                              pluralRecordName: "Tests",
                            };
                            const mockResponse = {
                              id: "newly-created-table-id-1234567890", // Changed from "buya8h9iz"
                              name: "TestTable",
                              alias: "_DBID_TESTTABLE",
                              description: "Unit test table",
                              created: new Date("2025-03-10T21:00:00.000Z"),
                              updated: new Date("2025-03-10T21:00:00.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Test",
                              pluralRecordName: "Tests",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const response = await client.createTable({
                              appId: QB_APP_ID,
                              body: mockBody,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(1);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "Content-Type": "application/json",
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                                body: JSON.stringify(mockBody),
                              })
                            );
                          });
                        });
                    - name: deleteTable.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/records/deleteTable.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_TABLE_ID_1,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - deleteTable", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("calls deleteTable successfully with user token", async () => {
                            const mockResponse = {
                              deletedTableId: QB_TABLE_ID_1,
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const response = await client.deleteTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(1);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "Content-Type": "application/json",
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });

                          it("handles 404 error for non-existent table", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () =>
                                Promise.resolve({
                                  message: "Invalid DBID",
                                  description: "Table not found in app.",
                                }),
                            });

                            await expect(
                              client.deleteTable({ tableId: QB_TABLE_ID_1, appId: QB_APP_ID })
                            ).rejects.toThrow("API Error: Invalid DBID (Status: 404)");
                            expect(mockFetch).toHaveBeenCalledTimes(1);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "DELETE",
                                headers: expect.objectContaining({
                                  "Content-Type": "application/json",
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                    - name: getAppTables.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/tables/getAppTables.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - getAppTables", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true }); // Add debug: true for consistency
                          });

                          it("calls getAppTables successfully", async () => {
                            mockFetch.mockImplementation((url: string, options: any) => {
                              console.log("Mock fetch for getAppTables:", url, options);
                              return Promise.resolve({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve([
                                    {
                                      id: "buwai2zr4",
                                      name: "Root",
                                      alias: "_DBID_ROOT",
                                      description: "",
                                      created: new Date("2025-02-13T18:22:33.000Z"),
                                      updated: new Date("2025-02-13T18:22:34.000Z"),
                                      nextRecordId: 1,
                                      nextFieldId: 6,
                                      defaultSortFieldId: 2,
                                      defaultSortOrder: "DESC",
                                      keyFieldId: 3,
                                      singleRecordName: "Root",
                                      pluralRecordName: "Roots",
                                      sizeLimit: "500 MB",
                                      spaceUsed: "0 KB",
                                      spaceRemaining: "500 MB",
                                    },
                                  ]),
                              } as Response);
                            });

                            const result = await client.getAppTables({ appId: QB_APP_ID });
                            console.log("getAppTables response:", result);
                            expect(result).toEqual(
                              expect.arrayContaining([
                                expect.objectContaining({
                                  id: "buwai2zr4",
                                  name: "Root",
                                  alias: "_DBID_ROOT",
                                  description: "",
                                  created: new Date("2025-02-13T18:22:33.000Z"),
                                  updated: new Date("2025-02-13T18:22:34.000Z"),
                                  nextRecordId: 1,
                                  nextFieldId: 6,
                                  defaultSortFieldId: 2,
                                  defaultSortOrder: "DESC",
                                  keyFieldId: 3,
                                  singleRecordName: "Root",
                                  pluralRecordName: "Roots",
                                  sizeLimit: "500 MB",
                                  spaceUsed: "0 KB",
                                  spaceRemaining: "500 MB",
                                }),
                              ])
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });
                        });
                    - name: getRelationships.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/relationships/getRelationships.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_REALM,
                          QB_USER_TOKEN,
                          QB_TABLE_ID_1,
                          QB_TABLE_ID_2,
                        } from "@tests/setup.ts";
                        import { GetRelationships200Response } from "/home/drew/Projects/quickbase-js/src/generated/models";

                        describe("QuickbaseClient Unit - getRelationships", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true }); // Consistent with output
                          });

                          it("initializes without errors", () => {
                            expect(client).toBeDefined();
                          });

                          it("has getRelationships method", () => {
                            expect(typeof client.getRelationships).toBe("function");
                          });

                          it("sends correct GET request and handles successful response", async () => {
                            const mockResponse: GetRelationships200Response = {
                              metadata: {
                                numRelationships: 1,
                                skip: 0,
                                totalRelationships: 1,
                              },
                              relationships: [
                                {
                                  id: 6,
                                  parentTableId: QB_TABLE_ID_1, // Parent table
                                  childTableId: QB_TABLE_ID_2, // Child table
                                  foreignKeyField: {
                                    id: 6,
                                    label: "Related record",
                                    type: "numeric",
                                  },
                                  isCrossApp: false,
                                  lookupFields: [
                                    {
                                      id: 3,
                                      label: "Name",
                                      type: "text",
                                    },
                                  ],
                                  summaryFields: [
                                    {
                                      id: 8,
                                      label: "my summary field",
                                      type: "numeric",
                                    },
                                  ],
                                },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getRelationships({
                              tableId: QB_TABLE_ID_2,
                              skip: 0,
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                            expect(result.metadata.numRelationships).toBe(1);
                            expect(result.relationships).toHaveLength(1);
                            expect(result.relationships[0].id).toBe(6);
                            expect(result.relationships[0].foreignKeyField.label).toBe(
                              "Related record"
                            );
                          });

                          it("handles request without skip parameter", async () => {
                            const mockResponse: GetRelationships200Response = {
                              metadata: {
                                numRelationships: 1,
                                skip: 0,
                                totalRelationships: 1,
                              },
                              relationships: [
                                {
                                  id: 6,
                                  parentTableId: QB_TABLE_ID_1,
                                  childTableId: QB_TABLE_ID_2,
                                  foreignKeyField: {
                                    id: 6,
                                    label: "Related record",
                                    type: "numeric",
                                  },
                                  isCrossApp: false,
                                  lookupFields: [],
                                  summaryFields: [],
                                },
                              ],
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const result = await client.getRelationships({
                              tableId: QB_TABLE_ID_2, // Corrected from QB_TABLE_ID_1
                            });

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                          });

                          it("handles API error response", async () => {
                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () => Promise.resolve({ message: "Table not found" }),
                            });

                            await expect(
                              client.getRelationships({
                                tableId: QB_TABLE_ID_2, // Corrected from QB_TABLE_ID_1
                                skip: 0,
                              })
                            ).rejects.toThrow("API Error: Table not found (Status: 404)");

                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                  "Content-Type": "application/json",
                                }),
                              })
                            );
                          });

                          it("retries with temp token after 401", async () => {
                            const mockResponse: GetRelationships200Response = {
                              metadata: {
                                numRelationships: 1,
                                skip: 0,
                                totalRelationships: 1,
                              },
                              relationships: [
                                {
                                  id: 6,
                                  parentTableId: QB_TABLE_ID_1,
                                  childTableId: QB_TABLE_ID_2,
                                  foreignKeyField: {
                                    id: 6,
                                    label: "Related record",
                                    type: "numeric",
                                  },
                                  isCrossApp: false,
                                },
                              ],
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const tempClient = createClient(mockFetch, {
                              useTempTokens: true,
                              debug: true,
                            });
                            const result = await tempClient.getRelationships({
                              tableId: QB_TABLE_ID_2,
                              skip: 0,
                            });

                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              1,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_2}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              2,
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN initial_token",
                                }),
                              })
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              3,
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_2}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenNthCalledWith(
                              4,
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_2}/relationships?skip=0`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );

                            expect(result).toEqual(mockResponse);
                          });
                        });
                    - name: getTable.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/tables/getTable.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_TABLE_ID_1,
                          QB_REALM,
                          QB_USER_TOKEN,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - getTable", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                          });

                          it("calls getTable successfully with user token", async () => {
                            client = createClient(mockFetch, { debug: true });

                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Root",
                              alias: "_DBID_ROOT",
                              description: "",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-02-13T18:22:34.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch.mockResolvedValueOnce({
                              ok: true,
                              status: 200,
                              json: () => Promise.resolve(mockResponse),
                            });

                            const response = await client.getTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });

                          it("calls getTable successfully with temp token", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Root",
                              alias: "_DBID_ROOT",
                              description: "",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-02-13T18:22:34.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const response = await client.getTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                }),
                              })
                            );
                          });

                          it("retries successfully after 401 with temp token", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Root",
                              alias: "_DBID_ROOT",
                              description: "",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-02-13T18:22:34.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "new_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const response = await client.getTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(4);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                headers: expect.objectContaining({
                                  Authorization: "QB-TEMP-TOKEN new_token",
                                }),
                              })
                            );
                          });

                          it("handles 401 with failed temp token retry", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () =>
                                  Promise.resolve({ temporaryAuthorization: "initial_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () => Promise.resolve({ message: "Unauthorized" }),
                              })
                              .mockResolvedValueOnce({
                                ok: false,
                                status: 401,
                                json: () =>
                                  Promise.resolve({ message: "Unauthorized in fetchTempToken" }),
                              });

                            await expect(
                              client.getTable({ tableId: QB_TABLE_ID_1, appId: QB_APP_ID })
                            ).rejects.toThrow(
                              "API Error: Unauthorized in fetchTempToken (Status: 401)"
                            );
                            expect(mockFetch).toHaveBeenCalledTimes(3);
                          });

                          it("handles 404 Not Found", async () => {
                            client = createClient(mockFetch, { debug: true });

                            mockFetch.mockResolvedValueOnce({
                              ok: false,
                              status: 404,
                              json: () => Promise.resolve({ message: "Table not found" }),
                            });

                            await expect(
                              client.getTable({ tableId: QB_TABLE_ID_1, appId: QB_APP_ID })
                            ).rejects.toThrow("API Error: Table not found (Status: 404)");
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "GET",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${QB_REALM}.quickbase.com`,
                                  Authorization: `QB-USER-TOKEN ${QB_USER_TOKEN}`,
                                }),
                              })
                            );
                          });
                        });
                    - name: updateTable.test.ts
                      type: file
                      contents: |
                        // tests/vitest/unit/records/updateTable.test.ts
                        import { describe, it, expect, beforeEach } from "vitest";
                        import {
                          createClient,
                          mockFetch,
                          QB_APP_ID,
                          QB_TABLE_ID_1,
                        } from "@tests/setup.ts";

                        describe("QuickbaseClient Unit - updateTable", () => {
                          let client: ReturnType<typeof createClient>;

                          beforeEach(() => {
                            mockFetch.mockClear();
                            client = createClient(mockFetch, { debug: true });
                          });

                          it("calls updateTable successfully with temp token", async () => {
                            client = createClient(mockFetch, { debug: true, useTempTokens: true });

                            const mockBody = {
                              name: "Updated Root",
                              description: "Updated description",
                            };
                            const mockResponse = {
                              id: QB_TABLE_ID_1,
                              name: "Updated Root",
                              alias: "_DBID_ROOT",
                              description: "Updated description",
                              created: new Date("2025-02-13T18:22:33.000Z"),
                              updated: new Date("2025-03-10T12:00:00.000Z"),
                              nextRecordId: 1,
                              nextFieldId: 6,
                              defaultSortFieldId: 2,
                              defaultSortOrder: "DESC",
                              keyFieldId: 3,
                              singleRecordName: "Root",
                              pluralRecordName: "Roots",
                              sizeLimit: "500 MB",
                              spaceUsed: "0 KB",
                              spaceRemaining: "500 MB",
                            };

                            mockFetch
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve({ temporaryAuthorization: "temp_token" }),
                              })
                              .mockResolvedValueOnce({
                                ok: true,
                                status: 200,
                                json: () => Promise.resolve(mockResponse),
                              });

                            const response = await client.updateTable({
                              tableId: QB_TABLE_ID_1,
                              appId: QB_APP_ID,
                              body: mockBody,
                            });
                            expect(response).toEqual(mockResponse);
                            expect(mockFetch).toHaveBeenCalledTimes(2);
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/auth/temporary/${QB_TABLE_ID_1}`,
                              expect.any(Object)
                            );
                            expect(mockFetch).toHaveBeenCalledWith(
                              `https://api.quickbase.com/v1/tables/${QB_TABLE_ID_1}?appId=${QB_APP_ID}`,
                              expect.objectContaining({
                                method: "POST",
                                headers: expect.objectContaining({
                                  "QB-Realm-Hostname": `${process.env.QB_REALM}.quickbase.com`,
                                  Authorization: "QB-TEMP-TOKEN temp_token",
                                  "Content-Type": "application/json",
                                }),
                                body: JSON.stringify(mockBody),
                              })
                            );
                          });
                        });
    - name: text.txt
      type: file
    - name: tsconfig.json
      type: file
    - name: versionrc.json
      type: file
    - name: vitest.config.ts
      type: file
