project: quickbase-js
date: 3/11/2025
root: /home/drew/Projects/quickbase-js
goals:
  - A library for interacting with the QuickBase RESTful API.
  - Use OpenAPI to generate types and methods using a proxy. Validate with tests.
  - Provide robust and intuitive temporary token support for browser environments.
  - User Tokens support both Node.js and browser environments.
  - 'Use case: JS frameworks like React, Vue, and Angular hosted in QuickBase code pages.'
  - Enable a flexible or native fetch in the browser.
  - Enable a flexible fetch framework in Node.js.
  - '#'
  - No manual updating methods when the QuickBase API changes.
  - The proxy magic dynamically maps generated methods and types.
  - '#'
  - TokenCache is defined per quickbaseClient call, so each instance has its own isolated TokenCache.
  - Each quickbase client instance has an isolated and individual token cache.
pipelineOverview:
  - 'fix-spec-main.ts: Input: Reads the latest QuickBase_RESTful*.json file from the specs/ folder and applies fixes to the parameters and paths.'
  - filters out the QB-Realm-Hostname, Authorization, and User-Agent parameters.
  - Converts parameter names to camelCase.
  - Fixes array schemas and applies custom paths.
  - Merges paths from fix-spec-paths.ts and definitions from fix-spec-definitions.ts.
  - 'Output: writes quickbase-fixed.json to src/code-generation/output/.'
  - 'Key Behavior: The merge (spec.paths = { ...spec.paths, ...paths }) preserves all origional endpoints, only overriding those defined in fix-spec-paths.ts.'
  - '#'
  - 'regenerate-client.ts: Uses quickbase-fixed.json to generate raw TypeScript-fetch files (src/generated/). including models and APIs.'
  - '#'
  - 'generate-unified-interface.ts: Uses quickbase-fixed.json to generate a unified QuickbaseClient.ts interface in src/generated-unified/.'
  - QuickbaseClient.ts includes all endpoints from src/code-generation/output/quickbase-fixed, and types from src/generated.
  - '#'
  - /specs/QuickBase_RESTful_API_*.json is over 46k lines of JSON, so it's not included in the snapshot, its too large to give to an AI.
  - which creates difficulties in understanding the structure of the API.
  - It makes it difficult to model the src/code-generation/fix-spec-*.ts files in the snapshot.
  - '#'
  - vitest unit and integration tests. Integration tests use the real QuickBase API with user token auth.
  - playwright is used to test the real QuickBase API in a browser enviornment with temporary token auth.
  - temp tokens can only be generated in a browser enviornment and can not be fetched with a user token.
  - '#'
  - getTempTokenDBID() method is wrapped to enhance temporary token generation reuse interacting with a token cache.
  - '#'
  - 'npm run fix-spec: Generates quickbase-fixed.json from the latest QuickBase_RESTful*.json file.'
  - 'npm run regenerate: Generates raw TypeScript-fetch files in src/generated/.'
  - 'npm run generate-unified: Generates a unified QuickbaseClient.ts interface in src/generated-unified/.'
tree:
  name: .
  type: directory
  children:
    - name: .env
      type: file
    - name: .gitignore
      type: file
    - name: CHANGELOG.md
      type: file
    - name: LICENSE
      type: file
    - name: README.md
      type: file
    - name: build.js
      type: file
    - name: dist
      type: directory
      children:
        - name: quickbase.d.ts
          type: file
        - name: quickbase.js
          type: file
        - name: quickbase.js.map
          type: file
    - name: examples
      type: directory
      children:
        - name: react.js
          type: file
        - name: vanillajs.html
          type: file
    - name: log-gen.yaml
      type: file
    - name: openapitools.json
      type: file
    - name: package-lock.json
      type: file
    - name: package.json
      type: file
    - name: playwright-results.txt
      type: directory
      children:
        - name: .last-run.json
          type: file
    - name: playwright.config.ts
      type: file
    - name: rollup.config.js
      type: file
    - name: src
      type: directory
      children:
        - name: code-generation
          type: directory
          children:
            - name: fix-spec-definitions.ts
              type: file
              contents: |
                // src/code-generation/fix-spec-definitions.ts
                export const definitions = {
                  App: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: { type: "string" },
                      name: { type: "string" },
                      created: { type: "string", format: "date-time" },
                      updated: { type: "string", format: "date-time" },
                      description: { type: "string" },
                      timeZone: { type: "string" },
                      dateFormat: { type: "string" },
                      hasEveryoneOnTheInternet: { type: "boolean" },
                      memoryInfo: { $ref: "#/definitions/AppMemoryInfo" },
                      securityProperties: { $ref: "#/definitions/AppSecurityProperties" },
                    },
                  },
                  AppMemoryInfo: {
                    type: "object",
                    properties: {
                      estMemory: { type: "number" },
                      estMemoryInclDependentApps: { type: "number" },
                    },
                  },
                  AppSecurityProperties: {
                    type: "object",
                    properties: {
                      allowClone: { type: "boolean" },
                      allowExport: { type: "boolean" },
                      enableAppTokens: { type: "boolean" },
                      hideFromPublic: { type: "boolean" },
                      mustBeRealmApproved: { type: "boolean" },
                      useIPFilter: { type: "boolean" },
                    },
                  },
                  CreateAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description:
                          "The app name. Multiple apps with the same name are allowed in the same realm.",
                      },
                      assignToken: {
                        type: "boolean",
                        description:
                          "Set to true to assign the app to the user token used to create it. Default is false.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The description for the app. Defaults to blank if omitted.",
                      },
                      securityProperties: {
                        $ref: "#/definitions/AppSecurityProperties",
                        description: "Application security properties.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description:
                          "App variables (max 10, optional). See About Application Variables.",
                      },
                    },
                  },
                  CreateApp200Response: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier for this application.",
                      },
                      name: { type: "string", description: "The app name." },
                      description: {
                        type: "string",
                        description: "The description for the app.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description: "The time and date the app was created (ISO 8601, UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date the app was last updated (ISO 8601, UTC).",
                      },
                      dateFormat: {
                        type: "string",
                        description:
                          "The format used for displaying dates in the app (e.g., MM-DD-YYYY).",
                      },
                      timeZone: {
                        type: "string",
                        description:
                          "The time zone used for displaying time values (e.g., (UTC-08:00) Pacific Time).",
                      },
                      memoryInfo: {
                        $ref: "#/definitions/AppMemoryInfo",
                        description: "Application memory information.",
                      },
                      hasEveryoneOnTheInternet: {
                        type: "boolean",
                        description:
                          "Indicates if the app includes Everyone On The Internet access.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description: "The app variables.",
                      },
                      dataClassification: {
                        type: "string",
                        description:
                          "The Data Classification label assigned to the app (optional, may be 'None').",
                      },
                      securityProperties: {
                        $ref: "#/definitions/AppSecurityProperties",
                        description: "Security properties of the application.",
                      },
                    },
                    required: ["id", "name"],
                  },
                  Field: {
                    type: "object",
                    required: ["id", "label", "fieldType"],
                    properties: {
                      id: {
                        type: "integer",
                        description: "The id of the field, unique to this table.",
                      },
                      label: { type: "string", description: "The label (name) of the field." },
                      fieldType: { type: "string", description: "The type of field." },
                      mode: {
                        type: "string",
                        description:
                          "For derived fields, this will be 'lookup', 'summary', or 'formula'. For non-derived fields, this will be blank.",
                      },
                      noWrap: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to not wrap when displayed in the product.",
                      },
                      bold: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to display in bold in the product.",
                      },
                      required: {
                        type: "boolean",
                        description: "Indicates if the field is marked required.",
                      },
                      appearsByDefault: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as a default in reports.",
                      },
                      findEnabled: {
                        type: "boolean",
                        description: "Indicates if the field is marked as searchable.",
                      },
                      unique: {
                        type: "boolean",
                        description: "Indicates if the field is marked unique.",
                      },
                      doesDataCopy: {
                        type: "boolean",
                        description:
                          "Indicates if the field data will copy when a user copies the record.",
                      },
                      fieldHelp: {
                        type: "string",
                        description:
                          "The configured help text shown to users within the product.",
                      },
                      audited: {
                        type: "boolean",
                        description:
                          "Indicates if the field is being tracked as part of Quickbase Audit Logs.",
                      },
                      properties: {
                        $ref: "#/definitions/FieldProperties",
                        description: "Additional properties for the field.",
                      },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                        description: "Field permissions for different roles.",
                      },
                    },
                  },
                  FieldProperties: {
                    type: "object",
                    properties: {
                      primaryKey: { type: "boolean" },
                      foreignKey: {
                        type: "boolean",
                        description:
                          "Indicates if the field is a foreign key (or reference field) in a relationship.",
                      },
                      numLines: {
                        type: "integer",
                        description:
                          "The number of lines shown in Quickbase for this text field.",
                      },
                      maxLength: {
                        type: "integer",
                        description:
                          "The maximum number of characters allowed for entry in Quickbase for this field.",
                      },
                      appendOnly: {
                        type: "boolean",
                        description: "Whether this field is append only.",
                      },
                      allowHTML: {
                        type: "boolean",
                        description: "Whether this field allows html.",
                      },
                      allowMentions: {
                        type: "boolean",
                        description:
                          "If someone can @mention users in the rich text field to generate an email notification.",
                      },
                      sortAsGiven: {
                        type: "boolean",
                        description:
                          "Indicates if the listed entries sort as entered vs alphabetically.",
                      },
                      carryChoices: {
                        type: "boolean",
                        description:
                          "Whether the field should carry its multiple choice fields when copied.",
                      },
                      allowNewChoices: {
                        type: "boolean",
                        description:
                          "Indicates if users can add new choices to a selection list.",
                      },
                      formula: {
                        type: "string",
                        description: "The formula of the field as configured in Quickbase.",
                      },
                      defaultValue: {
                        type: "string",
                        description:
                          "The default value configured for a field when a new record is added.",
                      },
                      doesTotal: {
                        type: "boolean",
                        description: "Whether this field totals in reports within the product.",
                      },
                      autoSave: {
                        type: "boolean",
                        description: "Whether the link field will auto save.",
                      },
                      defaultValueLuid: {
                        type: "integer",
                        description: "Default user id value.",
                      },
                      useI18NFormat: {
                        type: "boolean",
                        description:
                          "Whether phone numbers should be in E.164 standard international format.",
                      },
                      maxVersions: {
                        type: "integer",
                        description:
                          "The maximum number of versions configured for a file attachment.",
                      },
                      format: { type: "integer", description: "The format to display time." },
                      linkText: {
                        type: "string",
                        description:
                          "The configured text value that replaces the URL that users see within the product.",
                      },
                      parentFieldId: {
                        type: "integer",
                        description: "The id of the parent composite field, when applicable.",
                      },
                      displayTimezone: {
                        type: "boolean",
                        description:
                          "Indicates whether to display the timezone within the product.",
                      },
                      defaultToday: {
                        type: "boolean",
                        description:
                          "Indicates if the field value is defaulted today for new records.",
                      },
                      units: { type: "string", description: "The units label." },
                      openTargetIn: {
                        type: "string",
                        enum: ["sameWindow", "newWindow", "popup"],
                        description:
                          "Indicates which target the URL should open in when a user clicks it within the product.",
                      },
                      doesAverage: {
                        type: "boolean",
                        description:
                          "Whether this field averages in reports within the product.",
                      },
                      decimalPlaces: {
                        type: "integer",
                        description:
                          "The number of decimal places displayed in the product for this field.",
                      },
                      defaultCountryCode: {
                        type: "string",
                        description:
                          "Controls the default country shown on international phone widgets on forms. Country code should be entered in the ISO 3166-1 alpha-2 format.",
                      },
                      seeVersions: {
                        type: "boolean",
                        description:
                          "Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.",
                      },
                      displayMonth: { type: "string", description: "How to display months." },
                      displayEmail: {
                        type: "string",
                        description: "How the email is displayed.",
                      },
                      defaultKind: { type: "string", description: "The user default type." },
                      coverText: {
                        type: "string",
                        description:
                          "An alternate user friendly text that can be used to display a link in the browser.",
                      },
                      currencySymbol: {
                        type: "string",
                        description:
                          "The current symbol used when displaying field values within the product.",
                      },
                      targetFieldId: {
                        type: "integer",
                        description: "The id of the target field.",
                      },
                      displayUser: {
                        type: "string",
                        description:
                          "The configured option for how users display within the product.",
                      },
                      blankIsZero: {
                        type: "boolean",
                        description:
                          "Whether a blank value is treated the same as 0 in calculations within the product.",
                      },
                      exact: {
                        type: "boolean",
                        description: "Whether an exact match is required for a report link.",
                      },
                      defaultDomain: { type: "string", description: "Default email domain." },
                      abbreviate: {
                        type: "boolean",
                        description: "Don't show the URL protocol when showing the URL.",
                      },
                      numberFormat: {
                        type: "integer",
                        description:
                          "The format used for displaying numeric values in the product (decimal, separators, digit group).",
                      },
                      targetTableName: {
                        type: "string",
                        description: "The field's target table name.",
                      },
                      appearsAs: {
                        type: "string",
                        description:
                          "The link text, if empty, the url will be used as link text.",
                      },
                      width: {
                        type: "integer",
                        description: "The field's html input width in the product.",
                      },
                      currencyFormat: {
                        type: "string",
                        enum: ["left", "right", "middle"],
                        description:
                          "The currency format used when displaying field values within the product.",
                      },
                      displayDayOfWeek: {
                        type: "boolean",
                        description:
                          "Indicates whether to display the day of the week within the product.",
                      },
                      commaStart: {
                        type: "integer",
                        description:
                          "The number of digits before commas display in the product, when applicable.",
                      },
                      choices: {
                        type: "array",
                        items: { type: "string" },
                        description:
                          "An array of entries that exist for a field that offers choices to the user.",
                      },
                      targetTableId: {
                        type: "string",
                        description: "The id of the target table.",
                      },
                      displayRelative: {
                        type: "boolean",
                        description: "Whether to display time as relative.",
                      },
                      compositeFields: {
                        type: "array",
                        items: { type: "object" }, // Simplified; could reference Field if recursive
                        description:
                          "An array of the fields that make up a composite field (e.g., address).",
                      },
                      displayCheckboxAsText: {
                        type: "boolean",
                        description:
                          "Indicates whether the checkbox values will be shown as text in reports.",
                      },
                      displayTime: {
                        type: "boolean",
                        description:
                          "Indicates whether to display the time, in addition to the date.",
                      },
                      versionMode: {
                        type: "string",
                        enum: ["keepallversions", "keeplastversions"],
                        description:
                          "Version modes for files. Keep all versions vs keep last version.",
                      },
                      snapFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is used to snapshot values from, when applicable.",
                      },
                      hours24: {
                        type: "boolean",
                        description:
                          "Indicates whether or not to display time in the 24-hour format within the product.",
                      },
                      sortAlpha: {
                        type: "boolean",
                        description:
                          "Whether to sort alphabetically, default sort is by record ID.",
                      },
                      hasExtension: {
                        type: "boolean",
                        description: "Whether this field has a phone extension.",
                      },
                      useNewWindow: {
                        type: "boolean",
                        description:
                          "Indicates if the URL should open a new window when a user clicks it within the product.",
                      },
                      displayAsLink: {
                        type: "boolean",
                        description:
                          "Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.",
                      },
                      lookupReferenceFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the reference in the relationship for this lookup.",
                      },
                      summaryTargetFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is used to aggregate values from the child, when applicable.",
                      },
                      masterChoiceFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the reference in the relationship.",
                      },
                      lookupTargetFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the target on the master table for this lookup.",
                      },
                      masterChoiceTableId: {
                        type: "string",
                        description:
                          "The id of the table that is the master in this relationship.",
                      },
                      summaryReferenceFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is the reference in the relationship for this summary.",
                      },
                      summaryFunction: {
                        type: "string",
                        enum: [
                          "AVG",
                          "SUM",
                          "MAX",
                          "MIN",
                          "STD-DEV",
                          "COUNT",
                          "COMBINED-TEXT",
                          "COMBINED-USER",
                          "DISTINCT-COUNT",
                        ],
                        description: "The summary accumulation function type.",
                      },
                      masterTableTag: {
                        type: "string",
                        description:
                          "The table alias for the master table in the relationship this field is part of.",
                      },
                      choicesLuid: {
                        type: "array",
                        items: { type: "integer" },
                        description: "List of user choices.",
                      },
                      xmlTag: { type: "string", description: "The field's xml tag." },
                      startField: { type: "integer", description: "The start field id." },
                      durationField: { type: "integer", description: "The duration field id." },
                      workWeek: { type: "integer", description: "The work week type." },
                    },
                  },
                  FieldPermissionsInner: {
                    type: "object",
                    properties: {
                      permissionType: { type: "string" },
                      role: { type: "string" },
                      roleId: { type: "integer" },
                    },
                  },
                  CreateFieldRequest: {
                    type: "object",
                    required: ["label", "fieldType"],
                    properties: {
                      label: {
                        type: "string",
                        description: "The label (name) of the field.",
                      },
                      fieldType: {
                        type: "string",
                        enum: [
                          "text",
                          "text-multiple-choice",
                          "text-multi-line",
                          "rich-text",
                          "numeric",
                          "currency",
                          "rating",
                          "percent",
                          "multitext",
                          "email",
                          "url",
                          "duration",
                          "date",
                          "datetime",
                          "timestamp",
                          "timeofday",
                          "checkbox",
                          "user",
                          "multiuser",
                          "address",
                          "phone",
                          "file",
                        ],
                        description: "The type of field. See field type details for more info.",
                      },
                      noWrap: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to not wrap when displayed in the product. Defaults to false.",
                        default: false,
                      },
                      bold: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to display in bold in the product. Defaults to false.",
                        default: false,
                      },
                      appearsByDefault: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as a default in reports. Defaults to true.",
                        default: true,
                      },
                      findEnabled: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as searchable. Defaults to true.",
                        default: true,
                      },
                      fieldHelp: {
                        type: "string",
                        description:
                          "The configured help text shown to users within the product.",
                      },
                      addToForms: {
                        type: "boolean",
                        description:
                          "Whether the field should appear on forms. Defaults to false.",
                        default: false,
                      },
                      audited: {
                        type: "boolean",
                        description:
                          "Indicates if the field is being tracked as part of Quickbase Audit Logs. Defaults to false.",
                        default: false,
                      },
                      properties: {
                        $ref: "#/definitions/FieldProperties",
                        description: "Specific field properties.",
                      },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                        description: "Field permissions for different roles.",
                      },
                    },
                    description: "Request body for creating a new field in a table.",
                  },
                  CreateField200Response: {
                    type: "object",
                    required: ["id", "label", "fieldType"],
                    properties: {
                      id: {
                        type: "integer",
                        description: "The id of the field, unique to this table.",
                      },
                      label: {
                        type: "string",
                        description: "The label (name) of the field.",
                      },
                      fieldType: {
                        type: "string",
                        description: "The type of field.",
                      },
                      mode: {
                        type: "string",
                        description:
                          "For derived fields, this will be 'lookup', 'summary', or 'formula'. For non-derived fields, this will be blank.",
                      },
                      noWrap: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to not wrap when displayed in the product.",
                      },
                      bold: {
                        type: "boolean",
                        description:
                          "Indicates if the field is configured to display in bold in the product.",
                      },
                      required: {
                        type: "boolean",
                        description: "Indicates if the field is marked required.",
                      },
                      appearsByDefault: {
                        type: "boolean",
                        description:
                          "Indicates if the field is marked as a default in reports.",
                      },
                      findEnabled: {
                        type: "boolean",
                        description: "Indicates if the field is marked as searchable.",
                      },
                      unique: {
                        type: "boolean",
                        description: "Indicates if the field is marked unique.",
                      },
                      doesDataCopy: {
                        type: "boolean",
                        description:
                          "Indicates if the field data will copy when a user copies the record.",
                      },
                      fieldHelp: {
                        type: "string",
                        description:
                          "The configured help text shown to users within the product.",
                      },
                      audited: {
                        type: "boolean",
                        description:
                          "Indicates if the field is being tracked as part of Quickbase Audit Logs.",
                      },
                      properties: {
                        $ref: "#/definitions/FieldProperties",
                        description: "Additional properties for the field.",
                      },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                        description: "Field permissions for different roles.",
                      },
                    },
                    description: "Response body for successful field creation.",
                  },
                  Table: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier (dbid) of the table.",
                      },
                      name: { type: "string", description: "The name of the table." },
                      alias: {
                        type: "string",
                        description: "The automatically-created table alias for the table.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The description of the table, as configured by an application administrator.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date when the table was created, in ISO 8601 format (UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date when the table schema or data was last updated, in ISO 8601 format (UTC).",
                      },
                      nextRecordId: {
                        type: "integer",
                        description:
                          "The incremental Record ID that will be used when the next record is created.",
                      },
                      nextFieldId: {
                        type: "integer",
                        description:
                          "The incremental Field ID that will be used when the next field is created.",
                      },
                      defaultSortFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is configured for default sorting.",
                      },
                      defaultSortOrder: {
                        type: "string",
                        enum: ["ASC", "DESC"],
                        description:
                          "The default sort order for the table, either ascending (ASC) or descending (DESC).",
                      },
                      keyFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is configured to be the key on this table, usually the Quickbase Record ID.",
                      },
                      singleRecordName: {
                        type: "string",
                        description: "The builder-configured singular noun of the table.",
                      },
                      pluralRecordName: {
                        type: "string",
                        description: "The builder-configured plural noun of the table.",
                      },
                      sizeLimit: {
                        type: "string",
                        description: "The size limit for the table (e.g., '150 MB').",
                      },
                      spaceUsed: {
                        type: "string",
                        description:
                          "The amount of space currently being used by the table (e.g., '17 MB').",
                      },
                      spaceRemaining: {
                        type: "string",
                        description:
                          "The amount of space remaining for use by the table (e.g., '133 MB').",
                      },
                    },
                  },
                  UpdateTableRequest: {
                    type: "object",
                    properties: {
                      name: { type: "string", description: "The new name for the table." },
                      singleRecordName: {
                        type: "string",
                        description:
                          "The new singular noun for records in the table. Defaults to 'Record' if not provided.",
                      },
                      pluralRecordName: {
                        type: "string",
                        description:
                          "The new plural noun for records in the table. Defaults to 'Records' if not provided.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The new description for the table. Defaults to blank if not provided.",
                      },
                    },
                    description:
                      "Request body for updating table properties. At least one property must be provided.",
                  },
                  DeleteTableResponse: {
                    type: "object",
                    properties: {
                      deletedTableId: { type: "string", description: "The deleted table id." },
                    },
                  },
                  Record: {
                    type: "object",
                    properties: {
                      _dummy: {
                        type: "string",
                        description: "Unused dummy property to force model generation.",
                        nullable: true,
                      },
                    },
                    additionalProperties: {
                      type: "object",
                      properties: {
                        value: {
                          anyOf: [
                            { type: "string" },
                            { type: "number" },
                            { type: "boolean" },
                            { type: "object" },
                            { type: "array" },
                            { type: "null" },
                          ],
                          description: "The value of the field.",
                        },
                      },
                      required: ["value"],
                      description: "The value object for a field ID key.",
                    },
                    description:
                      "A record with field ID keys (e.g., '6') and value objects (e.g., { value: 'data' }).",
                  },
                  UpsertRequest: {
                    type: "object",
                    required: ["to"],
                    properties: {
                      to: { type: "string", description: "The table identifier (dbid)." },
                      data: {
                        type: "array",
                        items: { $ref: "#/definitions/Record" },
                        description: "Array of records to upsert.",
                      },
                      mergeFieldId: {
                        type: "integer",
                        description: "The field ID to merge on (optional).",
                      },
                      fieldsToReturn: {
                        type: "array",
                        items: { type: "integer" },
                        description: "Field IDs to return in the response (optional).",
                      },
                    },
                  },
                  Upsert200Response: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: {
                              value: {
                                anyOf: [
                                  { type: "string" },
                                  { type: "number" },
                                  { type: "boolean" },
                                  { type: "object" },
                                  { type: "array" },
                                  { type: "null" },
                                ],
                                description: "The value of the field.",
                              },
                            },
                            required: ["value"],
                          },
                        },
                        description: "Array of upserted records with field IDs and values.",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          createdRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of newly created records.",
                          },
                          updatedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of updated records.",
                          },
                          unchangedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of unchanged records.",
                          },
                          totalNumberOfRecordsProcessed: {
                            type: "integer",
                            description: "Total records processed.",
                          },
                        },
                        required: ["totalNumberOfRecordsProcessed"],
                      },
                    },
                  },
                  Upsert207Response: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: {
                              value: {
                                anyOf: [
                                  { type: "string" },
                                  { type: "number" },
                                  { type: "boolean" },
                                  { type: "object" },
                                  { type: "array" },
                                  { type: "null" },
                                ],
                                description: "The value of the field.",
                              },
                            },
                            required: ["value"],
                          },
                        },
                        description: "Array of successfully upserted records (may be empty).",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          createdRecordIds: { type: "array", items: { type: "integer" } },
                          updatedRecordIds: { type: "array", items: { type: "integer" } },
                          unchangedRecordIds: { type: "array", items: { type: "integer" } },
                          lineErrors: {
                            type: "object",
                            additionalProperties: { type: "array", items: { type: "string" } },
                            description: "Errors by line number (1-based index).",
                          },
                          totalNumberOfRecordsProcessed: { type: "integer" },
                        },
                        required: ["totalNumberOfRecordsProcessed"],
                      },
                    },
                  },
                  ReportRunResponse: {
                    type: "object",
                    properties: {
                      id: { type: "string" },
                      data: { type: "object" },
                    },
                  },
                  GetTempTokenDBID200Response: {
                    type: "object",
                    required: ["temporaryAuthorization"],
                    properties: {
                      temporaryAuthorization: { type: "string" },
                    },
                  },
                  DeleteRecordsRequest: {
                    type: "object",
                    required: ["from", "where"],
                    properties: {
                      from: {
                        type: "string",
                        description:
                          "The table identifier (dbid) from which to delete records.",
                      },
                      where: {
                        type: "string",
                        description:
                          "A QuickBase query string specifying which records to delete.",
                      },
                    },
                    description:
                      "Request body for deleting records from a table using a query.",
                  },
                  DeleteRecords200Response: {
                    type: "object",
                    properties: {
                      numberDeleted: {
                        type: "integer",
                        description: "The number of records successfully deleted.",
                      },
                    },
                    required: ["numberDeleted"],
                    description: "Response body for successful deletion of records.",
                  },
                  RunQueryRequest: {
                    type: "object",
                    required: ["from"],
                    properties: {
                      from: { type: "string", description: "Table ID (dbid)" },
                      select: {
                        type: "array",
                        items: { type: "integer" },
                        description: "Field IDs to return",
                      },
                      where: { type: "string", description: "Query string" },
                      sortBy: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            fieldId: { type: "integer" },
                            order: { type: "string", enum: ["ASC", "DESC"] },
                          },
                        },
                        description: "Sort criteria",
                      },
                      groupBy: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            fieldId: { type: "integer" },
                            grouping: { type: "string", enum: ["equal-values"] },
                          },
                        },
                        description: "Grouping criteria",
                      },
                      options: {
                        type: "object",
                        properties: {
                          skip: { type: "integer", description: "Number of records to skip" },
                          top: {
                            type: "integer",
                            description: "Max number of records to return",
                          },
                          compareWithAppLocalTime: {
                            type: "boolean",
                            description: "Compare times with app local time",
                          },
                        },
                      },
                    },
                  },
                  RunQueryResponse: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: { value: { type: "any" } },
                          },
                        },
                        description: "Array of record data with field IDs as keys",
                      },
                      fields: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            id: { type: "integer" },
                            label: { type: "string" },
                            type: { type: "string" },
                          },
                        },
                        description: "Field metadata",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          numFields: { type: "integer" },
                          numRecords: { type: "integer" },
                          skip: { type: "integer" },
                          top: { type: "integer" },
                          totalRecords: { type: "integer" },
                        },
                        description: "Query metadata",
                      },
                    },
                  },
                  GetRelationships200Response: {
                    type: "object",
                    properties: {
                      metadata: {
                        type: "object",
                        properties: {
                          numRelationships: {
                            type: "integer",
                            description:
                              "The number of relationships in the current response object.",
                          },
                          skip: {
                            type: "integer",
                            description: "The number of relationships skipped.",
                          },
                          totalRelationships: {
                            type: "integer",
                            description: "The total number of relationships.",
                          },
                        },
                        required: ["numRelationships", "skip", "totalRelationships"],
                        description:
                          "Additional information about the results that may be helpful.",
                      },
                      relationships: {
                        type: "array",
                        items: { $ref: "#/definitions/Relationship" },
                        description: "The relationships in a table.",
                      },
                    },
                    required: ["metadata", "relationships"],
                    description: "Response containing relationships for a table.",
                  },
                  Relationship: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                        description: "The relationship id (foreign key field id).",
                      },
                      parentTableId: {
                        type: "string",
                        description: "The parent table id of the relationship.",
                      },
                      childTableId: {
                        type: "string",
                        description: "The child table id of the relationship.",
                      },
                      foreignKeyField: {
                        $ref: "#/definitions/RelationshipField",
                        description: "The foreign key field information.",
                      },
                      isCrossApp: {
                        type: "boolean",
                        description: "Whether this is a cross-app relationship.",
                      },
                      lookupFields: {
                        type: "array",
                        items: { $ref: "#/definitions/RelationshipField" },
                        description: "The lookup fields array.",
                      },
                      summaryFields: {
                        type: "array",
                        items: { $ref: "#/definitions/RelationshipField" },
                        description: "The summary fields array.",
                      },
                    },
                    required: [
                      "id",
                      "parentTableId",
                      "childTableId",
                      "foreignKeyField",
                      "isCrossApp",
                    ],
                    description: "A relationship between tables.",
                  },
                  RelationshipField: {
                    type: "object",
                    properties: {
                      id: {
                        type: "integer",
                        description: "Field id.",
                      },
                      label: {
                        type: "string",
                        description: "Field label.",
                      },
                      type: {
                        type: "string",
                        description: "Field type.",
                      },
                    },
                    required: ["id", "label", "type"],
                    description:
                      "A field involved in a relationship (foreign key, lookup, or summary).",
                  },
                  CopyAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description: "The name of the newly copied app.",
                      },
                      description: {
                        type: "string",
                        description: "The description of the newly copied app.",
                      },
                      properties: {
                        type: "object",
                        properties: {
                          keepData: {
                            type: "boolean",
                            description:
                              "Whether to copy the app's data along with the schema.",
                          },
                          excludeFiles: {
                            type: "boolean",
                            description:
                              "If keepData is true, whether to copy file attachments. Ignored if keepData is false.",
                          },
                          usersAndRoles: {
                            type: "boolean",
                            description:
                              "If true, users will be copied along with their assigned roles. If false, users and roles will be copied but roles will not be assigned.",
                          },
                          assignUserToken: {
                            type: "boolean",
                            description:
                              "Whether to add the user token used to make this request to the new app.",
                          },
                        },
                        description:
                          "The configuration properties for performing the app copy.",
                      },
                    },
                    description: "Request body for copying an existing application.",
                  },
                  CopyApp200Response: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier for the copied application.",
                      },
                      name: {
                        type: "string",
                        description:
                          "The app name. Multiple apps with the same name are allowed in the same realm.",
                      },
                      description: {
                        type: "string",
                        description: "The description for the app.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description: "The time and date the app was created (ISO 8601, UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date the app was last updated (ISO 8601, UTC).",
                      },
                      dateFormat: {
                        type: "string",
                        description:
                          "The format used for displaying dates in the app (e.g., MM-DD-YYYY).",
                      },
                      timeZone: {
                        type: "string",
                        description:
                          "The time zone used for displaying time values (e.g., (UTC-08:00) Pacific Time).",
                      },
                      hasEveryoneOnTheInternet: {
                        type: "boolean",
                        description:
                          "Indicates if the app includes Everyone On The Internet access.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description: "The app variables.",
                      },
                      ancestorId: {
                        type: "string",
                        description: "The id of the app from which this app was copied.",
                      },
                      dataClassification: {
                        type: "string",
                        description:
                          "The Data Classification label assigned to the app (optional, may be 'None').",
                      },
                    },
                    description: "Response body for successful app copy operation.",
                  },
                  DeleteAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description:
                          "The name of the application to delete, required for confirmation.",
                      },
                    },
                    description:
                      "Request body for deleting an application, requiring the app name for confirmation.",
                  },
                  DeleteApp200Response: {
                    type: "object",
                    properties: {
                      deletedAppId: {
                        type: "string",
                        description: "The ID of the deleted application.",
                      },
                    },
                    required: ["deletedAppId"],
                    description: "Response body for successful deletion of an application.",
                  },
                };
            - name: fix-spec-main.ts
              type: file
              contents: |
                #!/usr/bin/env node
                import { promises as fs } from "fs";
                import path from "path";
                import { fileURLToPath } from "url";
                import * as glob from "glob";
                import { paths } from "./fix-spec-paths.ts";
                import { definitions } from "./fix-spec-definitions.ts";

                interface Parameter {
                  name: string;
                  in: string;
                  required?: boolean;
                  type?: string;
                  schema?: { type?: string; items?: any; $ref?: string; properties?: any };
                  example?: any;
                }

                interface Operation {
                  parameters?: Parameter[];
                  responses?: Record<string, { description: string; schema?: any }>;
                  operationId?: string;
                  summary?: string;
                  tags?: string[];
                }

                interface Spec {
                  paths: Record<string, Record<string, Operation>>;
                  definitions?: Record<string, any>;
                  operations?: any;
                  groups?: any;
                  components?: any;
                }

                function toCamelCase(str: string): string {
                  return str
                    .replace(/[-_](.)/g, (_, char) => char.toUpperCase())
                    .replace(/^./, (str) => str.toLowerCase());
                }

                function fixArraySchemas(spec: Spec) {
                  for (const pathKey in spec.paths) {
                    for (const method in spec.paths[pathKey]) {
                      const operation = spec.paths[pathKey][method];
                      if (operation.parameters) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.schema) {
                            if (param.schema.type === "array" && !param.schema.items) {
                              console.log(
                                `Fixing missing items in ${pathKey}(${method}).${param.name}`
                              );
                              param.schema.items =
                                pathKey === "/records" && param.name === "generated"
                                  ? { $ref: "#/definitions/Record" }
                                  : { type: "string" };
                            }
                            if (param.schema.properties) {
                              for (const propKey in param.schema.properties) {
                                const prop = param.schema.properties[propKey];
                                if (prop.type === "array" && !prop.items) {
                                  console.log(
                                    `Fixing nested array in ${pathKey}(${method}).${param.name}.${propKey}`
                                  );
                                  prop.items =
                                    propKey === "data" && pathKey === "/records"
                                      ? { $ref: "#/definitions/Record" }
                                      : { type: "string" };
                                }
                              }
                            }
                          }
                        });
                      }
                      if (operation.responses) {
                        for (const status in operation.responses) {
                          const response = operation.responses[status];
                          if (response.schema) {
                            if (response.schema.type === "array" && !response.schema.items) {
                              console.log(
                                `Fixing missing items in ${pathKey}(${method}).responses.${status}`
                              );
                              response.schema.items =
                                pathKey === "/records"
                                  ? { $ref: "#/definitions/Upsert200Response" }
                                  : { type: "string" };
                            }
                            if (response.schema.properties) {
                              for (const propKey in response.schema.properties) {
                                const prop = response.schema.properties[propKey];
                                if (prop.type === "array" && !prop.items) {
                                  console.log(
                                    `Fixing nested array in ${pathKey}(${method}).responses.${status}.${propKey}`
                                  );
                                  prop.items =
                                    propKey === "data" && pathKey === "/records"
                                      ? { $ref: "#/definitions/Upsert200Response" }
                                      : { type: "string" };
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                async function fixQuickBaseSpec(): Promise<void> {
                  try {
                    const CODEGEN_DIR = path.dirname(fileURLToPath(import.meta.url));
                    const SPECS_DIR = path.join(CODEGEN_DIR, "..", "specs");
                    const OUTPUT_DIR = path.join(CODEGEN_DIR, "output");
                    console.log("Finding latest QuickBase RESTful API spec...");
                    const specFiles = glob.sync(
                      path.join(SPECS_DIR, "QuickBase_RESTful_*.json")
                    );
                    if (specFiles.length === 0) {
                      console.error(
                        "No QuickBase_RESTful_*.json files found in specs/ folder."
                      );
                      process.exit(1);
                    }
                    const inputFile = specFiles.sort().pop() as string;
                    const outputFile = path.join(OUTPUT_DIR, "quickbase-fixed.json");

                    console.log(`Reading ${path.basename(inputFile)} from specs/...`);
                    const specContent = await fs.readFile(inputFile, "utf8");
                    const spec: Spec = JSON.parse(specContent);

                    console.log("Fixing parameters...");
                    for (const pathKey in spec.paths) {
                      for (const method in spec.paths[pathKey]) {
                        const operation = spec.paths[pathKey][method];
                        if (operation.parameters) {
                          operation.parameters = operation.parameters
                            .filter(
                              (param) =>
                                !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                                  param.name
                                )
                            )
                            .map((param: Parameter) => {
                              param.name = toCamelCase(param.name);
                              if ("example" in param) delete param.example;
                              if ("schema" in param && param.in !== "body") delete param.schema;
                              if (!param.type && param.in !== "body") param.type = "string";
                              return param;
                            });
                        }
                      }
                    }

                    console.log("Applying endpoint fixes...");
                    spec.paths = { ...spec.paths, ...paths }; // Merge original and custom paths

                    console.log("Fixing array schemas...");
                    fixArraySchemas(spec);

                    console.log("Applying definitions...");
                    spec.definitions = { ...spec.definitions, ...definitions }; // Merge definitions

                    console.log("Removing unexpected top-level attributes...");
                    delete spec.operations;
                    delete spec.groups;
                    delete spec.components;

                    console.log(`Writing fixed spec to ${path.basename(outputFile)}...`);
                    await fs.mkdir(OUTPUT_DIR, { recursive: true });
                    await fs.writeFile(outputFile, JSON.stringify(spec, null, 2), "utf8");
                    console.log("Spec fixed successfully!");
                  } catch (error) {
                    console.error("Failed to fix spec:", error);
                    process.exit(1);
                  }
                }

                fixQuickBaseSpec();
            - name: fix-spec-paths.ts
              type: file
              contents: |
                // src/code-generation/fix-spec-paths.ts
                export const paths = {
                  "/apps": {
                    post: {
                      operationId: "createApp",
                      summary: "Create a new application",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CreateAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application created",
                          schema: { $ref: "#/definitions/CreateApp200Response" },
                        },
                      },
                    },
                  },
                  "/apps/{appId}": {
                    get: {
                      operationId: "getApp",
                      summary: "Get an app by ID",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The application identifier.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: { $ref: "#/definitions/App" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteApp",
                      summary: "Delete an application by ID",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app to delete.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/DeleteAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application deleted",
                          schema: { $ref: "#/definitions/DeleteApp200Response" },
                        },
                      },
                    },
                  },
                  "/apps/{appId}/copy": {
                    post: {
                      operationId: "copyApp",
                      summary: "Copy an existing application",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app to copy.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CopyAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application copied",
                          schema: { $ref: "#/definitions/CopyApp200Response" },
                        },
                      },
                    },
                  },
                  "/fields": {
                    get: {
                      operationId: "getFields",
                      summary: "Get all fields for a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "includeFieldPerms",
                          in: "query",
                          required: false,
                          type: "boolean",
                          description: "Whether to include field permissions.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Field" },
                          },
                        },
                      },
                    },
                    post: {
                      operationId: "createField",
                      summary: "Create a new field in a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the table.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CreateFieldRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - field created",
                          schema: { $ref: "#/definitions/CreateField200Response" },
                        },
                      },
                    },
                  },
                  "/tables": {
                    get: {
                      operationId: "getAppTables",
                      summary: "Get all tables for an app",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The application identifier.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Table" },
                          },
                        },
                      },
                    },
                    post: {
                      operationId: "createTable",
                      summary: "Create a new table in an app",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description:
                            "The unique identifier of the app where the table will be created.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: {
                            type: "object",
                            properties: {
                              name: { type: "string", description: "The name of the table." },
                              description: {
                                type: "string",
                                description: "The description of the table.",
                              },
                              singleRecordName: {
                                type: "string",
                                description: "Singular noun for records.",
                              },
                              pluralRecordName: {
                                type: "string",
                                description: "Plural noun for records.",
                              },
                            },
                            required: ["name"],
                          },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table created",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                  },
                  "/tables/{tableId}": {
                    get: {
                      operationId: "getTable",
                      summary: "Get a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table retrieved",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                    post: {
                      operationId: "updateTable",
                      summary: "Update a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/UpdateTableRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table updated",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteTable",
                      summary: "Delete a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table deleted",
                          schema: { $ref: "#/definitions/DeleteTableResponse" },
                        },
                      },
                    },
                  },
                  "/tables/{tableId}/relationships": {
                    get: {
                      operationId: "getRelationships",
                      summary: "Get relationships for a table",
                      tags: ["Relationships"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The unique identifier (dbid) of the child table.",
                        },
                        {
                          name: "skip",
                          in: "query",
                          required: false,
                          type: "integer",
                          description: "The number of relationships to skip.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - relationships retrieved",
                          schema: { $ref: "#/definitions/GetRelationships200Response" },
                        },
                      },
                    },
                  },
                  "/records": {
                    post: {
                      operationId: "upsert",
                      summary: "Upsert records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/UpsertRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - all records processed successfully",
                          schema: { $ref: "#/definitions/Upsert200Response" },
                        },
                        207: {
                          description: "Multi-Status - partial success with some errors",
                          schema: { $ref: "#/definitions/Upsert207Response" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteRecords",
                      summary: "Delete records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/DeleteRecordsRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - records deleted",
                          schema: { $ref: "#/definitions/DeleteRecords200Response" },
                        },
                      },
                    },
                  },
                  "/records/query": {
                    post: {
                      operationId: "runQuery",
                      summary: "Query records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/RunQueryRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - records returned",
                          schema: { $ref: "#/definitions/RunQueryResponse" },
                        },
                      },
                    },
                  },
                  "/reports/{reportId}/run": {
                    post: {
                      operationId: "runReport",
                      summary: "Run a report",
                      tags: ["Reports"],
                      parameters: [
                        {
                          name: "reportId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The report identifier.",
                        },
                        {
                          name: "generated",
                          in: "body",
                          required: true,
                          schema: { type: "object" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/ReportRunResponse" },
                          },
                        },
                      },
                    },
                  },
                  "/auth/temporary/{dbid}": {
                    get: {
                      operationId: "getTempTokenDBID",
                      summary: "Get a temporary authorization token for a specific dbid",
                      tags: ["Auth"],
                      parameters: [
                        {
                          name: "dbid",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The database identifier (dbid).",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: { $ref: "#/definitions/GetTempTokenDBID200Response" },
                        },
                      },
                    },
                  },
                };
            - name: generate-unified-interface.ts
              type: file
              contents: |
                // src/code-generation/generate-unified-interface.ts
                import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
                import { join, dirname } from "path";
                import { fileURLToPath } from "url";
                import { simplifyName } from "../utils.ts";
                import { OpenAPIV2 } from "openapi-types";

                const __dirname = dirname(fileURLToPath(import.meta.url));
                const SPEC_FILE = join(__dirname, "output", "quickbase-fixed.json");
                const OUTPUT_DIR = join(__dirname, "..", "generated-unified");
                const OUTPUT_FILE = join(OUTPUT_DIR, "QuickbaseClient.ts");

                function generateInterface() {
                  if (!existsSync(SPEC_FILE)) {
                    console.error(
                      `Spec file ${SPEC_FILE} not found. Run 'npm run fix-spec' first.`
                    );
                    process.exit(1);
                  }

                  console.log("Generating unified QuickbaseClient interface...");
                  const spec = JSON.parse(
                    readFileSync(SPEC_FILE, "utf8")
                  ) as OpenAPIV2.Document;
                  const { paths } = spec;

                  const modelImports = new Set<string>();
                  const methods: string[] = [];

                  for (const [path, methodsObj] of Object.entries(
                    paths as OpenAPIV2.PathsObject
                  )) {
                    if (!methodsObj) continue;

                    for (const [method, operation] of Object.entries(
                      methodsObj as OpenAPIV2.PathItemObject
                    )) {
                      const op = operation as OpenAPIV2.OperationObject | undefined;
                      if (!op || !op.operationId) continue;

                      const opId = op.operationId;
                      const params = (op.parameters || [])
                        .filter((p) => {
                          const param = p as OpenAPIV2.ParameterObject;
                          return !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                            param.name
                          );
                        })
                        .map((p) => {
                          const param = p as OpenAPIV2.ParameterObject;
                          const type = param.type
                            ? mapOpenApiTypeToTs(param.type)
                            : param.schema
                            ? mapRefToType(param.schema, modelImports)
                            : "any";
                          return `${param.name}${param.required ? "" : "?"}: ${type}`;
                        })
                        .join("; ");

                      const successResponses = ["200", "207"]
                        .map((code) => ({
                          code,
                          response: op.responses?.[code] as
                            | OpenAPIV2.ResponseObject
                            | undefined,
                        }))
                        .filter(({ response }) => response?.schema);
                      const returnTypes = successResponses.map(({ response }) =>
                        mapRefToType(response!.schema, modelImports)
                      );
                      const uniqueReturnTypes = [...new Set(returnTypes)];
                      const returnType =
                        uniqueReturnTypes.length > 0 ? uniqueReturnTypes.join(" | ") : "void";

                      methods.push(
                        `  ${opId}: (params: { ${params} }) => Promise<${returnType}>;`
                      );
                    }
                  }

                  const importStatement =
                    modelImports.size > 0
                      ? `import { ${Array.from(modelImports)
                          .sort()
                          .join(", ")} } from "../generated/models";`
                      : "";

                  const interfaceContent = `// Generated on ${new Date().toISOString()}\n${importStatement}\n\nexport interface QuickbaseClient {\n${methods.join(
                    "\n"
                  )}\n}\n`;

                  if (!existsSync(OUTPUT_DIR)) {
                    mkdirSync(OUTPUT_DIR, { recursive: true });
                  }
                  writeFileSync(OUTPUT_FILE, interfaceContent, "utf8");
                  console.log(`Generated ${OUTPUT_FILE}`);
                }

                function mapOpenApiTypeToTs(openApiType: string): string {
                  switch (openApiType.toLowerCase()) {
                    case "integer":
                    case "int":
                      return "number";
                    case "string":
                      return "string";
                    case "boolean":
                      return "boolean";
                    default:
                      return "any";
                  }
                }

                function mapRefToType(
                  schema: OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject,
                  modelImports: Set<string>
                ): string {
                  if ("$ref" in schema) {
                    const model = schema.$ref.split("/").pop()!;
                    modelImports.add(model);
                    return model;
                  }
                  if (schema.type === "array" && schema.items) {
                    const itemType =
                      "$ref" in schema.items
                        ? schema.items.$ref.split("/").pop()!
                        : mapOpenApiTypeToTs(schema.items.type || "any");
                    if ("$ref" in schema.items) modelImports.add(itemType);
                    return `${itemType}[]`;
                  }
                  if (schema.type === "object" && schema.additionalProperties) {
                    const valueType = schema.additionalProperties.$ref
                      ? schema.additionalProperties.$ref.split("/").pop()!
                      : mapOpenApiTypeToTs(schema.additionalProperties.type || "any");
                    if (schema.additionalProperties.$ref) modelImports.add(valueType);
                    return `{ [key: string]: ${valueType} }`;
                  }
                  return mapOpenApiTypeToTs(schema.type || "any");
                }

                try {
                  generateInterface();
                } catch (error) {
                  console.error("Generation failed:", error);
                  process.exit(1);
                }
            - name: output
              type: directory
              children:
                - name: quickbase-fixed.json
                  type: file
            - name: regenerate-client.ts
              type: file
              contents: |
                #!/usr/bin/env node
                import { execSync } from "child_process";
                import { existsSync } from "fs";
                import { join } from "path";
                import { fileURLToPath } from "url";
                import fetch from "node-fetch";
                import readline from "readline";

                const CURRENT_JAR_VERSION = "7.12.0";
                const MAVEN_METADATA_URL =
                  "https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/maven-metadata.xml";
                const CODEGEN_DIR = join(fileURLToPath(import.meta.url), "..");
                const JARS_DIR = join(CODEGEN_DIR, "..", "openapi-jars");
                const SPEC_INPUT = join(CODEGEN_DIR, "output", "quickbase-fixed.json"); // Updated path
                const OUTPUT_DIR = join(CODEGEN_DIR, "..", "generated");

                async function getLatestVersion(): Promise<string> {
                  const response = await fetch(MAVEN_METADATA_URL);
                  if (!response.ok)
                    throw new Error(`Failed to fetch Maven metadata: ${response.statusText}`);
                  const text = await response.text();
                  const match = text.match(/<latest>(.*?)<\/latest>/);
                  if (!match)
                    throw new Error("Couldn’t parse latest version from Maven metadata");
                  return match[1];
                }

                async function checkAndPromptForUpdate(messages: string[]): Promise<string> {
                  const latestVersion = await getLatestVersion();
                  if (latestVersion === CURRENT_JAR_VERSION) {
                    messages.push(`Current version (${CURRENT_JAR_VERSION}) is the latest.`);
                    return CURRENT_JAR_VERSION;
                  }

                  messages.push(
                    `Newer version available: ${latestVersion} (current: ${CURRENT_JAR_VERSION})`
                  );
                  const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout,
                  });

                  return new Promise((resolve) => {
                    const prompt = "Do you want to update to the latest version? (y/n): ";
                    messages.push(prompt);
                    rl.question(prompt, (answer) => {
                      rl.close();
                      if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
                        messages.push(`Switching to version ${latestVersion}...`);
                        resolve(latestVersion);
                      } else {
                        messages.push(`Sticking with version ${CURRENT_JAR_VERSION}.`);
                        resolve(CURRENT_JAR_VERSION);
                      }
                    });
                  });
                }

                async function ensureJarExists(
                  version: string,
                  messages: string[]
                ): Promise<string> {
                  const jarPath = join(JARS_DIR, `openapi-generator-cli-${version}.jar`);
                  const jarUrl = `https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${version}/openapi-generator-cli-${version}.jar`;

                  if (!existsSync(jarPath)) {
                    messages.push(`Downloading OpenAPI Generator CLI v${version}...`);
                    try {
                      execSync(`curl -L -o ${jarPath} ${jarUrl}`, { stdio: "inherit" });
                      messages.push(`Downloaded ${jarPath}`);
                    } catch (error) {
                      messages.push("Failed to download JAR.");
                      throw error;
                    }
                  } else {
                    messages.push(`Using existing ${jarPath}`);
                  }
                  return jarPath;
                }

                function regenerateClient(jarPath: string, messages: string[]) {
                  messages.push("Regenerating client from spec...");
                  const command = `java -jar ${jarPath} generate -i ${SPEC_INPUT} -g typescript-fetch -o ${OUTPUT_DIR}`;
                  try {
                    execSync(command, { stdio: "inherit" });
                    messages.push("Client regeneration complete.");
                  } catch (error) {
                    messages.push("Regeneration failed.");
                    throw error;
                  }
                }

                async function main() {
                  const messages: string[] = [];
                  try {
                    const versionToUse = await checkAndPromptForUpdate(messages);
                    const jarPath = await ensureJarExists(versionToUse, messages);
                    regenerateClient(jarPath, messages);
                  } catch (error) {
                    console.error("Error occurred during process:", error);
                  } finally {
                    console.log("\n--- Key Messages ---");
                    messages.forEach((msg) => console.log(msg));
                  }
                }

                main().catch((error) => {
                  console.error("Error in regeneration process:", error);
                  process.exit(1);
                });
        - name: generated
          type: directory
          children:
            - name: .openapi-generator
              type: directory
              children:
                - name: FILES
                  type: file
                - name: VERSION
                  type: file
            - name: .openapi-generator-ignore
              type: file
            - name: apis
              type: directory
              children:
                - name: AppsApi.ts
                  type: file
                - name: AuditApi.ts
                  type: file
                - name: AuthApi.ts
                  type: file
                - name: DocumentTemplatesApi.ts
                  type: file
                - name: FieldsApi.ts
                  type: file
                - name: FilesApi.ts
                  type: file
                - name: FormulasApi.ts
                  type: file
                - name: PlatformAnalyticsApi.ts
                  type: file
                - name: RecordsApi.ts
                  type: file
                - name: RelationshipsApi.ts
                  type: file
                - name: ReportsApi.ts
                  type: file
                - name: SolutionsApi.ts
                  type: file
                - name: TablesApi.ts
                  type: file
                - name: UserTokenApi.ts
                  type: file
                - name: UsersApi.ts
                  type: file
                - name: index.ts
                  type: file
            - name: index.ts
              type: file
            - name: models
              type: directory
              children:
                - name: AddMembersToGroup200Response.ts
                  type: file
                - name: AddSubgroupsToGroup200Response.ts
                  type: file
                - name: App.ts
                  type: file
                - name: AppMemoryInfo.ts
                  type: file
                - name: AppSecurityProperties.ts
                  type: file
                - name: Audit200Response.ts
                  type: file
                - name: Audit202Response.ts
                  type: file
                - name: AuditRequest.ts
                  type: file
                - name: CloneUserToken200Response.ts
                  type: file
                - name: CloneUserTokenRequest.ts
                  type: file
                - name: CopyApp200Response.ts
                  type: file
                - name: CopyAppRequest.ts
                  type: file
                - name: CopyAppRequestProperties.ts
                  type: file
                - name: CreateApp200Response.ts
                  type: file
                - name: CreateAppRequest.ts
                  type: file
                - name: CreateAppRequestVariablesInner.ts
                  type: file
                - name: CreateField200Response.ts
                  type: file
                - name: CreateFieldRequest.ts
                  type: file
                - name: CreateRelationship200Response.ts
                  type: file
                - name: CreateRelationshipRequest.ts
                  type: file
                - name: CreateTableRequest.ts
                  type: file
                - name: DeactivateUserToken200Response.ts
                  type: file
                - name: DeleteApp200Response.ts
                  type: file
                - name: DeleteAppRequest.ts
                  type: file
                - name: DeleteFile200Response.ts
                  type: file
                - name: DeleteRecords200Response.ts
                  type: file
                - name: DeleteRecordsRequest.ts
                  type: file
                - name: DeleteRelationship200Response.ts
                  type: file
                - name: DeleteTableResponse.ts
                  type: file
                - name: DenyUsers200Response.ts
                  type: file
                - name: ExchangeSsoToken200Response.ts
                  type: file
                - name: ExchangeSsoTokenRequest.ts
                  type: file
                - name: Field.ts
                  type: file
                - name: FieldPermissionsInner.ts
                  type: file
                - name: FieldProperties.ts
                  type: file
                - name: GenerateDocument200Response.ts
                  type: file
                - name: GetField200Response.ts
                  type: file
                - name: GetRelationships200Response.ts
                  type: file
                - name: GetRelationships200ResponseMetadata.ts
                  type: file
                - name: GetReport200Response.ts
                  type: file
                - name: GetTempTokenDBID200Response.ts
                  type: file
                - name: GetUsers200Response.ts
                  type: file
                - name: GetUsersRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200Response.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: file
                - name: PlatformAnalyticReads200Response.ts
                  type: file
                - name: Record.ts
                  type: file
                - name: RecordValue.ts
                  type: file
                - name: Relationship.ts
                  type: file
                - name: RelationshipField.ts
                  type: file
                - name: RemoveMembersFromGroup200Response.ts
                  type: file
                - name: RemoveSubgroupsFromGroup200Response.ts
                  type: file
                - name: ReportRunResponse.ts
                  type: file
                - name: RunFormula200Response.ts
                  type: file
                - name: RunFormulaRequest.ts
                  type: file
                - name: RunQueryRequest.ts
                  type: file
                - name: RunQueryRequestGroupByInner.ts
                  type: file
                - name: RunQueryRequestOptions.ts
                  type: file
                - name: RunQueryRequestSortByInner.ts
                  type: file
                - name: RunQueryResponse.ts
                  type: file
                - name: RunQueryResponseFieldsInner.ts
                  type: file
                - name: RunQueryResponseMetadata.ts
                  type: file
                - name: Table.ts
                  type: file
                - name: TransferUserToken200Response.ts
                  type: file
                - name: TransferUserTokenRequest.ts
                  type: file
                - name: UndenyUsers200Response.ts
                  type: file
                - name: UpdateFieldRequest.ts
                  type: file
                - name: UpdateRelationshipRequest.ts
                  type: file
                - name: UpdateTableRequest.ts
                  type: file
                - name: Upsert200Response.ts
                  type: file
                - name: Upsert200ResponseDataInnerValue.ts
                  type: file
                - name: Upsert200ResponseMetadata.ts
                  type: file
                - name: Upsert207Response.ts
                  type: file
                - name: Upsert207ResponseMetadata.ts
                  type: file
                - name: UpsertRequest.ts
                  type: file
                - name: index.ts
                  type: file
            - name: runtime.ts
              type: file
        - name: generated-unified
          type: directory
          children:
            - name: QuickbaseClient.ts
              type: file
        - name: index.ts
          type: file
        - name: log-gen.ts
          type: file
        - name: openapi-jars
          type: directory
          children:
            - name: openapi-generator-cli-7.12.0.jar
              type: file
        - name: quickbaseClient.ts
          type: file
        - name: tokenCache.ts
          type: file
    - name: test-artifacts
      type: directory
      children:
        - name: .playwright-artifacts-0
          type: directory
          children:
            - name: traces
              type: directory
              children: []
    - name: test-results.json
      type: file
    - name: tests
      type: directory
      children:
        - name: playwright
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: auth
                  type: directory
                  children:
                    - name: cacheSwitching.test.ts
                      type: file
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getAppWithUserToken.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: tokenPrefetch.test.ts
                      type: file
                    - name: tokenRenewal.test.ts
                      type: file
        - name: setup.ts
          type: file
        - name: vitest
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
            - name: unit
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: copyApp.test.ts
                      type: file
                    - name: createApp.test.ts
                      type: file
                    - name: deleteApp.test.ts
                      type: file
                    - name: getApp.test.ts
                      type: file
                - name: auth
                  type: directory
                  children:
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: retryOn401.test.ts
                      type: file
                    - name: two401s.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: createField.test.ts
                      type: file
                    - name: getFields.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: records
                  type: directory
                  children:
                    - name: deleteRecords.test.ts
                      type: file
                    - name: runQuery.test.ts
                      type: file
                    - name: upsert.test.ts
                      type: file
                - name: tables
                  type: directory
                  children:
                    - name: createTable.test.ts
                      type: file
                    - name: deleteTable.test.ts
                      type: file
                    - name: getAppTables.test.ts
                      type: file
                    - name: getRelationships.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
    - name: text.txt
      type: file
    - name: tsconfig.json
      type: file
    - name: versionrc.json
      type: file
    - name: vitest.config.ts
      type: file
