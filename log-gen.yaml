project: quickbase-js
date: 3/10/2025
root: /home/drew/Projects/quickbase-js
goals:
  - A library for interacting with the QuickBase RESTful API.
  - Use OpenAPI to generate types and methods using a proxy. Validate with tests.
  - Provide robust and intuitive temporary token support for browser environments.
  - User Tokens support both Node.js and browser environments.
  - 'Use case: JS frameworks like React, Vue, and Angular hosted in QuickBase code pages.'
  - Enable a flexible or native fetch in the browser.
  - Enable a flexible fetch framework in Node.js.
  - '#'
  - No manual updating methods when the QuickBase API changes.
  - The proxy magic dynamically maps generated methods and types.
  - '#'
  - TokenCache is defined per quickbaseClient call, so each instance has its own isolated TokenCache.
  - Each quickbase client instance has an isolated and individual token cache.
pipelineOverview:
  - 'fix-spec-main.ts: Input: Reads the latest QuickBase_RESTful*.json file from the specs/ folder and applies fixes to the parameters and paths.'
  - filters out the QB-Realm-Hostname, Authorization, and User-Agent parameters.
  - Converts parameter names to camelCase.
  - Fixes array schemas and applies custom paths.
  - Merges paths from fix-spec-paths.ts and definitions from fix-spec-definitions.ts.
  - 'Output: writes quickbase-fixed.json to src/code-generation/output/.'
  - 'Key Behavior: The merge (spec.paths = { ...spec.paths, ...paths }) preserves all origional endpoints, only overriding those defined in fix-spec-paths.ts.'
  - '#'
  - 'regenerate-client.ts: Uses quickbase-fixed.json to generate raw TypeScript-fetch files (src/generated/). including models and APIs.'
  - '#'
  - 'generate-unified-interface.ts: Uses quickbase-fixed.json to generate a unified QuickbaseClient.ts interface in src/generated-unified/.'
  - QuickbaseClient.ts includes all endpoints from src/code-generation/output/quickbase-fixed, and types from src/generated.
  - '#'
  - /specs/QuickBase_RESTful_API_*.json is over 46k lines of JSON, so it's not included in the snapshot, its too large to give to an AI.
  - which creates difficulties in understanding the structure of the API.
  - It makes it difficult to model the src/code-generation/fix-spec-*.ts files in the snapshot.
  - '#'
  - vitest unit and integration tests. Integration tests use the real QuickBase API with user token auth.
  - playwright is used to test the real QuickBase API in a browser enviornment with temporary token auth.
  - temp tokens can only be generated in a browser enviornment and can not be fetched with a user token.
  - '#'
  - getTempTokenDBID() method is wrapped to enhance temporary token generation reuse interacting with a token cache.
  - '#'
  - 'npm run fix-spec: Generates quickbase-fixed.json from the latest QuickBase_RESTful*.json file.'
  - 'npm run regenerate: Generates raw TypeScript-fetch files in src/generated/.'
  - 'npm run generate-unified: Generates a unified QuickbaseClient.ts interface in src/generated-unified/.'
tree:
  name: .
  type: directory
  children:
    - name: .env
      type: file
    - name: .gitignore
      type: file
    - name: CHANGELOG.md
      type: file
    - name: LICENSE
      type: file
    - name: README.md
      type: file
    - name: build.js
      type: file
    - name: dist
      type: directory
      children:
        - name: quickbase.d.ts
          type: file
        - name: quickbase.js
          type: file
        - name: quickbase.js.map
          type: file
    - name: examples
      type: directory
      children:
        - name: react.js
          type: file
        - name: vanillajs.html
          type: file
    - name: log-gen.yaml
      type: file
    - name: openapitools.json
      type: file
    - name: package-lock.json
      type: file
    - name: package.json
      type: file
      contents: |
        {
          "name": "quickbase-js",
          "main": "dist/quickbase.js",
          "types": "dist/quickbase.d.ts",
          "version": "1.0.1-beta.0",
          "publishConfig": {
            "access": "public"
          },
          "description": "QuickBase JavaScript client for frameworks and vanilla JS",
          "module": "dist/quickbase.js",
          "type": "module",
          "exports": {
            ".": {
              "import": "./dist/quickbase.js",
              "types": "./dist/quickbase.d.ts"
            }
          },
          "scripts": {
            "release": "standard-version",
            "release:beta": "standard-version --prerelease beta",
            "release:alpha": "standard-version --prerelease alpha",
            "fix-spec": "node --loader ts-node/esm src/code-generation/fix-spec-main.ts",
            "regenerate": "node --loader ts-node/esm src/code-generation/regenerate-client.ts",
            "generate-unified": "node --loader ts-node/esm src/code-generation/generate-unified-interface.ts",
            "log-gen": "node --loader ts-node/esm src/log-gen.ts",
            "build": "rimraf dist && rollup -c",
            "build:prod": "rm -rf dist/* && NODE_ENV=production rollup -c",
            "test": "vitest run tests/vitest/**/**/*.test.ts",
            "test:pw:qb:all": "playwright test tests/playwright/qb --config playwright.config.ts",
            "test:vitest:qb": "vitest run tests/vitest/qb/**/*.test.ts",
            "test:vitest:qb:apps": "vitest run tests/vitest/qb/apps/**/*.test.ts",
            "test:vitest:qb:auth": "vitest run tests/vitest/qb/auth/**/*.test.ts",
            "test:vitest:qb:fields": "vitest run tests/vitest/qb/fields/**/*.test.ts",
            "test:vitest:qb:tables": "vitest run tests/vitest/qb/tables/**/*.test.ts",
            "test:pw:qb:auth": "playwright test tests/playwright/qb/auth",
            "test::pw:qb:auth:temptoken": "playwright test tests/playwright/qb/auth/getTempToken.test.ts",
            "test:pw:qb:auth:renewal": "playwright test tests/playwright/qb/auth/tokenRenewal.test.ts",
            "test:pw:qb:auth:cache": "playwright test tests/playwright/qb/auth/cacheSwitching.test.ts",
            "test:pw:qb:auth:temp401": "playwright test tests/playwright/qb/auth/fetchTempToken401.test.ts",
            "test:pw:qb:auth:prefetch": "playwright test tests/playwright/qb/auth/tokenPrefetch.test.ts",
            "test:pw:qb:auth:debug": "playwright test tests/playwright/qb/auth --headed --debug",
            "test:pw:qb:auth:temp:debug": "playwright test tests/playwright/qb/auth/getTempToken.test.ts --headed --debug",
            "test:pw:qb:auth:renewal:debug": "playwright test tests/playwright/qb/auth/tokenRenewal.test.ts --headed --debug --config=playwright.config.ts",
            "test:pw:qb:auth:cache:debug": "playwright test tests/playwright/qb/auth/cacheSwitching.test.ts --headed --debug"
          },
          "dependencies": {
            "typescript": "^5.8.2"
          },
          "devDependencies": {
            "@openapitools/openapi-generator-cli": "^2.17.0",
            "@playwright/test": "^1.51.0",
            "@rollup/plugin-commonjs": "^28.0.3",
            "@rollup/plugin-node-resolve": "^16.0.0",
            "@rollup/plugin-terser": "^0.4.4",
            "@rollup/plugin-typescript": "^12.1.2",
            "@types/node": "^22.13.10",
            "dotenv": "^16.4.7",
            "glob": "^11.0.1",
            "js-yaml": "^4.1.0",
            "jsdom": "^26.0.0",
            "node-fetch": "^3.3.2",
            "openapi-types": "^12.1.3",
            "rimraf": "^5.0.10",
            "rollup": "^4.35.0",
            "rollup-plugin-dts": "^6.1.1",
            "standard-version": "^9.5.0",
            "ts-morph": "^25.0.1",
            "ts-node": "^10.9.2",
            "tslib": "^2.8.1",
            "vitest": "^3.0.8"
          }
        }
    - name: playwright.config.ts
      type: file
    - name: rollup.config.js
      type: file
      contents: |
        import typescript from "@rollup/plugin-typescript";
        import terser from "@rollup/plugin-terser";
        import nodeResolve from "@rollup/plugin-node-resolve";
        import commonjs from "@rollup/plugin-commonjs";
        import dts from "rollup-plugin-dts";

        const isProd = process.env.NODE_ENV === "production";

        export default [
          {
            input: "src/quickbaseClient.ts",
            output: {
              dir: "dist",
              format: "esm",
              sourcemap: true,
              compact: isProd,
              entryFileNames: "quickbase.js",
            },
            external: [
              "node:http",
              "node:https",
              "node:zlib",
              "node:stream",
              "node:buffer",
              "node:util",
              "node:url",
              "node:net",
              "node:fs",
              "node:path",
              "node-fetch",
            ],
            plugins: [
              nodeResolve({ preferBuiltins: true }),
              commonjs(),
              typescript({
                tsconfig: "./tsconfig.json",
                declaration: false, // No .d.ts here, handled by dts plugin
              }),
              isProd && terser(),
            ],
          },
          {
            input: "src/quickbaseClient.ts",
            output: {
              file: "dist/quickbase.d.ts",
              format: "esm",
              // Optional: sourcemap for .d.ts if needed for debugging
              // sourcemap: true,
            },
            plugins: [
              dts({
                tsconfig: "./tsconfig.json",
                // Ensure all referenced files are included
                respectExternal: true,
              }),
            ],
          },
        ].map((config) => ({
          ...config,
          onwarn(warning, warn) {
            if (
              warning.code === "PLUGIN_WARNING" &&
              warning.plugin === "typescript" &&
              warning.message.includes("TS5096")
            ) {
              return;
            }
            warn(warning);
          },
        }));
    - name: src
      type: directory
      children:
        - name: code-generation
          type: directory
          children:
            - name: fix-spec-definitions.ts
              type: file
              contents: |
                // src/code-generation/fix-spec-definitions.ts
                export const definitions = {
                  App: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: { type: "string" },
                      name: { type: "string" },
                      created: { type: "string", format: "date-time" },
                      updated: { type: "string", format: "date-time" },
                      description: { type: "string" },
                      timeZone: { type: "string" },
                      dateFormat: { type: "string" },
                      hasEveryoneOnTheInternet: { type: "boolean" },
                      memoryInfo: { $ref: "#/definitions/AppMemoryInfo" },
                      securityProperties: { $ref: "#/definitions/AppSecurityProperties" },
                    },
                  },
                  AppMemoryInfo: {
                    type: "object",
                    properties: {
                      estMemory: { type: "number" },
                      estMemoryInclDependentApps: { type: "number" },
                    },
                  },
                  AppSecurityProperties: {
                    type: "object",
                    properties: {
                      allowClone: { type: "boolean" },
                      allowExport: { type: "boolean" },
                      enableAppTokens: { type: "boolean" },
                      hideFromPublic: { type: "boolean" },
                      mustBeRealmApproved: { type: "boolean" },
                      useIPFilter: { type: "boolean" },
                    },
                  },
                  CreateAppRequest: {
                    type: "object",
                    required: ["name"],
                    properties: {
                      name: {
                        type: "string",
                        description:
                          "The app name. Multiple apps with the same name are allowed in the same realm.",
                      },
                      assignToken: {
                        type: "boolean",
                        description:
                          "Set to true to assign the app to the user token used to create it. Default is false.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The description for the app. Defaults to blank if omitted.",
                      },
                      securityProperties: {
                        $ref: "#/definitions/AppSecurityProperties",
                        description: "Application security properties.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description:
                          "App variables (max 10, optional). See About Application Variables.",
                      },
                    },
                  },
                  CreateApp200Response: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier for this application.",
                      },
                      name: {
                        type: "string",
                        description: "The app name.",
                      },
                      description: {
                        type: "string",
                        description: "The description for the app.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description: "The time and date the app was created (ISO 8601, UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date the app was last updated (ISO 8601, UTC).",
                      },
                      dateFormat: {
                        type: "string",
                        description:
                          "The format used for displaying dates in the app (e.g., MM-DD-YYYY).",
                      },
                      timeZone: {
                        type: "string",
                        description:
                          "The time zone used for displaying time values (e.g., (UTC-08:00) Pacific Time).",
                      },
                      memoryInfo: {
                        $ref: "#/definitions/AppMemoryInfo",
                        description: "Application memory information.",
                      },
                      hasEveryoneOnTheInternet: {
                        type: "boolean",
                        description:
                          "Indicates if the app includes Everyone On The Internet access.",
                      },
                      variables: {
                        type: "array",
                        items: {
                          type: "object",
                          properties: {
                            name: { type: "string" },
                            value: { type: "string" },
                          },
                          required: ["name", "value"],
                        },
                        description: "The app variables.",
                      },
                      dataClassification: {
                        type: "string",
                        description:
                          "The Data Classification label assigned to the app (optional, may be 'None').",
                      },
                      securityProperties: {
                        $ref: "#/definitions/AppSecurityProperties",
                        description: "Security properties of the application.",
                      },
                    },
                    required: ["id", "name"],
                  },
                  Field: {
                    type: "object",
                    required: ["id", "label", "fieldType"],
                    properties: {
                      id: { type: "integer" },
                      label: { type: "string" },
                      fieldType: { type: "string" },
                      noWrap: { type: "boolean" },
                      bold: { type: "boolean" },
                      required: { type: "boolean" },
                      appearsByDefault: { type: "boolean" },
                      findEnabled: { type: "boolean" },
                      unique: { type: "boolean" },
                      doesDataCopy: { type: "boolean" },
                      fieldHelp: { type: "string" },
                      audited: { type: "boolean" },
                      properties: { $ref: "#/definitions/FieldProperties" },
                      permissions: {
                        type: "array",
                        items: { $ref: "#/definitions/FieldPermissionsInner" },
                      },
                    },
                  },
                  FieldProperties: {
                    type: "object",
                    properties: {
                      primaryKey: { type: "boolean" },
                      foreignKey: { type: "boolean" },
                      numLines: { type: "integer" },
                      maxLength: { type: "integer" },
                      appendOnly: { type: "boolean" },
                      allowHTML: { type: "boolean" },
                      allowMentions: { type: "boolean" },
                      sortAsGiven: { type: "boolean" },
                      carryChoices: { type: "boolean" },
                      allowNewChoices: { type: "boolean" },
                      formula: { type: "string" },
                      defaultValue: { type: "string" },
                    },
                  },
                  FieldPermissionsInner: {
                    type: "object",
                    properties: {
                      permissionType: { type: "string" },
                      role: { type: "string" },
                      roleId: { type: "integer" },
                    },
                  },
                  Table: {
                    type: "object",
                    required: ["id", "name"],
                    properties: {
                      id: {
                        type: "string",
                        description: "The unique identifier (dbid) of the table.",
                      },
                      name: {
                        type: "string",
                        description: "The name of the table.",
                      },
                      alias: {
                        type: "string",
                        description: "The automatically-created table alias for the table.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The description of the table, as configured by an application administrator.",
                      },
                      created: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date when the table was created, in ISO 8601 format (UTC).",
                      },
                      updated: {
                        type: "string",
                        format: "date-time",
                        description:
                          "The time and date when the table schema or data was last updated, in ISO 8601 format (UTC).",
                      },
                      nextRecordId: {
                        type: "integer",
                        description:
                          "The incremental Record ID that will be used when the next record is created.",
                      },
                      nextFieldId: {
                        type: "integer",
                        description:
                          "The incremental Field ID that will be used when the next field is created.",
                      },
                      defaultSortFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is configured for default sorting.",
                      },
                      defaultSortOrder: {
                        type: "string",
                        enum: ["ASC", "DESC"],
                        description:
                          "The default sort order for the table, either ascending (ASC) or descending (DESC).",
                      },
                      keyFieldId: {
                        type: "integer",
                        description:
                          "The id of the field that is configured to be the key on this table, usually the Quickbase Record ID.",
                      },
                      singleRecordName: {
                        type: "string",
                        description: "The builder-configured singular noun of the table.",
                      },
                      pluralRecordName: {
                        type: "string",
                        description: "The builder-configured plural noun of the table.",
                      },
                      sizeLimit: {
                        type: "string",
                        description: "The size limit for the table (e.g., '150 MB').",
                      },
                      spaceUsed: {
                        type: "string",
                        description:
                          "The amount of space currently being used by the table (e.g., '17 MB').",
                      },
                      spaceRemaining: {
                        type: "string",
                        description:
                          "The amount of space remaining for use by the table (e.g., '133 MB').",
                      },
                    },
                  },
                  UpdateTableRequest: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                        description: "The new name for the table.",
                      },
                      singleRecordName: {
                        type: "string",
                        description:
                          "The new singular noun for records in the table. Defaults to 'Record' if not provided.",
                      },
                      pluralRecordName: {
                        type: "string",
                        description:
                          "The new plural noun for records in the table. Defaults to 'Records' if not provided.",
                      },
                      description: {
                        type: "string",
                        description:
                          "The new description for the table. Defaults to blank if not provided.",
                      },
                    },
                    description:
                      "Request body for updating table properties. At least one property must be provided.",
                  },
                  DeleteTableResponse: {
                    type: "object",
                    properties: {
                      deletedTableId: {
                        type: "string",
                        description: "The deleted table id.",
                      },
                    },
                  },
                  Record: {
                    type: "object",
                    properties: {
                      additionalProperties: {
                        type: "object",
                        properties: {
                          value: { type: "any" },
                        },
                      },
                    },
                    description: "A record with field ID keys and value objects.",
                  },
                  UpsertRequest: {
                    type: "object",
                    required: ["to"],
                    properties: {
                      to: { type: "string", description: "The table identifier (dbid)." },
                      data: {
                        type: "array",
                        items: { $ref: "#/definitions/Record" },
                        description: "Array of records to upsert.",
                      },
                      mergeFieldId: {
                        type: "integer",
                        description: "The field ID to merge on (optional).",
                      },
                      fieldsToReturn: {
                        type: "array",
                        items: { type: "integer" },
                        description: "Field IDs to return in the response (optional).",
                      },
                    },
                  },
                  Upsert200Response: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: {
                              value: { type: "any" },
                            },
                          },
                        },
                        description: "Array of upserted records with field IDs and values.",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          createdRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of newly created records.",
                          },
                          updatedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of updated records.",
                          },
                          unchangedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                            description: "IDs of unchanged records.",
                          },
                          totalNumberOfRecordsProcessed: {
                            type: "integer",
                            description: "Total records processed.",
                          },
                        },
                        required: ["totalNumberOfRecordsProcessed"],
                      },
                    },
                  },
                  Upsert207Response: {
                    type: "object",
                    properties: {
                      data: {
                        type: "array",
                        items: {
                          type: "object",
                          additionalProperties: {
                            type: "object",
                            properties: {
                              value: { type: "any" },
                            },
                          },
                        },
                        description: "Array of successfully upserted records (may be empty).",
                      },
                      metadata: {
                        type: "object",
                        properties: {
                          createdRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                          },
                          updatedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                          },
                          unchangedRecordIds: {
                            type: "array",
                            items: { type: "integer" },
                          },
                          lineErrors: {
                            type: "object",
                            additionalProperties: {
                              type: "array",
                              items: { type: "string" },
                            },
                            description: "Errors by line number (1-based index).",
                          },
                          totalNumberOfRecordsProcessed: {
                            type: "integer",
                          },
                        },
                        required: ["totalNumberOfRecordsProcessed"],
                      },
                    },
                  },
                  ReportRunResponse: {
                    type: "object",
                    properties: {
                      id: { type: "string" },
                      data: { type: "object" },
                    },
                  },
                  GetTempTokenDBID200Response: {
                    type: "object",
                    required: ["temporaryAuthorization"],
                    properties: {
                      temporaryAuthorization: { type: "string" },
                    },
                  },
                };
            - name: fix-spec-main.ts
              type: file
              contents: |
                #!/usr/bin/env node
                import { promises as fs } from "fs";
                import path from "path";
                import { fileURLToPath } from "url";
                import * as glob from "glob";
                import { paths } from "./fix-spec-paths.ts";
                import { definitions } from "./fix-spec-definitions.ts";

                interface Parameter {
                  name: string;
                  in: string;
                  required?: boolean;
                  type?: string;
                  schema?: { type?: string; items?: any; $ref?: string; properties?: any };
                  example?: any;
                }

                interface Operation {
                  parameters?: Parameter[];
                  responses?: Record<string, { description: string; schema?: any }>;
                  operationId?: string;
                  summary?: string;
                  tags?: string[];
                }

                interface Spec {
                  paths: Record<string, Record<string, Operation>>;
                  definitions?: Record<string, any>;
                  operations?: any;
                  groups?: any;
                  components?: any;
                }

                function toCamelCase(str: string): string {
                  return str
                    .replace(/[-_](.)/g, (_, char) => char.toUpperCase())
                    .replace(/^./, (str) => str.toLowerCase());
                }

                function fixArraySchemas(spec: Spec) {
                  for (const pathKey in spec.paths) {
                    for (const method in spec.paths[pathKey]) {
                      const operation = spec.paths[pathKey][method];
                      if (operation.parameters) {
                        operation.parameters.forEach((param: Parameter) => {
                          if (param.schema) {
                            if (param.schema.type === "array" && !param.schema.items) {
                              console.log(
                                `Fixing missing items in ${pathKey}(${method}).${param.name}`
                              );
                              param.schema.items =
                                pathKey === "/records" && param.name === "generated"
                                  ? { $ref: "#/definitions/Record" }
                                  : { type: "string" };
                            }
                            if (param.schema.properties) {
                              for (const propKey in param.schema.properties) {
                                const prop = param.schema.properties[propKey];
                                if (prop.type === "array" && !prop.items) {
                                  console.log(
                                    `Fixing nested array in ${pathKey}(${method}).${param.name}.${propKey}`
                                  );
                                  prop.items =
                                    propKey === "data" && pathKey === "/records"
                                      ? { $ref: "#/definitions/Record" }
                                      : { type: "string" };
                                }
                              }
                            }
                          }
                        });
                      }
                      if (operation.responses) {
                        for (const status in operation.responses) {
                          const response = operation.responses[status];
                          if (response.schema) {
                            if (response.schema.type === "array" && !response.schema.items) {
                              console.log(
                                `Fixing missing items in ${pathKey}(${method}).responses.${status}`
                              );
                              response.schema.items =
                                pathKey === "/records"
                                  ? { $ref: "#/definitions/Upsert200Response" }
                                  : { type: "string" };
                            }
                            if (response.schema.properties) {
                              for (const propKey in response.schema.properties) {
                                const prop = response.schema.properties[propKey];
                                if (prop.type === "array" && !prop.items) {
                                  console.log(
                                    `Fixing nested array in ${pathKey}(${method}).responses.${status}.${propKey}`
                                  );
                                  prop.items =
                                    propKey === "data" && pathKey === "/records"
                                      ? { $ref: "#/definitions/Upsert200Response" }
                                      : { type: "string" };
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                async function fixQuickBaseSpec(): Promise<void> {
                  try {
                    const CODEGEN_DIR = path.dirname(fileURLToPath(import.meta.url));
                    const SPECS_DIR = path.join(CODEGEN_DIR, "..", "specs");
                    const OUTPUT_DIR = path.join(CODEGEN_DIR, "output");
                    console.log("Finding latest QuickBase RESTful API spec...");
                    const specFiles = glob.sync(
                      path.join(SPECS_DIR, "QuickBase_RESTful_*.json")
                    );
                    if (specFiles.length === 0) {
                      console.error(
                        "No QuickBase_RESTful_*.json files found in specs/ folder."
                      );
                      process.exit(1);
                    }
                    const inputFile = specFiles.sort().pop() as string;
                    const outputFile = path.join(OUTPUT_DIR, "quickbase-fixed.json");

                    console.log(`Reading ${path.basename(inputFile)} from specs/...`);
                    const specContent = await fs.readFile(inputFile, "utf8");
                    const spec: Spec = JSON.parse(specContent);

                    console.log("Fixing parameters...");
                    for (const pathKey in spec.paths) {
                      for (const method in spec.paths[pathKey]) {
                        const operation = spec.paths[pathKey][method];
                        if (operation.parameters) {
                          operation.parameters = operation.parameters
                            .filter(
                              (param) =>
                                !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                                  param.name
                                )
                            )
                            .map((param: Parameter) => {
                              param.name = toCamelCase(param.name);
                              if ("example" in param) delete param.example;
                              if ("schema" in param && param.in !== "body") delete param.schema;
                              if (!param.type && param.in !== "body") param.type = "string";
                              return param;
                            });
                        }
                      }
                    }

                    console.log("Applying endpoint fixes...");
                    spec.paths = { ...spec.paths, ...paths }; // Merge original and custom paths

                    console.log("Fixing array schemas...");
                    fixArraySchemas(spec);

                    console.log("Applying definitions...");
                    spec.definitions = { ...spec.definitions, ...definitions }; // Merge definitions

                    console.log("Removing unexpected top-level attributes...");
                    delete spec.operations;
                    delete spec.groups;
                    delete spec.components;

                    console.log(`Writing fixed spec to ${path.basename(outputFile)}...`);
                    await fs.mkdir(OUTPUT_DIR, { recursive: true });
                    await fs.writeFile(outputFile, JSON.stringify(spec, null, 2), "utf8");
                    console.log("Spec fixed successfully!");
                  } catch (error) {
                    console.error("Failed to fix spec:", error);
                    process.exit(1);
                  }
                }

                fixQuickBaseSpec();
            - name: fix-spec-paths.ts
              type: file
              contents: |
                // src/code-generation/fix-spec-paths.ts
                export const paths = {
                  "/apps": {
                    post: {
                      operationId: "createApp",
                      summary: "Create a new application",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/CreateAppRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - application created",
                          schema: { $ref: "#/definitions/CreateApp200Response" },
                        },
                      },
                    },
                  },
                  "/apps/{appId}": {
                    get: {
                      operationId: "getApp",
                      summary: "Get an app by ID",
                      tags: ["Apps"],
                      parameters: [
                        {
                          name: "appId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The application identifier.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: { $ref: "#/definitions/App" },
                        },
                      },
                    },
                  },
                  "/fields": {
                    get: {
                      operationId: "getFields",
                      summary: "Get all fields for a table",
                      tags: ["Fields"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "includeFieldPerms",
                          in: "query",
                          required: false,
                          type: "boolean",
                          description: "Whether to include field permissions.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Field" },
                          },
                        },
                      },
                    },
                  },
                  "/tables": {
                    get: {
                      operationId: "getAppTables",
                      summary: "Get all tables for an app",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The application identifier.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Table" },
                          },
                        },
                      },
                    },
                  },
                  "/tables/{tableId}": {
                    get: {
                      operationId: "getTable",
                      summary: "Get a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table retrieved",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                    patch: {
                      operationId: "updateTable",
                      summary: "Update a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/UpdateTableRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table updated",
                          schema: { $ref: "#/definitions/Table" },
                        },
                      },
                    },
                    delete: {
                      operationId: "deleteTable",
                      summary: "Delete a table by ID",
                      tags: ["Tables"],
                      parameters: [
                        {
                          name: "tableId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The table identifier (dbid).",
                        },
                        {
                          name: "appId",
                          in: "query",
                          required: true,
                          type: "string",
                          description: "The unique identifier of the app containing the table.",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - table deleted",
                          schema: { $ref: "#/definitions/DeleteTableResponse" },
                        },
                      },
                    },
                  },
                  "/records": {
                    post: {
                      operationId: "upsert",
                      summary: "Upsert records in a table",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "body",
                          in: "body",
                          required: true,
                          schema: { $ref: "#/definitions/UpsertRequest" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success - all records processed successfully",
                          schema: { $ref: "#/definitions/Upsert200Response" },
                        },
                        207: {
                          description: "Multi-Status - partial success with some errors",
                          schema: { $ref: "#/definitions/Upsert207Response" },
                        },
                      },
                    },
                  },
                  "/records/query": {
                    post: {
                      operationId: "upsertRecords",
                      summary: "Upsert records (alternative endpoint)",
                      tags: ["Records"],
                      parameters: [
                        {
                          name: "generated",
                          in: "body",
                          required: true,
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Record" },
                          },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Upsert200Response" },
                          },
                        },
                        207: {
                          description: "Multi-Status (partial success)",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/Upsert207Response" },
                          },
                        },
                      },
                    },
                  },
                  "/reports/{reportId}/run": {
                    post: {
                      operationId: "runReport",
                      summary: "Run a report",
                      tags: ["Reports"],
                      parameters: [
                        {
                          name: "reportId",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The report identifier.",
                        },
                        {
                          name: "generated",
                          in: "body",
                          required: true,
                          schema: { type: "object" },
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: {
                            type: "array",
                            items: { $ref: "#/definitions/ReportRunResponse" },
                          },
                        },
                      },
                    },
                  },
                  "/auth/temporary/{dbid}": {
                    get: {
                      operationId: "getTempTokenDBID",
                      summary: "Get a temporary authorization token for a specific dbid",
                      tags: ["Auth"],
                      parameters: [
                        {
                          name: "dbid",
                          in: "path",
                          required: true,
                          type: "string",
                          description: "The database identifier (dbid).",
                        },
                      ],
                      responses: {
                        200: {
                          description: "Success",
                          schema: { $ref: "#/definitions/GetTempTokenDBID200Response" },
                        },
                      },
                    },
                  },
                };
            - name: generate-unified-interface.ts
              type: file
              contents: |
                // src/code-generation/generate-unified-interface.ts
                import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
                import { join, dirname } from "path";
                import { fileURLToPath } from "url";
                import { simplifyName } from "../utils.ts";
                import { OpenAPIV2 } from "openapi-types";

                const __dirname = dirname(fileURLToPath(import.meta.url));
                const SPEC_FILE = join(__dirname, "output", "quickbase-fixed.json");
                const OUTPUT_DIR = join(__dirname, "..", "generated-unified");
                const OUTPUT_FILE = join(OUTPUT_DIR, "QuickbaseClient.ts");

                function generateInterface() {
                  if (!existsSync(SPEC_FILE)) {
                    console.error(
                      `Spec file ${SPEC_FILE} not found. Run 'npm run fix-spec' first.`
                    );
                    process.exit(1);
                  }

                  console.log("Generating unified QuickbaseClient interface...");
                  const spec = JSON.parse(
                    readFileSync(SPEC_FILE, "utf8")
                  ) as OpenAPIV2.Document;
                  const { paths } = spec;

                  const modelImports = new Set<string>();
                  const methods: string[] = [];

                  for (const [path, methodsObj] of Object.entries(
                    paths as OpenAPIV2.PathsObject
                  )) {
                    if (!methodsObj) continue;

                    for (const [method, operation] of Object.entries(
                      methodsObj as OpenAPIV2.PathItemObject
                    )) {
                      const op = operation as OpenAPIV2.OperationObject | undefined;
                      if (!op || !op.operationId) continue;

                      const opId = op.operationId;
                      const params = (op.parameters || [])
                        .filter((p) => {
                          const param = p as OpenAPIV2.ParameterObject;
                          return !["QB-Realm-Hostname", "Authorization", "User-Agent"].includes(
                            param.name
                          );
                        })
                        .map((p) => {
                          const param = p as OpenAPIV2.ParameterObject;
                          let type = param.type
                            ? mapOpenApiTypeToTs(param.type)
                            : param.schema
                            ? mapRefToType(param.schema, modelImports)
                            : "any";
                          // Special handling for upsertRecords 'generated' parameter
                          if (opId === "upsertRecords" && param.name === "generated") {
                            type = "{ [key: string]: string }[]";
                          }
                          return `${param.name}${param.required ? "" : "?"}: ${type}`;
                        })
                        .join("; ");

                      // Handle responses, ensuring distinct types for 200 and 207
                      const successResponses = ["200", "207"]
                        .map((code) => ({
                          code,
                          response: op.responses?.[code] as
                            | OpenAPIV2.ResponseObject
                            | undefined,
                        }))
                        .filter(({ response }) => response?.schema);
                      const returnTypes = successResponses.map(({ response }) =>
                        mapRefToType(response!.schema, modelImports)
                      );
                      // Deduplicate return types and join with " | ", default to "void" if empty
                      const uniqueReturnTypes = [...new Set(returnTypes)];
                      const returnType =
                        uniqueReturnTypes.length > 0 ? uniqueReturnTypes.join(" | ") : "void";

                      methods.push(
                        `  ${opId}: (params: { ${params} }) => Promise<${returnType}>;`
                      );
                    }
                  }

                  // Generate import statements for all model types
                  const importStatement =
                    modelImports.size > 0
                      ? `import { ${Array.from(modelImports)
                          .sort()
                          .join(", ")} } from "../generated/models";`
                      : "";

                  const interfaceContent = `// Generated on ${new Date().toISOString()}\n${importStatement}\n\nexport interface QuickbaseClient {\n${methods.join(
                    "\n"
                  )}\n}\n`;

                  if (!existsSync(OUTPUT_DIR)) {
                    mkdirSync(OUTPUT_DIR, { recursive: true });
                  }
                  writeFileSync(OUTPUT_FILE, interfaceContent, "utf8");
                  console.log(`Generated ${OUTPUT_FILE}`);
                }

                function mapOpenApiTypeToTs(openApiType: string): string {
                  switch (openApiType.toLowerCase()) {
                    case "integer":
                    case "int":
                      return "number";
                    case "string":
                      return "string";
                    case "boolean":
                      return "boolean";
                    default:
                      return "any";
                  }
                }

                function mapRefToType(
                  schema: OpenAPIV2.SchemaObject | OpenAPIV2.ReferenceObject,
                  modelImports: Set<string>
                ): string {
                  if ("$ref" in schema) {
                    const model = schema.$ref.split("/").pop()!;
                    modelImports.add(model);
                    return model;
                  }
                  if (schema.type === "array" && schema.items) {
                    const itemType =
                      "$ref" in schema.items
                        ? schema.items.$ref.split("/").pop()!
                        : mapOpenApiTypeToTs(schema.items.type || "any");
                    if ("$ref" in schema.items) modelImports.add(itemType);
                    return `${itemType}[]`;
                  }
                  if (schema.type === "object" && schema.additionalProperties) {
                    const valueType = schema.additionalProperties.$ref
                      ? schema.additionalProperties.$ref.split("/").pop()!
                      : mapOpenApiTypeToTs(schema.additionalProperties.type || "any");
                    if (schema.additionalProperties.$ref) modelImports.add(valueType);
                    return `{ [key: string]: ${valueType} }`;
                  }
                  return mapOpenApiTypeToTs(schema.type || "any");
                }

                try {
                  generateInterface();
                } catch (error) {
                  console.error("Generation failed:", error);
                  process.exit(1);
                }
            - name: output
              type: directory
              children:
                - name: quickbase-fixed.json
                  type: file
            - name: regenerate-client.ts
              type: file
              contents: |
                #!/usr/bin/env node
                import { execSync } from "child_process";
                import { existsSync } from "fs";
                import { join } from "path";
                import { fileURLToPath } from "url";
                import fetch from "node-fetch";
                import readline from "readline";

                const CURRENT_JAR_VERSION = "7.12.0";
                const MAVEN_METADATA_URL =
                  "https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/maven-metadata.xml";
                const CODEGEN_DIR = join(fileURLToPath(import.meta.url), "..");
                const JARS_DIR = join(CODEGEN_DIR, "..", "openapi-jars");
                const SPEC_INPUT = join(CODEGEN_DIR, "output", "quickbase-fixed.json"); // Updated path
                const OUTPUT_DIR = join(CODEGEN_DIR, "..", "generated");

                async function getLatestVersion(): Promise<string> {
                  const response = await fetch(MAVEN_METADATA_URL);
                  if (!response.ok)
                    throw new Error(`Failed to fetch Maven metadata: ${response.statusText}`);
                  const text = await response.text();
                  const match = text.match(/<latest>(.*?)<\/latest>/);
                  if (!match)
                    throw new Error("Couldn’t parse latest version from Maven metadata");
                  return match[1];
                }

                async function checkAndPromptForUpdate(messages: string[]): Promise<string> {
                  const latestVersion = await getLatestVersion();
                  if (latestVersion === CURRENT_JAR_VERSION) {
                    messages.push(`Current version (${CURRENT_JAR_VERSION}) is the latest.`);
                    return CURRENT_JAR_VERSION;
                  }

                  messages.push(
                    `Newer version available: ${latestVersion} (current: ${CURRENT_JAR_VERSION})`
                  );
                  const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout,
                  });

                  return new Promise((resolve) => {
                    const prompt = "Do you want to update to the latest version? (y/n): ";
                    messages.push(prompt);
                    rl.question(prompt, (answer) => {
                      rl.close();
                      if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
                        messages.push(`Switching to version ${latestVersion}...`);
                        resolve(latestVersion);
                      } else {
                        messages.push(`Sticking with version ${CURRENT_JAR_VERSION}.`);
                        resolve(CURRENT_JAR_VERSION);
                      }
                    });
                  });
                }

                async function ensureJarExists(
                  version: string,
                  messages: string[]
                ): Promise<string> {
                  const jarPath = join(JARS_DIR, `openapi-generator-cli-${version}.jar`);
                  const jarUrl = `https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${version}/openapi-generator-cli-${version}.jar`;

                  if (!existsSync(jarPath)) {
                    messages.push(`Downloading OpenAPI Generator CLI v${version}...`);
                    try {
                      execSync(`curl -L -o ${jarPath} ${jarUrl}`, { stdio: "inherit" });
                      messages.push(`Downloaded ${jarPath}`);
                    } catch (error) {
                      messages.push("Failed to download JAR.");
                      throw error;
                    }
                  } else {
                    messages.push(`Using existing ${jarPath}`);
                  }
                  return jarPath;
                }

                function regenerateClient(jarPath: string, messages: string[]) {
                  messages.push("Regenerating client from spec...");
                  const command = `java -jar ${jarPath} generate -i ${SPEC_INPUT} -g typescript-fetch -o ${OUTPUT_DIR}`;
                  try {
                    execSync(command, { stdio: "inherit" });
                    messages.push("Client regeneration complete.");
                  } catch (error) {
                    messages.push("Regeneration failed.");
                    throw error;
                  }
                }

                async function main() {
                  const messages: string[] = [];
                  try {
                    const versionToUse = await checkAndPromptForUpdate(messages);
                    const jarPath = await ensureJarExists(versionToUse, messages);
                    regenerateClient(jarPath, messages);
                  } catch (error) {
                    console.error("Error occurred during process:", error);
                  } finally {
                    console.log("\n--- Key Messages ---");
                    messages.forEach((msg) => console.log(msg));
                  }
                }

                main().catch((error) => {
                  console.error("Error in regeneration process:", error);
                  process.exit(1);
                });
        - name: generated
          type: directory
          children:
            - name: .openapi-generator
              type: directory
              children:
                - name: FILES
                  type: file
                - name: VERSION
                  type: file
            - name: .openapi-generator-ignore
              type: file
            - name: apis
              type: directory
              children:
                - name: AppsApi.ts
                  type: file
                - name: AuditApi.ts
                  type: file
                - name: AuthApi.ts
                  type: file
                - name: DocumentTemplatesApi.ts
                  type: file
                - name: FieldsApi.ts
                  type: file
                - name: FilesApi.ts
                  type: file
                - name: FormulasApi.ts
                  type: file
                - name: PlatformAnalyticsApi.ts
                  type: file
                - name: RecordsApi.ts
                  type: file
                - name: ReportsApi.ts
                  type: file
                - name: SolutionsApi.ts
                  type: file
                - name: TablesApi.ts
                  type: file
                - name: UserTokenApi.ts
                  type: file
                - name: UsersApi.ts
                  type: file
                - name: index.ts
                  type: file
            - name: index.ts
              type: file
            - name: models
              type: directory
              children:
                - name: AddMembersToGroup200Response.ts
                  type: file
                - name: AddSubgroupsToGroup200Response.ts
                  type: file
                - name: App.ts
                  type: file
                - name: AppMemoryInfo.ts
                  type: file
                - name: AppSecurityProperties.ts
                  type: file
                - name: Audit200Response.ts
                  type: file
                - name: Audit202Response.ts
                  type: file
                - name: AuditRequest.ts
                  type: file
                - name: CloneUserToken200Response.ts
                  type: file
                - name: CloneUserTokenRequest.ts
                  type: file
                - name: CopyApp200Response.ts
                  type: file
                - name: CopyAppRequest.ts
                  type: file
                - name: CreateApp200Response.ts
                  type: file
                - name: CreateAppRequest.ts
                  type: file
                - name: CreateAppRequestVariablesInner.ts
                  type: file
                - name: CreateRelationship200Response.ts
                  type: file
                - name: CreateRelationshipRequest.ts
                  type: file
                - name: DeactivateUserToken200Response.ts
                  type: file
                - name: DeleteFile200Response.ts
                  type: file
                - name: DeleteRecords200Response.ts
                  type: file
                - name: DeleteRecordsRequest.ts
                  type: file
                - name: DeleteRelationship200Response.ts
                  type: file
                - name: DeleteTable200Response.ts
                  type: file
                - name: DeleteTableResponse.ts
                  type: file
                - name: DenyUsers200Response.ts
                  type: file
                - name: ExchangeSsoToken200Response.ts
                  type: file
                - name: ExchangeSsoTokenRequest.ts
                  type: file
                - name: Field.ts
                  type: file
                - name: FieldPermissionsInner.ts
                  type: file
                - name: FieldProperties.ts
                  type: file
                - name: GenerateDocument200Response.ts
                  type: file
                - name: GetField200Response.ts
                  type: file
                - name: GetRelationships200Response.ts
                  type: file
                - name: GetReport200Response.ts
                  type: file
                - name: GetTable200Response.ts
                  type: file
                - name: GetTempTokenDBID200Response.ts
                  type: file
                - name: GetUsers200Response.ts
                  type: file
                - name: GetUsersRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200Response.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: file
                - name: PlatformAnalyticReads200Response.ts
                  type: file
                - name: Record.ts
                  type: file
                - name: RemoveMembersFromGroup200Response.ts
                  type: file
                - name: RemoveSubgroupsFromGroup200Response.ts
                  type: file
                - name: ReportRunResponse.ts
                  type: file
                - name: RunFormula200Response.ts
                  type: file
                - name: RunFormulaRequest.ts
                  type: file
                - name: Table.ts
                  type: file
                - name: TransferUserToken200Response.ts
                  type: file
                - name: TransferUserTokenRequest.ts
                  type: file
                - name: UndenyUsers200Response.ts
                  type: file
                - name: UpdateFieldRequest.ts
                  type: file
                - name: UpdateRelationshipRequest.ts
                  type: file
                - name: UpdateTableRequest.ts
                  type: file
                - name: Upsert200Response.ts
                  type: file
                - name: Upsert200ResponseMetadata.ts
                  type: file
                - name: Upsert207Response.ts
                  type: file
                - name: Upsert207ResponseMetadata.ts
                  type: file
                - name: Upsert400Response.ts
                  type: file
                - name: UpsertRequest.ts
                  type: file
                - name: index.ts
                  type: file
            - name: runtime.ts
              type: file
        - name: generated-old
          type: directory
          children:
            - name: .openapi-generator
              type: directory
              children:
                - name: FILES
                  type: file
                - name: VERSION
                  type: file
            - name: .openapi-generator-ignore
              type: file
            - name: apis
              type: directory
              children:
                - name: AppsApi.ts
                  type: file
                - name: AuditApi.ts
                  type: file
                - name: AuthApi.ts
                  type: file
                - name: DocumentTemplatesApi.ts
                  type: file
                - name: FieldsApi.ts
                  type: file
                - name: FilesApi.ts
                  type: file
                - name: FormulasApi.ts
                  type: file
                - name: PlatformAnalyticsApi.ts
                  type: file
                - name: RecordsApi.ts
                  type: file
                - name: ReportsApi.ts
                  type: file
                - name: SolutionsApi.ts
                  type: file
                - name: TablesApi.ts
                  type: file
                - name: UserTokenApi.ts
                  type: file
                - name: UsersApi.ts
                  type: file
                - name: index.ts
                  type: file
            - name: index.ts
              type: file
            - name: models
              type: directory
              children:
                - name: AddMembersToGroup200Response.ts
                  type: file
                - name: AddSubgroupsToGroup200Response.ts
                  type: file
                - name: App.ts
                  type: file
                - name: AppMemoryInfo.ts
                  type: file
                - name: AppSecurityProperties.ts
                  type: file
                - name: Audit200Response.ts
                  type: file
                - name: Audit202Response.ts
                  type: file
                - name: AuditRequest.ts
                  type: file
                - name: CloneUserToken200Response.ts
                  type: file
                - name: CloneUserTokenRequest.ts
                  type: file
                - name: CopyApp200Response.ts
                  type: file
                - name: CopyAppRequest.ts
                  type: file
                - name: CreateApp200Response.ts
                  type: file
                - name: CreateAppRequest.ts
                  type: file
                - name: CreateField200Response.ts
                  type: file
                - name: CreateRelationship200Response.ts
                  type: file
                - name: CreateRelationshipRequest.ts
                  type: file
                - name: DeactivateUserToken200Response.ts
                  type: file
                - name: DeleteApp200Response.ts
                  type: file
                - name: DeleteAppRequest.ts
                  type: file
                - name: DeleteFields200Response.ts
                  type: file
                - name: DeleteFile200Response.ts
                  type: file
                - name: DeleteRelationship200Response.ts
                  type: file
                - name: DenyUsers200Response.ts
                  type: file
                - name: ExchangeSsoToken200Response.ts
                  type: file
                - name: ExchangeSsoTokenRequest.ts
                  type: file
                - name: Field.ts
                  type: file
                - name: FieldPermissionsInner.ts
                  type: file
                - name: FieldProperties.ts
                  type: file
                - name: GenerateDocument200Response.ts
                  type: file
                - name: GetField200Response.ts
                  type: file
                - name: GetRelationships200Response.ts
                  type: file
                - name: GetReport200Response.ts
                  type: file
                - name: GetTempTokenDBID200Response.ts
                  type: file
                - name: GetUsers200Response.ts
                  type: file
                - name: GetUsersRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200Response.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseMetadata.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerEventTypesInner.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseResultsInnerTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseTotals.ts
                  type: file
                - name: PlatformAnalyticEventSummaries200ResponseWhereInner.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequest.ts
                  type: file
                - name: PlatformAnalyticEventSummariesRequestWhereInner.ts
                  type: file
                - name: PlatformAnalyticReads200Response.ts
                  type: file
                - name: RemoveMembersFromGroup200Response.ts
                  type: file
                - name: RemoveSubgroupsFromGroup200Response.ts
                  type: file
                - name: RunFormula200Response.ts
                  type: file
                - name: RunFormulaRequest.ts
                  type: file
                - name: RunQuery200Response.ts
                  type: file
                - name: RunQueryRequest.ts
                  type: file
                - name: RunReport200Response.ts
                  type: file
                - name: Table.ts
                  type: file
                - name: TransferUserToken200Response.ts
                  type: file
                - name: TransferUserTokenRequest.ts
                  type: file
                - name: UndenyUsers200Response.ts
                  type: file
                - name: UpdateApp200Response.ts
                  type: file
                - name: UpdateAppRequest.ts
                  type: file
                - name: UpdateFieldRequest.ts
                  type: file
                - name: UpdateRelationshipRequest.ts
                  type: file
                - name: Upsert200Response.ts
                  type: file
                - name: index.ts
                  type: file
            - name: runtime.ts
              type: file
        - name: generated-unified
          type: directory
          children:
            - name: QuickbaseClient.ts
              type: file
              contents: |
                // Generated on 2025-03-10T05:25:52.099Z
                import { App, CreateApp200Response, CreateAppRequest, DeleteTableResponse, Field, GetTempTokenDBID200Response, Record, ReportRunResponse, Table, UpdateTableRequest, Upsert200Response, Upsert207Response, UpsertRequest } from "../generated/models";

                export interface QuickbaseClient {
                  createApp: (params: { body: CreateAppRequest }) => Promise<CreateApp200Response>;
                  getApp: (params: { appId: string }) => Promise<App>;
                  getAppEvents: (params: { appId: string }) => Promise<any[]>;
                  copyApp: (params: { appId: string; generated?: any }) => Promise<{ [key: string]: any }>;
                  getAppTables: (params: { appId: string }) => Promise<Table[]>;
                  getTable: (params: { tableId: string; appId: string }) => Promise<Table>;
                  updateTable: (params: { tableId: string; appId: string; body: UpdateTableRequest }) => Promise<Table>;
                  deleteTable: (params: { tableId: string; appId: string }) => Promise<DeleteTableResponse>;
                  getRelationships: (params: { skip?: number; tableId: string }) => Promise<{ [key: string]: any }>;
                  createRelationship: (params: { tableId: string; generated?: any }) => Promise<{ [key: string]: any }>;
                  updateRelationship: (params: { tableId: string; relationshipId: any; generated?: any }) => Promise<{ [key: string]: any }>;
                  deleteRelationship: (params: { tableId: string; relationshipId: any }) => Promise<{ [key: string]: any }>;
                  getTableReports: (params: { tableId: string }) => Promise<any[]>;
                  getReport: (params: { tableId: string; reportId: string }) => Promise<{ [key: string]: any }>;
                  runReport: (params: { reportId: string; generated: any }) => Promise<ReportRunResponse[]>;
                  getFields: (params: { tableId: string; includeFieldPerms?: boolean }) => Promise<Field[]>;
                  getField: (params: { tableId: string; includeFieldPerms?: boolean; fieldId: number }) => Promise<{ [key: string]: any }>;
                  updateField: (params: { tableId: string; fieldId: number; generated?: any }) => Promise<{ [key: string]: any }>;
                  getFieldsUsage: (params: { tableId: string; skip?: number; top?: number }) => Promise<any[]>;
                  getFieldUsage: (params: { tableId: string; fieldId: number }) => Promise<any[]>;
                  runFormula: (params: { generated?: any }) => Promise<{ [key: string]: any }>;
                  upsert: (params: { body: UpsertRequest }) => Promise<Upsert200Response | Upsert207Response>;
                  upsertRecords: (params: { generated: { [key: string]: string }[] }) => Promise<Upsert200Response[] | Upsert207Response[]>;
                  getTempTokenDBID: (params: { dbid: string }) => Promise<GetTempTokenDBID200Response>;
                  exchangeSsoToken: (params: { generated?: any }) => Promise<{ [key: string]: any }>;
                  cloneUserToken: (params: { generated?: any }) => Promise<{ [key: string]: any }>;
                  transferUserToken: (params: { generated?: any }) => Promise<{ [key: string]: any }>;
                  deactivateUserToken: (params: {  }) => Promise<{ [key: string]: any }>;
                  deleteUserToken: (params: {  }) => Promise<{ [key: string]: any }>;
                  downloadFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<any>;
                  deleteFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<{ [key: string]: any }>;
                  getUsers: (params: { accountId?: any; generated?: { [key: string]: any } }) => Promise<{ [key: string]: any }>;
                  denyUsers: (params: { accountId?: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  denyUsersAndGroups: (params: { accountId?: any; shouldDeleteFromGroups: boolean; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  undenyUsers: (params: { accountId?: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  addMembersToGroup: (params: { gid: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  removeMembersFromGroup: (params: { gid: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  addManagersToGroup: (params: { gid: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  removeManagersFromGroup: (params: { gid: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  addSubgroupsToGroup: (params: { gid: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  removeSubgroupsFromGroup: (params: { gid: any; generated?: string[] }) => Promise<{ [key: string]: any }>;
                  audit: (params: { generated?: any }) => Promise<{ [key: string]: any }>;
                  platformAnalyticReads: (params: { day?: string }) => Promise<{ [key: string]: any }>;
                  platformAnalyticEventSummaries: (params: { accountId?: any; generated?: any }) => Promise<any>;
                  exportSolution: (params: { solutionId: string; qBLVersion?: string }) => Promise<any>;
                  updateSolution: (params: { solutionId: string; generated?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
                  createSolution: (params: { generated?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
                  exportSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; xQBLErrorsAsSuccess?: boolean; qBLVersion?: string }) => Promise<any>;
                  createSolutionFromRecord: (params: { tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
                  updateSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
                  changesetSolution: (params: { solutionId: string; generated?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
                  changesetSolutionFromRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
                  generateDocument: (params: { templateId: any; tableId: string; recordId?: any; filename: string; accept?: string; format?: string; margin?: string; unit?: string; pageSize?: string; orientation?: string; realm?: string }) => Promise<{ [key: string]: any }>;
                }
        - name: index.ts
          type: file
        - name: log-gen.ts
          type: file
        - name: openapi-jars
          type: directory
          children:
            - name: openapi-generator-cli-7.12.0.jar
              type: file
        - name: quickbaseClient.ts
          type: file
          contents: |
            // src/quickbaseClient.ts
            import { QuickbaseClient as IQuickbaseClient } from "./generated-unified/QuickbaseClient.ts";
            import {
              Configuration,
              HTTPHeaders,
              ResponseError,
            } from "./generated/runtime.ts";
            import * as apis from "./generated/apis/index.ts";
            import { simplifyName } from "./utils.ts";
            import { TokenCache } from "./tokenCache.ts";

            // Re-export all model types from generated/models
            export * from "./generated/models";

            // Rename the interface to avoid naming conflict if needed
            export interface QuickbaseClient extends IQuickbaseClient {}

            export interface QuickbaseConfig {
              realm: string;
              userToken?: string;
              tempToken?: string;
              useTempTokens?: boolean;
              debug?: boolean;
              fetchApi?: typeof fetch;
            }

            export interface TempTokenParams {
              appId?: string;
              tableId?: string;
              dbid?: string;
            }

            type ApiMethod<K extends keyof QuickbaseClient> = (
              requestParameters: Parameters<QuickbaseClient[K]>[0],
              initOverrides?: RequestInit
            ) => Promise<ReturnType<QuickbaseClient[K]>>;

            interface MethodInfo<K extends keyof QuickbaseClient> {
              api: any;
              method: ApiMethod<K>;
              paramMap: string[];
            }

            type MethodMap = { [K in keyof QuickbaseClient]: MethodInfo<K> };

            const getParamNames = (fn: (...args: any[]) => any): string[] =>
              fn
                .toString()
                .slice(fn.toString().indexOf("(") + 1, fn.toString().indexOf(")"))
                .split(",")
                .map((p) => p.trim().split("=")[0].trim())
                .filter((p) => p && !p.match(/^\{/) && p !== "options");

            // Utility function to extract dbid, prioritizing dbid, then tableId, then appId
            const extractDbid = (
              params: Partial<TempTokenParams>,
              errorMessage: string
            ): string => {
              const dbid = params.dbid || params.tableId || params.appId;
              if (!dbid) {
                throw new Error(errorMessage);
              }
              return dbid;
            };

            export function quickbase(config: QuickbaseConfig): QuickbaseClient {
              const {
                realm,
                userToken,
                tempToken: initialTempToken,
                useTempTokens,
                fetchApi,
                debug,
              } = config;
              const baseUrl = `https://api.quickbase.com/v1`;

              const tokenCache = new TokenCache();

              const headers: HTTPHeaders = {
                "QB-Realm-Hostname": `${realm}.quickbase.com`,
                "Content-Type": "application/json",
              };

              if (initialTempToken) {
                headers["Authorization"] = `QB-TEMP-TOKEN ${initialTempToken}`;
              } else if (userToken && !useTempTokens) {
                headers["Authorization"] = `QB-USER-TOKEN ${userToken}`;
              }

              const defaultFetch: typeof fetch | undefined =
                typeof globalThis.window !== "undefined"
                  ? globalThis.window.fetch.bind(globalThis.window)
                  : undefined;
              const configuration = new Configuration({
                basePath: baseUrl,
                headers: { ...headers },
                fetchApi: fetchApi || defaultFetch,
                credentials: useTempTokens ? "include" : "omit",
              });

              if (!configuration.fetchApi && typeof globalThis.window === "undefined") {
                throw new Error(
                  "fetchApi must be provided in non-browser environments (e.g., Node.js)"
                );
              }

              const apiInstances = Object.fromEntries(
                Object.entries(apis)
                  .filter(([name]) => name.endsWith("Api"))
                  .map(([name, ApiClass]) => [
                    name.replace("Api", "").toLowerCase(),
                    new ApiClass(configuration),
                  ])
              );

              const methodMap = buildMethodMap();

              function buildMethodMap(): MethodMap {
                const methodMap: Partial<MethodMap> = {};
                const isValidMethod = (name: string) =>
                  !name.startsWith("_") &&
                  name !== "constructor" &&
                  !["Middleware", "Pre", "Post", "Raw"].some((s) => name.includes(s));

                for (const [apiName, api] of Object.entries(apiInstances)) {
                  Object.getOwnPropertyNames(Object.getPrototypeOf(api))
                    .filter(
                      (name) =>
                        isValidMethod(name) &&
                        typeof api[name as keyof typeof api] === "function"
                    )
                    .forEach((rawMethodName) => {
                      const simplifiedName = simplifyName(
                        rawMethodName
                      ) as keyof QuickbaseClient;
                      const method = api[rawMethodName as keyof typeof api];
                      const boundMethod = method.bind(api) as unknown;
                      if (typeof boundMethod === "function" && boundMethod.length <= 2) {
                        methodMap[simplifiedName] = {
                          api,
                          method: boundMethod as ApiMethod<typeof simplifiedName>,
                          paramMap: getParamNames(method),
                        };
                        if (debug)
                          console.log(`Mapped ${rawMethodName} to ${simplifiedName}`);
                      }
                    });
                }
                return methodMap as MethodMap;
              }

              const fetchTempToken = async (dbid: string): Promise<string> => {
                const effectiveFetch = fetchApi || defaultFetch;
                if (!effectiveFetch) {
                  throw new Error(
                    "No fetch implementation available for fetching temp token"
                  );
                }

                const response = await effectiveFetch(
                  `https://api.quickbase.com/v1/auth/temporary/${dbid}`,
                  {
                    method: "GET",
                    headers: { ...headers },
                    credentials: "include",
                  }
                );

                if (!response.ok) {
                  const errorBody: { message?: string } = await response.json();
                  throw new Error(
                    `API Error: ${errorBody.message || "Unknown error"} (Status: ${
                      response.status
                    })`
                  );
                }

                const tokenResult = await response.json();
                const token = tokenResult.temporaryAuthorization;
                if (!token) {
                  throw new Error("No temporary token returned from API");
                }
                tokenCache.set(dbid, token);
                if (debug) {
                  console.log(
                    `Fetched and cached new token for dbid: ${dbid}`,
                    token,
                    `Expires at: ${new Date(
                      Date.now() + (4 * 60 + 50) * 1000
                    ).toISOString()}`
                  );
                }
                return token;
              };

              const invokeMethod = async <K extends keyof QuickbaseClient>(
                methodName: K,
                params: Parameters<QuickbaseClient[K]>[0] & Partial<TempTokenParams>,
                retryCount: number = 0
              ): Promise<ReturnType<QuickbaseClient[K]>> => {
                const methodInfo = methodMap[methodName];
                if (!methodInfo) {
                  console.error(`Method ${methodName} not found in methodMap`, methodMap);
                  throw new Error(`Method ${methodName} not found`);
                }

                let token =
                  initialTempToken || (userToken && !useTempTokens ? userToken : undefined);
                let initOverrides: RequestInit = {};

                if (methodName === "getTempTokenDBID" && useTempTokens) {
                  const dbid = extractDbid(params, "No dbid provided for getTempTokenDBID");
                  const cachedToken = tokenCache.get(dbid);
                  if (cachedToken) {
                    return { temporaryAuthorization: cachedToken } as ReturnType<
                      QuickbaseClient[K]
                    >;
                  }
                }

                if (useTempTokens && !token) {
                  const dbid = extractDbid(
                    params,
                    `No dbid found in params for ${methodName} to fetch temp token`
                  );
                  if (debug)
                    console.log(`Cache state before fetch for ${dbid}:`, tokenCache.dump());
                  const cachedToken = tokenCache.get(dbid);
                  if (cachedToken) {
                    token = cachedToken;
                    if (debug) console.log(`Reusing cached token for dbid: ${dbid}`, token);
                  } else {
                    if (typeof globalThis.window === "undefined" && !fetchApi) {
                      throw new Error(
                        "Temporary tokens require a browser environment or a custom fetchApi with browser-like session support"
                      );
                    }
                    token = await fetchTempToken(dbid);
                    if (methodName === "getTempTokenDBID") {
                      return { temporaryAuthorization: token } as ReturnType<
                        QuickbaseClient[K]
                      >;
                    }
                  }
                  initOverrides.headers = {
                    ...headers,
                    Authorization: `QB-TEMP-TOKEN ${token}`,
                  };
                }

                if (debug) console.log(`Invoking ${methodName} with params:`, params);
                if (debug)
                  console.log(`Calling method with args:`, [params, initOverrides]);
                const args: [any, RequestInit | undefined] =
                  methodInfo.paramMap.length === 1 &&
                  methodInfo.paramMap[0] === "requestParameters"
                    ? [params, initOverrides]
                    : [params, initOverrides];

                try {
                  const response = await methodInfo.method(...args);
                  if (debug) console.log(`Response from ${methodName}:`, response);
                  return response;
                } catch (error) {
                  if (
                    error instanceof ResponseError &&
                    error.response.status === 401 &&
                    retryCount < 1
                  ) {
                    if (debug)
                      console.log(
                        `Authorization error for ${methodName}, refreshing token:`,
                        error.message
                      );
                    const dbid = extractDbid(
                      params,
                      `No dbid to refresh token after authorization error`
                    );
                    token = await fetchTempToken(dbid);
                    initOverrides.headers = {
                      ...headers,
                      Authorization: `QB-TEMP-TOKEN ${token}`,
                    };
                    if (debug) console.log(`Retrying ${methodName} with new token`);
                    return invokeMethod(methodName, params, retryCount + 1);
                  }
                  if (error instanceof ResponseError) {
                    let errorMessage = error.message;
                    try {
                      const errorBody: { message?: string } = await error.response.json();
                      console.log(`Error response body for ${methodName}:`, errorBody);
                      errorMessage = errorBody.message || errorMessage;
                    } catch (e) {
                      console.log(
                        `Failed to parse error response for ${methodName}:`,
                        error.message
                      );
                    }
                    throw new Error(
                      `API Error: ${errorMessage} (Status: ${error.response.status})`
                    );
                  }
                  throw error;
                }
              };

              return new Proxy<QuickbaseClient>({} as QuickbaseClient, {
                get: (_, prop: string): ((params: any) => Promise<any>) | undefined => {
                  if (prop in methodMap) {
                    const methodName = prop as keyof QuickbaseClient;
                    return (params: Parameters<QuickbaseClient[typeof methodName]>[0]) => {
                      if (debug) console.log(`Proxy called ${methodName} with:`, params);
                      return invokeMethod(methodName, params);
                    };
                  }
                  console.warn(`Method ${prop} not found in methodMap`);
                  return undefined;
                },
              });
            }
        - name: tokenCache.ts
          type: file
          contents: |
            interface CachedToken {
              token: string;
              expiresAt: number; // Timestamp in milliseconds
            }

            export class TokenCache {
              private cache: Map<string, CachedToken>;
              private readonly lifespan: number; // Token lifespan in milliseconds

              constructor(lifespan: number = 4 * 60 * 1000 + 50 * 1000) {
                // Default 4:50
                this.cache = new Map<string, CachedToken>();
                this.lifespan = lifespan;
              }

              get(dbid: string): string | undefined {
                const entry = this.cache.get(dbid);
                const now = Date.now();
                if (entry && entry.expiresAt > now) {
                  return entry.token;
                }
                return undefined; // Expired or not found
              }

              // New method to get full entry
              getEntry(dbid: string): CachedToken | undefined {
                const entry = this.cache.get(dbid);
                const now = Date.now();
                if (entry && entry.expiresAt > now) {
                  return entry;
                }
                return undefined; // Expired or not found
              }

              set(dbid: string, token: string): void {
                const now = Date.now();
                this.cache.set(dbid, {
                  token,
                  expiresAt: now + this.lifespan,
                });
              }

              dump(): [string, CachedToken][] {
                return Array.from(this.cache.entries());
              }

              // New method to clear the cache
              clear(): void {
                this.cache.clear();
              }
            }
        - name: utils.ts
          type: file
          contents: |
            export const simplifyName = (name: string): string =>
              name
                .replace(/ById$/, "")
                .replace(/Api$/, "")
                .replace(/^(\w)/, (_, c) => c.toLowerCase());
    - name: test-artifacts
      type: directory
      children:
        - name: .last-run.json
          type: file
        - name: test-results.json
          type: file
    - name: test-results.json
      type: file
    - name: tests
      type: directory
      children:
        - name: playwright
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: auth
                  type: directory
                  children:
                    - name: cacheSwitching.test.ts
                      type: file
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getAppWithUserToken.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: tokenPrefetch.test.ts
                      type: file
                    - name: tokenRenewal.test.ts
                      type: file
        - name: setup.ts
          type: file
        - name: vitest
          type: directory
          children:
            - name: qb
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: getApp.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: getFields.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: tables
                  type: directory
                  children:
                    - name: getAppTables.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
            - name: unit
              type: directory
              children:
                - name: apps
                  type: directory
                  children:
                    - name: getApp.test.ts
                      type: file
                - name: auth
                  type: directory
                  children:
                    - name: fetchTempToken401.test.ts
                      type: file
                    - name: getTempToken.test.ts
                      type: file
                    - name: retryOn401.test.ts
                      type: file
                    - name: two401s.test.ts
                      type: file
                - name: fields
                  type: directory
                  children:
                    - name: getFields.test.ts
                      type: file
                - name: index.ts
                  type: file
                - name: tables
                  type: directory
                  children:
                    - name: getAppTables.test.ts
                      type: file
                    - name: getTable.test.ts
                      type: file
                    - name: updateTable.test.ts
                      type: file
    - name: text.txt
      type: file
    - name: tsconfig.json
      type: file
      contents: |-
        {
          "compilerOptions": {
            "target": "ESNext",
            "module": "ESNext",
            "moduleResolution": "bundler",
            "strict": true,
            "lib": ["ES2015", "ESNext", "DOM"], // Explicitly include ES2015 for Record
            "types": ["node", "playwright/test"],
            "esModuleInterop": true,
            "resolveJsonModule": true,
            "allowImportingTsExtensions": true,
            "noEmit": true,
            "outDir": "dist",
            "rootDir": ".",
            "declaration": true,
            "sourceMap": true,
            "baseUrl": ".",
            "paths": {
              "@/*": ["./*"]
            }
          },
          "include": ["src/**/*", "tests/**/*"],
          "exclude": ["node_modules", "dist", "src/generated-old"],
          "ts-node": {
            "esm": true,
            "transpileOnly": true
          }
        }
    - name: versionrc.json
      type: file
    - name: vitest.config.ts
      type: file
      contents: |
        import { defineConfig } from "vitest/config";
        import path from "path";

        export default defineConfig({
          test: {
            environment: "jsdom",
            include: ["tests/vitest/**/**/*.test.ts"],
            setupFiles: ["tests/setup.ts"],
            pool: "forks",
            poolOptions: {
              forks: {
                singleFork: true, // Run tests sequentially
              },
            },
          },
          resolve: {
            alias: {
              "@": path.resolve(__dirname, "./"),
            },
          },
        });
