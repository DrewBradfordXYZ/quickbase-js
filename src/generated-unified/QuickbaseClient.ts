// Generated on 2025-03-07T04:07:42.232Z
import { CreateAppRequest } from "../generated/models/CreateAppRequest.ts";
import { CreateApp200Response } from "../generated/models/CreateApp200Response.ts";
import { App } from "../generated/models/App.ts";
import { UpdateAppRequest } from "../generated/models/UpdateAppRequest.ts";
import { UpdateApp200Response } from "../generated/models/UpdateApp200Response.ts";
import { DeleteAppRequest } from "../generated/models/DeleteAppRequest.ts";
import { DeleteApp200Response } from "../generated/models/DeleteApp200Response.ts";
import { CopyAppRequest } from "../generated/models/CopyAppRequest.ts";
import { CopyApp200Response } from "../generated/models/CopyApp200Response.ts";
import { Table } from "../generated/models/Table.ts";
import { Field } from "../generated/models/Field.ts";
import { CreateField200Response } from "../generated/models/CreateField200Response.ts";
import { DeleteFields200Response } from "../generated/models/DeleteFields200Response.ts";
import { Upsert200Response } from "../generated/models/Upsert200Response.ts";

export interface QuickbaseClient {
  createApp: (params: { generated: CreateAppRequest }) => Promise<CreateApp200Response>;
  getApp: (params: { appId: string }) => Promise<App>;
  updateApp: (params: { appId: string; generated: UpdateAppRequest }) => Promise<UpdateApp200Response>;
  deleteApp: (params: { appId: string; generated: DeleteAppRequest }) => Promise<DeleteApp200Response>;
  getAppEvents: (params: { appId: string }) => Promise<any[]>;
  copyApp: (params: { appId: string; generated: CopyAppRequest }) => Promise<CopyApp200Response>;
  getAppTables: (params: { appId: string }) => Promise<Table[]>;
  getTable: (params: { appId: string; tableId: string }) => Promise<Table>;
  getRelationships: (params: { skip?: number; tableId: string }) => Promise<any>;
  createRelationship: (params: { tableId: string; generated?: any }) => Promise<any>;
  updateRelationship: (params: { tableId: string; relationshipId: any; generated?: any }) => Promise<any>;
  deleteRelationship: (params: { tableId: string; relationshipId: any }) => Promise<any>;
  getTableReports: (params: { tableId: string }) => Promise<any[]>;
  getReport: (params: { tableId: string; reportId: string }) => Promise<any>;
  runReport: (params: { tableId: string; skip?: number; top?: number; reportId: string; generated?: any }) => Promise<any>;
  getFields: (params: { tableId: string; includeFieldPerms?: boolean }) => Promise<Field[]>;
  createField: (params: { tableId: string; generated: any }) => Promise<CreateField200Response>;
  deleteFields: (params: { tableId: string; generated: any }) => Promise<DeleteFields200Response>;
  getField: (params: { tableId: string; includeFieldPerms?: boolean; fieldId: number }) => Promise<any>;
  updateField: (params: { tableId: string; fieldId: number; generated?: any }) => Promise<any>;
  getFieldsUsage: (params: { tableId: string; skip?: number; top?: number }) => Promise<any[]>;
  getFieldUsage: (params: { tableId: string; fieldId: number }) => Promise<any[]>;
  runFormula: (params: { generated?: any }) => Promise<any>;
  upsert: (params: { generated: any }) => Promise<Upsert200Response>;
  runQuery: (params: { generated?: any }) => Promise<any>;
  getTempTokenDBID: (params: { dbid: string; qBAppToken?: string }) => Promise<any>;
  exchangeSsoToken: (params: { generated?: any }) => Promise<any>;
  cloneUserToken: (params: { generated?: any }) => Promise<any>;
  transferUserToken: (params: { generated?: any }) => Promise<any>;
  deactivateUserToken: (params: {  }) => Promise<any>;
  deleteUserToken: (params: {  }) => Promise<any>;
  downloadFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<any>;
  deleteFile: (params: { tableId: string; recordId: number; fieldId: number; versionNumber: number }) => Promise<any>;
  getUsers: (params: { accountId?: any; generated?: any }) => Promise<any>;
  denyUsers: (params: { accountId?: any; generated?: string[] }) => Promise<any>;
  denyUsersAndGroups: (params: { accountId?: any; shouldDeleteFromGroups: boolean; generated?: string[] }) => Promise<any>;
  undenyUsers: (params: { accountId?: any; generated?: string[] }) => Promise<any>;
  addMembersToGroup: (params: { gid: any; generated?: string[] }) => Promise<any>;
  removeMembersFromGroup: (params: { gid: any; generated?: string[] }) => Promise<any>;
  addManagersToGroup: (params: { gid: any; generated?: string[] }) => Promise<any>;
  removeManagersFromGroup: (params: { gid: any; generated?: string[] }) => Promise<any>;
  addSubgroupsToGroup: (params: { gid: any; generated?: string[] }) => Promise<any>;
  removeSubgroupsFromGroup: (params: { gid: any; generated?: string[] }) => Promise<any>;
  audit: (params: { generated?: any }) => Promise<any>;
  platformAnalyticReads: (params: { day?: string }) => Promise<any>;
  platformAnalyticEventSummaries: (params: { accountId?: any; generated?: any }) => Promise<any>;
  exportSolution: (params: { solutionId: string; qBLVersion?: string }) => Promise<any>;
  updateSolution: (params: { solutionId: string; generated?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
  createSolution: (params: { generated?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
  exportSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; xQBLErrorsAsSuccess?: boolean; qBLVersion?: string }) => Promise<any>;
  createSolutionFromRecord: (params: { tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
  updateSolutionToRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
  changesetSolution: (params: { solutionId: string; generated?: any; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
  changesetSolutionFromRecord: (params: { solutionId: string; tableId: string; fieldId: number; recordId: number; xQBLErrorsAsSuccess?: boolean }) => Promise<any>;
  generateDocument: (params: { templateId: any; tableId: string; recordId?: any; filename: string; accept?: string; format?: string; margin?: string; unit?: string; pageSize?: string; orientation?: string; realm?: string }) => Promise<any>;
}
