// Generated on 2025-03-06T16:18:12.197Z
import { CreateAppRequest } from "../generated/models/CreateAppRequest.ts";
import { UpdateAppRequest } from "../generated/models/UpdateAppRequest.ts";
import { DeleteAppRequest } from "../generated/models/DeleteAppRequest.ts";
import { CopyAppRequest } from "../generated/models/CopyAppRequest.ts";

export interface QuickbaseClient {
  createApp: (params: { generated: CreateAppRequest }) => Promise<void>;
  getApp: (params: { appId: any }) => Promise<void>;
  updateApp: (params: { appId: any; generated: UpdateAppRequest }) => Promise<void>;
  deleteApp: (params: { appId: any; generated: DeleteAppRequest }) => Promise<void>;
  getAppEvents: (params: { appId: any }) => Promise<void>;
  copyApp: (params: { appId: any; generated: CopyAppRequest }) => Promise<void>;
  createTable: (params: { appId: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  getAppTables: (params: { appId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  getTable: (params: { appId: any; tableId: any }) => Promise<void>;
  updateTable: (params: { appId: any; tableId: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  deleteTable: (params: { appId: any; tableId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  getRelationships: (params: { skip?: any; tableId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  createRelationship: (params: { tableId: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  updateRelationship: (params: { tableId: any; relationshipId: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  deleteRelationship: (params: { tableId: any; relationshipId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  getTableReports: (params: { tableId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  getReport: (params: { tableId: any; reportId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  runReport: (params: { tableId: any; skip?: any; top?: any; reportId: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: any }) => Promise<void>;
  getFields: (params: { tableId: any; includeFieldPerms?: any }) => Promise<void>;
  createField: (params: { tableId: any; generated: object }) => Promise<void>;
  deleteFields: (params: { tableId: any; generated: object }) => Promise<void>;
  getField: (params: { tableId: any; includeFieldPerms?: any; fieldId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  updateField: (params: { tableId: any; fieldId: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  getFieldsUsage: (params: { tableId: any; skip?: any; top?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  getFieldUsage: (params: { tableId: any; fieldId: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  runFormula: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  upsert: (params: { generated: object }) => Promise<void>;
  deleteRecords: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  runQuery: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  getTempTokenDBID: (params: { dbid: any; qBRealmHostname: any; userAgent?: any; qBAppToken?: any }) => Promise<void>;
  exchangeSsoToken: (params: { qBRealmHostname: any; userAgent?: any; generated?: object }) => Promise<void>;
  cloneUserToken: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  transferUserToken: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  deactivateUserToken: (params: { qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  deleteUserToken: (params: { qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  downloadFile: (params: { tableId: any; recordId: any; fieldId: any; versionNumber: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  deleteFile: (params: { tableId: any; recordId: any; fieldId: any; versionNumber: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  getUsers: (params: { accountId?: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  denyUsers: (params: { accountId?: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  denyUsersAndGroups: (params: { accountId?: any; shouldDeleteFromGroups: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  undenyUsers: (params: { accountId?: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  addMembersToGroup: (params: { gid: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  removeMembersFromGroup: (params: { gid: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  addManagersToGroup: (params: { gid: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  removeManagersFromGroup: (params: { gid: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  addSubgroupsToGroup: (params: { gid: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  removeSubgroupsFromGroup: (params: { gid: any; qBRealmHostname: any; userAgent?: any; authorization: any; generated?: string[] }) => Promise<void>;
  audit: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; generated?: object }) => Promise<void>;
  platformAnalyticReads: (params: { day?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  platformAnalyticEventSummaries: (params: { qBRealmHostname: any; userAgent?: any; authorization: any; accountId?: any; generated?: object }) => Promise<void>;
  exportSolution: (params: { solutionId: any; qBLVersion?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  updateSolution: (params: { solutionId: any; generated?: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  createSolution: (params: { generated?: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  exportSolutionToRecord: (params: { solutionId: any; tableId: any; fieldId: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; qBLVersion?: any; userAgent?: any; authorization: any }) => Promise<void>;
  createSolutionFromRecord: (params: { tableId: any; fieldId: any; recordId: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  updateSolutionToRecord: (params: { solutionId: any; tableId: any; fieldId: any; recordId: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  changesetSolution: (params: { solutionId: any; generated?: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  changesetSolutionFromRecord: (params: { solutionId: any; tableId: any; fieldId: any; recordId: any; xQBLErrorsAsSuccess?: any; qBRealmHostname: any; userAgent?: any; authorization: any }) => Promise<void>;
  generateDocument: (params: { templateId: any; tableId: any; recordId?: any; filename: any; qBRealmHostname?: any; userAgent?: any; authorization?: any; accept?: any; format?: any; margin?: any; unit?: any; pageSize?: any; orientation?: any; realm?: any }) => Promise<void>;
}
